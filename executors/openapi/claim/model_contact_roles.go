/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package claim

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContactRoles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactRoles{}

// ContactRoles struct for ContactRoles
type ContactRoles struct {
	ContactLocator string   `json:"contactLocator"`
	Roles          []string `json:"roles"`
}

type _ContactRoles ContactRoles

// NewContactRoles instantiates a new ContactRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactRoles(contactLocator string, roles []string) *ContactRoles {
	this := ContactRoles{}
	this.ContactLocator = contactLocator
	this.Roles = roles
	return &this
}

// NewContactRolesWithDefaults instantiates a new ContactRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactRolesWithDefaults() *ContactRoles {
	this := ContactRoles{}
	return &this
}

// GetContactLocator returns the ContactLocator field value
func (o *ContactRoles) GetContactLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContactLocator
}

// GetContactLocatorOk returns a tuple with the ContactLocator field value
// and a boolean to check if the value has been set.
func (o *ContactRoles) GetContactLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactLocator, true
}

// SetContactLocator sets field value
func (o *ContactRoles) SetContactLocator(v string) {
	o.ContactLocator = v
}

// GetRoles returns the Roles field value
func (o *ContactRoles) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *ContactRoles) GetRolesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *ContactRoles) SetRoles(v []string) {
	o.Roles = v
}

func (o ContactRoles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactRoles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contactLocator"] = o.ContactLocator
	toSerialize["roles"] = o.Roles
	return toSerialize, nil
}

func (o *ContactRoles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contactLocator",
		"roles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactRoles := _ContactRoles{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactRoles)

	if err != nil {
		return err
	}

	*o = ContactRoles(varContactRoles)

	return err
}

type NullableContactRoles struct {
	value *ContactRoles
	isSet bool
}

func (v NullableContactRoles) Get() *ContactRoles {
	return v.value
}

func (v *NullableContactRoles) Set(val *ContactRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableContactRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableContactRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactRoles(val *ContactRoles) *NullableContactRoles {
	return &NullableContactRoles{value: val, isSet: true}
}

func (v NullableContactRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
