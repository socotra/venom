/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package claim

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FnolLossPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FnolLossPatchRequest{}

// FnolLossPatchRequest struct for FnolLossPatchRequest
type FnolLossPatchRequest struct {
	Type                   *string                           `json:"type,omitempty"`
	FnolLossState          *string                           `json:"fnolLossState,omitempty"`
	ExposureElementLocator *string                           `json:"exposureElementLocator,omitempty"`
	CoverageElementLocator *string                           `json:"coverageElementLocator,omitempty"`
	SetData                map[string]map[string]interface{} `json:"setData"`
	RemoveData             map[string]map[string]interface{} `json:"removeData"`
}

type _FnolLossPatchRequest FnolLossPatchRequest

// NewFnolLossPatchRequest instantiates a new FnolLossPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFnolLossPatchRequest(setData map[string]map[string]interface{}, removeData map[string]map[string]interface{}) *FnolLossPatchRequest {
	this := FnolLossPatchRequest{}
	this.SetData = setData
	this.RemoveData = removeData
	return &this
}

// NewFnolLossPatchRequestWithDefaults instantiates a new FnolLossPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFnolLossPatchRequestWithDefaults() *FnolLossPatchRequest {
	this := FnolLossPatchRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FnolLossPatchRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLossPatchRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FnolLossPatchRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FnolLossPatchRequest) SetType(v string) {
	o.Type = &v
}

// GetFnolLossState returns the FnolLossState field value if set, zero value otherwise.
func (o *FnolLossPatchRequest) GetFnolLossState() string {
	if o == nil || IsNil(o.FnolLossState) {
		var ret string
		return ret
	}
	return *o.FnolLossState
}

// GetFnolLossStateOk returns a tuple with the FnolLossState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLossPatchRequest) GetFnolLossStateOk() (*string, bool) {
	if o == nil || IsNil(o.FnolLossState) {
		return nil, false
	}
	return o.FnolLossState, true
}

// HasFnolLossState returns a boolean if a field has been set.
func (o *FnolLossPatchRequest) HasFnolLossState() bool {
	if o != nil && !IsNil(o.FnolLossState) {
		return true
	}

	return false
}

// SetFnolLossState gets a reference to the given string and assigns it to the FnolLossState field.
func (o *FnolLossPatchRequest) SetFnolLossState(v string) {
	o.FnolLossState = &v
}

// GetExposureElementLocator returns the ExposureElementLocator field value if set, zero value otherwise.
func (o *FnolLossPatchRequest) GetExposureElementLocator() string {
	if o == nil || IsNil(o.ExposureElementLocator) {
		var ret string
		return ret
	}
	return *o.ExposureElementLocator
}

// GetExposureElementLocatorOk returns a tuple with the ExposureElementLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLossPatchRequest) GetExposureElementLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ExposureElementLocator) {
		return nil, false
	}
	return o.ExposureElementLocator, true
}

// HasExposureElementLocator returns a boolean if a field has been set.
func (o *FnolLossPatchRequest) HasExposureElementLocator() bool {
	if o != nil && !IsNil(o.ExposureElementLocator) {
		return true
	}

	return false
}

// SetExposureElementLocator gets a reference to the given string and assigns it to the ExposureElementLocator field.
func (o *FnolLossPatchRequest) SetExposureElementLocator(v string) {
	o.ExposureElementLocator = &v
}

// GetCoverageElementLocator returns the CoverageElementLocator field value if set, zero value otherwise.
func (o *FnolLossPatchRequest) GetCoverageElementLocator() string {
	if o == nil || IsNil(o.CoverageElementLocator) {
		var ret string
		return ret
	}
	return *o.CoverageElementLocator
}

// GetCoverageElementLocatorOk returns a tuple with the CoverageElementLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLossPatchRequest) GetCoverageElementLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.CoverageElementLocator) {
		return nil, false
	}
	return o.CoverageElementLocator, true
}

// HasCoverageElementLocator returns a boolean if a field has been set.
func (o *FnolLossPatchRequest) HasCoverageElementLocator() bool {
	if o != nil && !IsNil(o.CoverageElementLocator) {
		return true
	}

	return false
}

// SetCoverageElementLocator gets a reference to the given string and assigns it to the CoverageElementLocator field.
func (o *FnolLossPatchRequest) SetCoverageElementLocator(v string) {
	o.CoverageElementLocator = &v
}

// GetSetData returns the SetData field value
func (o *FnolLossPatchRequest) GetSetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SetData
}

// GetSetDataOk returns a tuple with the SetData field value
// and a boolean to check if the value has been set.
func (o *FnolLossPatchRequest) GetSetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SetData, true
}

// SetSetData sets field value
func (o *FnolLossPatchRequest) SetSetData(v map[string]map[string]interface{}) {
	o.SetData = v
}

// GetRemoveData returns the RemoveData field value
func (o *FnolLossPatchRequest) GetRemoveData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RemoveData
}

// GetRemoveDataOk returns a tuple with the RemoveData field value
// and a boolean to check if the value has been set.
func (o *FnolLossPatchRequest) GetRemoveDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RemoveData, true
}

// SetRemoveData sets field value
func (o *FnolLossPatchRequest) SetRemoveData(v map[string]map[string]interface{}) {
	o.RemoveData = v
}

func (o FnolLossPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FnolLossPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.FnolLossState) {
		toSerialize["fnolLossState"] = o.FnolLossState
	}
	if !IsNil(o.ExposureElementLocator) {
		toSerialize["exposureElementLocator"] = o.ExposureElementLocator
	}
	if !IsNil(o.CoverageElementLocator) {
		toSerialize["coverageElementLocator"] = o.CoverageElementLocator
	}
	toSerialize["setData"] = o.SetData
	toSerialize["removeData"] = o.RemoveData
	return toSerialize, nil
}

func (o *FnolLossPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"setData",
		"removeData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFnolLossPatchRequest := _FnolLossPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFnolLossPatchRequest)

	if err != nil {
		return err
	}

	*o = FnolLossPatchRequest(varFnolLossPatchRequest)

	return err
}

type NullableFnolLossPatchRequest struct {
	value *FnolLossPatchRequest
	isSet bool
}

func (v NullableFnolLossPatchRequest) Get() *FnolLossPatchRequest {
	return v.value
}

func (v *NullableFnolLossPatchRequest) Set(val *FnolLossPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFnolLossPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFnolLossPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFnolLossPatchRequest(val *FnolLossPatchRequest) *NullableFnolLossPatchRequest {
	return &NullableFnolLossPatchRequest{value: val, isSet: true}
}

func (v NullableFnolLossPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFnolLossPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
