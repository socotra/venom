/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package claim

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the FnolLoss type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FnolLoss{}

// FnolLoss struct for FnolLoss
type FnolLoss struct {
	Locator                string                            `json:"locator"`
	Type                   string                            `json:"type"`
	Category               string                            `json:"category"`
	FnolLossState          string                            `json:"fnolLossState"`
	ExposureElementLocator *string                           `json:"exposureElementLocator,omitempty"`
	CoverageElementLocator *string                           `json:"coverageElementLocator,omitempty"`
	Data                   map[string]map[string]interface{} `json:"data"`
	ValidationResult       *ValidationResult                 `json:"validationResult,omitempty"`
	AnonymizedAt           *time.Time                        `json:"anonymizedAt,omitempty"`
}

type _FnolLoss FnolLoss

// NewFnolLoss instantiates a new FnolLoss object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFnolLoss(locator string, type_ string, category string, fnolLossState string, data map[string]map[string]interface{}) *FnolLoss {
	this := FnolLoss{}
	this.Locator = locator
	this.Type = type_
	this.Category = category
	this.FnolLossState = fnolLossState
	this.Data = data
	return &this
}

// NewFnolLossWithDefaults instantiates a new FnolLoss object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFnolLossWithDefaults() *FnolLoss {
	this := FnolLoss{}
	return &this
}

// GetLocator returns the Locator field value
func (o *FnolLoss) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *FnolLoss) SetLocator(v string) {
	o.Locator = v
}

// GetType returns the Type field value
func (o *FnolLoss) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FnolLoss) SetType(v string) {
	o.Type = v
}

// GetCategory returns the Category field value
func (o *FnolLoss) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *FnolLoss) SetCategory(v string) {
	o.Category = v
}

// GetFnolLossState returns the FnolLossState field value
func (o *FnolLoss) GetFnolLossState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FnolLossState
}

// GetFnolLossStateOk returns a tuple with the FnolLossState field value
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetFnolLossStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FnolLossState, true
}

// SetFnolLossState sets field value
func (o *FnolLoss) SetFnolLossState(v string) {
	o.FnolLossState = v
}

// GetExposureElementLocator returns the ExposureElementLocator field value if set, zero value otherwise.
func (o *FnolLoss) GetExposureElementLocator() string {
	if o == nil || IsNil(o.ExposureElementLocator) {
		var ret string
		return ret
	}
	return *o.ExposureElementLocator
}

// GetExposureElementLocatorOk returns a tuple with the ExposureElementLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetExposureElementLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ExposureElementLocator) {
		return nil, false
	}
	return o.ExposureElementLocator, true
}

// HasExposureElementLocator returns a boolean if a field has been set.
func (o *FnolLoss) HasExposureElementLocator() bool {
	if o != nil && !IsNil(o.ExposureElementLocator) {
		return true
	}

	return false
}

// SetExposureElementLocator gets a reference to the given string and assigns it to the ExposureElementLocator field.
func (o *FnolLoss) SetExposureElementLocator(v string) {
	o.ExposureElementLocator = &v
}

// GetCoverageElementLocator returns the CoverageElementLocator field value if set, zero value otherwise.
func (o *FnolLoss) GetCoverageElementLocator() string {
	if o == nil || IsNil(o.CoverageElementLocator) {
		var ret string
		return ret
	}
	return *o.CoverageElementLocator
}

// GetCoverageElementLocatorOk returns a tuple with the CoverageElementLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetCoverageElementLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.CoverageElementLocator) {
		return nil, false
	}
	return o.CoverageElementLocator, true
}

// HasCoverageElementLocator returns a boolean if a field has been set.
func (o *FnolLoss) HasCoverageElementLocator() bool {
	if o != nil && !IsNil(o.CoverageElementLocator) {
		return true
	}

	return false
}

// SetCoverageElementLocator gets a reference to the given string and assigns it to the CoverageElementLocator field.
func (o *FnolLoss) SetCoverageElementLocator(v string) {
	o.CoverageElementLocator = &v
}

// GetData returns the Data field value
func (o *FnolLoss) GetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *FnolLoss) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *FnolLoss) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *FnolLoss) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *FnolLoss) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

// GetAnonymizedAt returns the AnonymizedAt field value if set, zero value otherwise.
func (o *FnolLoss) GetAnonymizedAt() time.Time {
	if o == nil || IsNil(o.AnonymizedAt) {
		var ret time.Time
		return ret
	}
	return *o.AnonymizedAt
}

// GetAnonymizedAtOk returns a tuple with the AnonymizedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolLoss) GetAnonymizedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AnonymizedAt) {
		return nil, false
	}
	return o.AnonymizedAt, true
}

// HasAnonymizedAt returns a boolean if a field has been set.
func (o *FnolLoss) HasAnonymizedAt() bool {
	if o != nil && !IsNil(o.AnonymizedAt) {
		return true
	}

	return false
}

// SetAnonymizedAt gets a reference to the given time.Time and assigns it to the AnonymizedAt field.
func (o *FnolLoss) SetAnonymizedAt(v time.Time) {
	o.AnonymizedAt = &v
}

func (o FnolLoss) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FnolLoss) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["type"] = o.Type
	toSerialize["category"] = o.Category
	toSerialize["fnolLossState"] = o.FnolLossState
	if !IsNil(o.ExposureElementLocator) {
		toSerialize["exposureElementLocator"] = o.ExposureElementLocator
	}
	if !IsNil(o.CoverageElementLocator) {
		toSerialize["coverageElementLocator"] = o.CoverageElementLocator
	}
	toSerialize["data"] = o.Data
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	if !IsNil(o.AnonymizedAt) {
		toSerialize["anonymizedAt"] = o.AnonymizedAt
	}
	return toSerialize, nil
}

func (o *FnolLoss) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"type",
		"category",
		"fnolLossState",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFnolLoss := _FnolLoss{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFnolLoss)

	if err != nil {
		return err
	}

	*o = FnolLoss(varFnolLoss)

	return err
}

type NullableFnolLoss struct {
	value *FnolLoss
	isSet bool
}

func (v NullableFnolLoss) Get() *FnolLoss {
	return v.value
}

func (v *NullableFnolLoss) Set(val *FnolLoss) {
	v.value = val
	v.isSet = true
}

func (v NullableFnolLoss) IsSet() bool {
	return v.isSet
}

func (v *NullableFnolLoss) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFnolLoss(val *FnolLoss) *NullableFnolLoss {
	return &NullableFnolLoss{value: val, isSet: true}
}

func (v NullableFnolLoss) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFnolLoss) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
