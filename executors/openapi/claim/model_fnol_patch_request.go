/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package claim

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the FnolPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FnolPatchRequest{}

// FnolPatchRequest struct for FnolPatchRequest
type FnolPatchRequest struct {
	SetData          map[string]map[string]interface{} `json:"setData"`
	RemoveData       map[string]map[string]interface{} `json:"removeData"`
	IncidentTime     *time.Time                        `json:"incidentTime,omitempty"`
	IncidentTimezone *string                           `json:"incidentTimezone,omitempty"`
	IncidentSummary  *string                           `json:"incidentSummary,omitempty"`
	Region           *string                           `json:"region,omitempty"`
	AccountLocator   *string                           `json:"accountLocator,omitempty"`
	PolicyLocator    *string                           `json:"policyLocator,omitempty"`
}

type _FnolPatchRequest FnolPatchRequest

// NewFnolPatchRequest instantiates a new FnolPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFnolPatchRequest(setData map[string]map[string]interface{}, removeData map[string]map[string]interface{}) *FnolPatchRequest {
	this := FnolPatchRequest{}
	this.SetData = setData
	this.RemoveData = removeData
	return &this
}

// NewFnolPatchRequestWithDefaults instantiates a new FnolPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFnolPatchRequestWithDefaults() *FnolPatchRequest {
	this := FnolPatchRequest{}
	return &this
}

// GetSetData returns the SetData field value
func (o *FnolPatchRequest) GetSetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SetData
}

// GetSetDataOk returns a tuple with the SetData field value
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetSetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SetData, true
}

// SetSetData sets field value
func (o *FnolPatchRequest) SetSetData(v map[string]map[string]interface{}) {
	o.SetData = v
}

// GetRemoveData returns the RemoveData field value
func (o *FnolPatchRequest) GetRemoveData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RemoveData
}

// GetRemoveDataOk returns a tuple with the RemoveData field value
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetRemoveDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RemoveData, true
}

// SetRemoveData sets field value
func (o *FnolPatchRequest) SetRemoveData(v map[string]map[string]interface{}) {
	o.RemoveData = v
}

// GetIncidentTime returns the IncidentTime field value if set, zero value otherwise.
func (o *FnolPatchRequest) GetIncidentTime() time.Time {
	if o == nil || IsNil(o.IncidentTime) {
		var ret time.Time
		return ret
	}
	return *o.IncidentTime
}

// GetIncidentTimeOk returns a tuple with the IncidentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetIncidentTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IncidentTime) {
		return nil, false
	}
	return o.IncidentTime, true
}

// HasIncidentTime returns a boolean if a field has been set.
func (o *FnolPatchRequest) HasIncidentTime() bool {
	if o != nil && !IsNil(o.IncidentTime) {
		return true
	}

	return false
}

// SetIncidentTime gets a reference to the given time.Time and assigns it to the IncidentTime field.
func (o *FnolPatchRequest) SetIncidentTime(v time.Time) {
	o.IncidentTime = &v
}

// GetIncidentTimezone returns the IncidentTimezone field value if set, zero value otherwise.
func (o *FnolPatchRequest) GetIncidentTimezone() string {
	if o == nil || IsNil(o.IncidentTimezone) {
		var ret string
		return ret
	}
	return *o.IncidentTimezone
}

// GetIncidentTimezoneOk returns a tuple with the IncidentTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetIncidentTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.IncidentTimezone) {
		return nil, false
	}
	return o.IncidentTimezone, true
}

// HasIncidentTimezone returns a boolean if a field has been set.
func (o *FnolPatchRequest) HasIncidentTimezone() bool {
	if o != nil && !IsNil(o.IncidentTimezone) {
		return true
	}

	return false
}

// SetIncidentTimezone gets a reference to the given string and assigns it to the IncidentTimezone field.
func (o *FnolPatchRequest) SetIncidentTimezone(v string) {
	o.IncidentTimezone = &v
}

// GetIncidentSummary returns the IncidentSummary field value if set, zero value otherwise.
func (o *FnolPatchRequest) GetIncidentSummary() string {
	if o == nil || IsNil(o.IncidentSummary) {
		var ret string
		return ret
	}
	return *o.IncidentSummary
}

// GetIncidentSummaryOk returns a tuple with the IncidentSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetIncidentSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.IncidentSummary) {
		return nil, false
	}
	return o.IncidentSummary, true
}

// HasIncidentSummary returns a boolean if a field has been set.
func (o *FnolPatchRequest) HasIncidentSummary() bool {
	if o != nil && !IsNil(o.IncidentSummary) {
		return true
	}

	return false
}

// SetIncidentSummary gets a reference to the given string and assigns it to the IncidentSummary field.
func (o *FnolPatchRequest) SetIncidentSummary(v string) {
	o.IncidentSummary = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *FnolPatchRequest) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *FnolPatchRequest) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *FnolPatchRequest) SetRegion(v string) {
	o.Region = &v
}

// GetAccountLocator returns the AccountLocator field value if set, zero value otherwise.
func (o *FnolPatchRequest) GetAccountLocator() string {
	if o == nil || IsNil(o.AccountLocator) {
		var ret string
		return ret
	}
	return *o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetAccountLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AccountLocator) {
		return nil, false
	}
	return o.AccountLocator, true
}

// HasAccountLocator returns a boolean if a field has been set.
func (o *FnolPatchRequest) HasAccountLocator() bool {
	if o != nil && !IsNil(o.AccountLocator) {
		return true
	}

	return false
}

// SetAccountLocator gets a reference to the given string and assigns it to the AccountLocator field.
func (o *FnolPatchRequest) SetAccountLocator(v string) {
	o.AccountLocator = &v
}

// GetPolicyLocator returns the PolicyLocator field value if set, zero value otherwise.
func (o *FnolPatchRequest) GetPolicyLocator() string {
	if o == nil || IsNil(o.PolicyLocator) {
		var ret string
		return ret
	}
	return *o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnolPatchRequest) GetPolicyLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyLocator) {
		return nil, false
	}
	return o.PolicyLocator, true
}

// HasPolicyLocator returns a boolean if a field has been set.
func (o *FnolPatchRequest) HasPolicyLocator() bool {
	if o != nil && !IsNil(o.PolicyLocator) {
		return true
	}

	return false
}

// SetPolicyLocator gets a reference to the given string and assigns it to the PolicyLocator field.
func (o *FnolPatchRequest) SetPolicyLocator(v string) {
	o.PolicyLocator = &v
}

func (o FnolPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FnolPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["setData"] = o.SetData
	toSerialize["removeData"] = o.RemoveData
	if !IsNil(o.IncidentTime) {
		toSerialize["incidentTime"] = o.IncidentTime
	}
	if !IsNil(o.IncidentTimezone) {
		toSerialize["incidentTimezone"] = o.IncidentTimezone
	}
	if !IsNil(o.IncidentSummary) {
		toSerialize["incidentSummary"] = o.IncidentSummary
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.AccountLocator) {
		toSerialize["accountLocator"] = o.AccountLocator
	}
	if !IsNil(o.PolicyLocator) {
		toSerialize["policyLocator"] = o.PolicyLocator
	}
	return toSerialize, nil
}

func (o *FnolPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"setData",
		"removeData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFnolPatchRequest := _FnolPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFnolPatchRequest)

	if err != nil {
		return err
	}

	*o = FnolPatchRequest(varFnolPatchRequest)

	return err
}

type NullableFnolPatchRequest struct {
	value *FnolPatchRequest
	isSet bool
}

func (v NullableFnolPatchRequest) Get() *FnolPatchRequest {
	return v.value
}

func (v *NullableFnolPatchRequest) Set(val *FnolPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFnolPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFnolPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFnolPatchRequest(val *FnolPatchRequest) *NullableFnolPatchRequest {
	return &NullableFnolPatchRequest{value: val, isSet: true}
}

func (v NullableFnolPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFnolPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
