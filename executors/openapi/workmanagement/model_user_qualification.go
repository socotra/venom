/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package workmanagement

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserQualification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserQualification{}

// UserQualification struct for UserQualification
type UserQualification struct {
	UserLocator string `json:"userLocator"`
	Category    string `json:"category"`
	Level       string `json:"level"`
}

type _UserQualification UserQualification

// NewUserQualification instantiates a new UserQualification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserQualification(userLocator string, category string, level string) *UserQualification {
	this := UserQualification{}
	this.UserLocator = userLocator
	this.Category = category
	this.Level = level
	return &this
}

// NewUserQualificationWithDefaults instantiates a new UserQualification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserQualificationWithDefaults() *UserQualification {
	this := UserQualification{}
	return &this
}

// GetUserLocator returns the UserLocator field value
func (o *UserQualification) GetUserLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserLocator
}

// GetUserLocatorOk returns a tuple with the UserLocator field value
// and a boolean to check if the value has been set.
func (o *UserQualification) GetUserLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLocator, true
}

// SetUserLocator sets field value
func (o *UserQualification) SetUserLocator(v string) {
	o.UserLocator = v
}

// GetCategory returns the Category field value
func (o *UserQualification) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *UserQualification) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *UserQualification) SetCategory(v string) {
	o.Category = v
}

// GetLevel returns the Level field value
func (o *UserQualification) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *UserQualification) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *UserQualification) SetLevel(v string) {
	o.Level = v
}

func (o UserQualification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserQualification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userLocator"] = o.UserLocator
	toSerialize["category"] = o.Category
	toSerialize["level"] = o.Level
	return toSerialize, nil
}

func (o *UserQualification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userLocator",
		"category",
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserQualification := _UserQualification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserQualification)

	if err != nil {
		return err
	}

	*o = UserQualification(varUserQualification)

	return err
}

type NullableUserQualification struct {
	value *UserQualification
	isSet bool
}

func (v NullableUserQualification) Get() *UserQualification {
	return v.value
}

func (v *NullableUserQualification) Set(val *UserQualification) {
	v.value = val
	v.isSet = true
}

func (v NullableUserQualification) IsSet() bool {
	return v.isSet
}

func (v *NullableUserQualification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserQualification(val *UserQualification) *NullableUserQualification {
	return &NullableUserQualification{value: val, isSet: true}
}

func (v NullableUserQualification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserQualification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
