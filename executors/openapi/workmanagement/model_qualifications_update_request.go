/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package workmanagement

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the QualificationsUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QualificationsUpdateRequest{}

// QualificationsUpdateRequest struct for QualificationsUpdateRequest
type QualificationsUpdateRequest struct {
	RemoveQualifications map[string]string `json:"removeQualifications"`
	AddQualifications    map[string]string `json:"addQualifications"`
}

type _QualificationsUpdateRequest QualificationsUpdateRequest

// NewQualificationsUpdateRequest instantiates a new QualificationsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQualificationsUpdateRequest(removeQualifications map[string]string, addQualifications map[string]string) *QualificationsUpdateRequest {
	this := QualificationsUpdateRequest{}
	this.RemoveQualifications = removeQualifications
	this.AddQualifications = addQualifications
	return &this
}

// NewQualificationsUpdateRequestWithDefaults instantiates a new QualificationsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQualificationsUpdateRequestWithDefaults() *QualificationsUpdateRequest {
	this := QualificationsUpdateRequest{}
	return &this
}

// GetRemoveQualifications returns the RemoveQualifications field value
func (o *QualificationsUpdateRequest) GetRemoveQualifications() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.RemoveQualifications
}

// GetRemoveQualificationsOk returns a tuple with the RemoveQualifications field value
// and a boolean to check if the value has been set.
func (o *QualificationsUpdateRequest) GetRemoveQualificationsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveQualifications, true
}

// SetRemoveQualifications sets field value
func (o *QualificationsUpdateRequest) SetRemoveQualifications(v map[string]string) {
	o.RemoveQualifications = v
}

// GetAddQualifications returns the AddQualifications field value
func (o *QualificationsUpdateRequest) GetAddQualifications() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.AddQualifications
}

// GetAddQualificationsOk returns a tuple with the AddQualifications field value
// and a boolean to check if the value has been set.
func (o *QualificationsUpdateRequest) GetAddQualificationsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddQualifications, true
}

// SetAddQualifications sets field value
func (o *QualificationsUpdateRequest) SetAddQualifications(v map[string]string) {
	o.AddQualifications = v
}

func (o QualificationsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QualificationsUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["removeQualifications"] = o.RemoveQualifications
	toSerialize["addQualifications"] = o.AddQualifications
	return toSerialize, nil
}

func (o *QualificationsUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"removeQualifications",
		"addQualifications",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQualificationsUpdateRequest := _QualificationsUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQualificationsUpdateRequest)

	if err != nil {
		return err
	}

	*o = QualificationsUpdateRequest(varQualificationsUpdateRequest)

	return err
}

type NullableQualificationsUpdateRequest struct {
	value *QualificationsUpdateRequest
	isSet bool
}

func (v NullableQualificationsUpdateRequest) Get() *QualificationsUpdateRequest {
	return v.value
}

func (v *NullableQualificationsUpdateRequest) Set(val *QualificationsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQualificationsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQualificationsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQualificationsUpdateRequest(val *QualificationsUpdateRequest) *NullableQualificationsUpdateRequest {
	return &NullableQualificationsUpdateRequest{value: val, isSet: true}
}

func (v NullableQualificationsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQualificationsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
