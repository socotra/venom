/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package workmanagement

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Assignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assignment{}

// Assignment struct for Assignment
type Assignment struct {
	Locator          string     `json:"locator"`
	UserLocator      string     `json:"userLocator"`
	AssignmentRole   string     `json:"assignmentRole"`
	ReferenceType    string     `json:"referenceType"`
	ReferenceLocator string     `json:"referenceLocator"`
	AssignmentState  string     `json:"assignmentState"`
	CreatedBy        string     `json:"createdBy"`
	CreatedAt        time.Time  `json:"createdAt"`
	UpdatedBy        *string    `json:"updatedBy,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

type _Assignment Assignment

// NewAssignment instantiates a new Assignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignment(locator string, userLocator string, assignmentRole string, referenceType string, referenceLocator string, assignmentState string, createdBy string, createdAt time.Time) *Assignment {
	this := Assignment{}
	this.Locator = locator
	this.UserLocator = userLocator
	this.AssignmentRole = assignmentRole
	this.ReferenceType = referenceType
	this.ReferenceLocator = referenceLocator
	this.AssignmentState = assignmentState
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	return &this
}

// NewAssignmentWithDefaults instantiates a new Assignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentWithDefaults() *Assignment {
	this := Assignment{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Assignment) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Assignment) SetLocator(v string) {
	o.Locator = v
}

// GetUserLocator returns the UserLocator field value
func (o *Assignment) GetUserLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserLocator
}

// GetUserLocatorOk returns a tuple with the UserLocator field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetUserLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLocator, true
}

// SetUserLocator sets field value
func (o *Assignment) SetUserLocator(v string) {
	o.UserLocator = v
}

// GetAssignmentRole returns the AssignmentRole field value
func (o *Assignment) GetAssignmentRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssignmentRole
}

// GetAssignmentRoleOk returns a tuple with the AssignmentRole field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetAssignmentRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignmentRole, true
}

// SetAssignmentRole sets field value
func (o *Assignment) SetAssignmentRole(v string) {
	o.AssignmentRole = v
}

// GetReferenceType returns the ReferenceType field value
func (o *Assignment) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *Assignment) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *Assignment) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *Assignment) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

// GetAssignmentState returns the AssignmentState field value
func (o *Assignment) GetAssignmentState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssignmentState
}

// GetAssignmentStateOk returns a tuple with the AssignmentState field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetAssignmentStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignmentState, true
}

// SetAssignmentState sets field value
func (o *Assignment) SetAssignmentState(v string) {
	o.AssignmentState = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Assignment) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Assignment) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Assignment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Assignment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Assignment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Assignment) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assignment) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Assignment) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *Assignment) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Assignment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assignment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Assignment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Assignment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Assignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["userLocator"] = o.UserLocator
	toSerialize["assignmentRole"] = o.AssignmentRole
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["referenceLocator"] = o.ReferenceLocator
	toSerialize["assignmentState"] = o.AssignmentState
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *Assignment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"userLocator",
		"assignmentRole",
		"referenceType",
		"referenceLocator",
		"assignmentState",
		"createdBy",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignment := _Assignment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignment)

	if err != nil {
		return err
	}

	*o = Assignment(varAssignment)

	return err
}

type NullableAssignment struct {
	value *Assignment
	isSet bool
}

func (v NullableAssignment) Get() *Assignment {
	return v.value
}

func (v *NullableAssignment) Set(val *Assignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignment(val *Assignment) *NullableAssignment {
	return &NullableAssignment{value: val, isSet: true}
}

func (v NullableAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
