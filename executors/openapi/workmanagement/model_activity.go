/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package workmanagement

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Activity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Activity{}

// Activity struct for Activity
type Activity struct {
	Locator                  string              `json:"locator"`
	Category                 string              `json:"category"`
	Type                     string              `json:"type"`
	ActivityState            string              `json:"activityState"`
	References               []ActivityReference `json:"references"`
	UnderwritingFlagLocators []string            `json:"underwritingFlagLocators"`
	DeadlineTime             *time.Time          `json:"deadlineTime,omitempty"`
	AssignedTo               *string             `json:"assignedTo,omitempty"`
	CreatedBy                string              `json:"createdBy"`
	CreatedAt                time.Time           `json:"createdAt"`
	UpdatedBy                *string             `json:"updatedBy,omitempty"`
	UpdatedAt                *time.Time          `json:"updatedAt,omitempty"`
	Description              *string             `json:"description,omitempty"`
	ActivityNumber           *string             `json:"activityNumber,omitempty"`
}

type _Activity Activity

// NewActivity instantiates a new Activity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivity(locator string, category string, type_ string, activityState string, references []ActivityReference, underwritingFlagLocators []string, createdBy string, createdAt time.Time) *Activity {
	this := Activity{}
	this.Locator = locator
	this.Category = category
	this.Type = type_
	this.ActivityState = activityState
	this.References = references
	this.UnderwritingFlagLocators = underwritingFlagLocators
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	return &this
}

// NewActivityWithDefaults instantiates a new Activity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityWithDefaults() *Activity {
	this := Activity{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Activity) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Activity) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Activity) SetLocator(v string) {
	o.Locator = v
}

// GetCategory returns the Category field value
func (o *Activity) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Activity) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Activity) SetCategory(v string) {
	o.Category = v
}

// GetType returns the Type field value
func (o *Activity) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Activity) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Activity) SetType(v string) {
	o.Type = v
}

// GetActivityState returns the ActivityState field value
func (o *Activity) GetActivityState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivityState
}

// GetActivityStateOk returns a tuple with the ActivityState field value
// and a boolean to check if the value has been set.
func (o *Activity) GetActivityStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivityState, true
}

// SetActivityState sets field value
func (o *Activity) SetActivityState(v string) {
	o.ActivityState = v
}

// GetReferences returns the References field value
func (o *Activity) GetReferences() []ActivityReference {
	if o == nil {
		var ret []ActivityReference
		return ret
	}

	return o.References
}

// GetReferencesOk returns a tuple with the References field value
// and a boolean to check if the value has been set.
func (o *Activity) GetReferencesOk() ([]ActivityReference, bool) {
	if o == nil {
		return nil, false
	}
	return o.References, true
}

// SetReferences sets field value
func (o *Activity) SetReferences(v []ActivityReference) {
	o.References = v
}

// GetUnderwritingFlagLocators returns the UnderwritingFlagLocators field value
func (o *Activity) GetUnderwritingFlagLocators() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UnderwritingFlagLocators
}

// GetUnderwritingFlagLocatorsOk returns a tuple with the UnderwritingFlagLocators field value
// and a boolean to check if the value has been set.
func (o *Activity) GetUnderwritingFlagLocatorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnderwritingFlagLocators, true
}

// SetUnderwritingFlagLocators sets field value
func (o *Activity) SetUnderwritingFlagLocators(v []string) {
	o.UnderwritingFlagLocators = v
}

// GetDeadlineTime returns the DeadlineTime field value if set, zero value otherwise.
func (o *Activity) GetDeadlineTime() time.Time {
	if o == nil || IsNil(o.DeadlineTime) {
		var ret time.Time
		return ret
	}
	return *o.DeadlineTime
}

// GetDeadlineTimeOk returns a tuple with the DeadlineTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetDeadlineTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeadlineTime) {
		return nil, false
	}
	return o.DeadlineTime, true
}

// HasDeadlineTime returns a boolean if a field has been set.
func (o *Activity) HasDeadlineTime() bool {
	if o != nil && !IsNil(o.DeadlineTime) {
		return true
	}

	return false
}

// SetDeadlineTime gets a reference to the given time.Time and assigns it to the DeadlineTime field.
func (o *Activity) SetDeadlineTime(v time.Time) {
	o.DeadlineTime = &v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *Activity) GetAssignedTo() string {
	if o == nil || IsNil(o.AssignedTo) {
		var ret string
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetAssignedToOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *Activity) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given string and assigns it to the AssignedTo field.
func (o *Activity) SetAssignedTo(v string) {
	o.AssignedTo = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Activity) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Activity) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Activity) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Activity) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Activity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Activity) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Activity) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Activity) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *Activity) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Activity) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Activity) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Activity) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Activity) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Activity) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Activity) SetDescription(v string) {
	o.Description = &v
}

// GetActivityNumber returns the ActivityNumber field value if set, zero value otherwise.
func (o *Activity) GetActivityNumber() string {
	if o == nil || IsNil(o.ActivityNumber) {
		var ret string
		return ret
	}
	return *o.ActivityNumber
}

// GetActivityNumberOk returns a tuple with the ActivityNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetActivityNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityNumber) {
		return nil, false
	}
	return o.ActivityNumber, true
}

// HasActivityNumber returns a boolean if a field has been set.
func (o *Activity) HasActivityNumber() bool {
	if o != nil && !IsNil(o.ActivityNumber) {
		return true
	}

	return false
}

// SetActivityNumber gets a reference to the given string and assigns it to the ActivityNumber field.
func (o *Activity) SetActivityNumber(v string) {
	o.ActivityNumber = &v
}

func (o Activity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Activity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["category"] = o.Category
	toSerialize["type"] = o.Type
	toSerialize["activityState"] = o.ActivityState
	toSerialize["references"] = o.References
	toSerialize["underwritingFlagLocators"] = o.UnderwritingFlagLocators
	if !IsNil(o.DeadlineTime) {
		toSerialize["deadlineTime"] = o.DeadlineTime
	}
	if !IsNil(o.AssignedTo) {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ActivityNumber) {
		toSerialize["activityNumber"] = o.ActivityNumber
	}
	return toSerialize, nil
}

func (o *Activity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"category",
		"type",
		"activityState",
		"references",
		"underwritingFlagLocators",
		"createdBy",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivity := _Activity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivity)

	if err != nil {
		return err
	}

	*o = Activity(varActivity)

	return err
}

type NullableActivity struct {
	value *Activity
	isSet bool
}

func (v NullableActivity) Get() *Activity {
	return v.value
}

func (v *NullableActivity) Set(val *Activity) {
	v.value = val
	v.isSet = true
}

func (v NullableActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivity(val *Activity) *NullableActivity {
	return &NullableActivity{value: val, isSet: true}
}

func (v NullableActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
