/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package workmanagement

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AssignmentsControllerAPIService AssignmentsControllerAPI service
type AssignmentsControllerAPIService service

type ApiCompleteAssignmentRequest struct {
	ctx               context.Context
	ApiService        *AssignmentsControllerAPIService
	assignmentLocator string
}

func (r ApiCompleteAssignmentRequest) Execute() (*Assignment, *http.Response, error) {
	return r.ApiService.CompleteAssignmentExecute(r)
}

/*
CompleteAssignment Method for CompleteAssignment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param assignmentLocator
	@return ApiCompleteAssignmentRequest
*/
func (a *AssignmentsControllerAPIService) CompleteAssignment(ctx context.Context, assignmentLocator string) ApiCompleteAssignmentRequest {
	return ApiCompleteAssignmentRequest{
		ApiService:        a,
		ctx:               ctx,
		assignmentLocator: assignmentLocator,
	}
}

// Execute executes the request
//
//	@return Assignment
func (a *AssignmentsControllerAPIService) CompleteAssignmentExecute(r ApiCompleteAssignmentRequest) (*Assignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Assignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.CompleteAssignment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{assignmentLocator}/complete"
	localVarPath = strings.Replace(localVarPath, "{"+"assignmentLocator"+"}", url.PathEscape(parameterValueToString(r.assignmentLocator, "assignmentLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssignmentRequest struct {
	ctx        context.Context
	ApiService *AssignmentsControllerAPIService
	locator    string
}

func (r ApiGetAssignmentRequest) Execute() (*Assignment, *http.Response, error) {
	return r.ApiService.GetAssignmentExecute(r)
}

/*
GetAssignment Method for GetAssignment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiGetAssignmentRequest
*/
func (a *AssignmentsControllerAPIService) GetAssignment(ctx context.Context, locator string) ApiGetAssignmentRequest {
	return ApiGetAssignmentRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return Assignment
func (a *AssignmentsControllerAPIService) GetAssignmentExecute(r ApiGetAssignmentRequest) (*Assignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Assignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.GetAssignment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAssignedUsersRequest struct {
	ctx              context.Context
	ApiService       *AssignmentsControllerAPIService
	referenceType    string
	referenceLocator string
	assignmentState  string
	offset           *int32
	count            *int32
}

func (r ApiListAssignedUsersRequest) Offset(offset int32) ApiListAssignedUsersRequest {
	r.offset = &offset
	return r
}

func (r ApiListAssignedUsersRequest) Count(count int32) ApiListAssignedUsersRequest {
	r.count = &count
	return r
}

func (r ApiListAssignedUsersRequest) Execute() (*ListPageResponseAssignment, *http.Response, error) {
	return r.ApiService.ListAssignedUsersExecute(r)
}

/*
ListAssignedUsers Method for ListAssignedUsers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param referenceType
	@param referenceLocator
	@param assignmentState
	@return ApiListAssignedUsersRequest
*/
func (a *AssignmentsControllerAPIService) ListAssignedUsers(ctx context.Context, referenceType string, referenceLocator string, assignmentState string) ApiListAssignedUsersRequest {
	return ApiListAssignedUsersRequest{
		ApiService:       a,
		ctx:              ctx,
		referenceType:    referenceType,
		referenceLocator: referenceLocator,
		assignmentState:  assignmentState,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAssignment
func (a *AssignmentsControllerAPIService) ListAssignedUsersExecute(r ApiListAssignedUsersRequest) (*ListPageResponseAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.ListAssignedUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{referenceType}/{referenceLocator}/{assignmentState}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"referenceType"+"}", url.PathEscape(parameterValueToString(r.referenceType, "referenceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"referenceLocator"+"}", url.PathEscape(parameterValueToString(r.referenceLocator, "referenceLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assignmentState"+"}", url.PathEscape(parameterValueToString(r.assignmentState, "assignmentState")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAssignmentHistoryRequest struct {
	ctx        context.Context
	ApiService *AssignmentsControllerAPIService
	locator    string
	offset     *int32
	count      *int32
}

func (r ApiListAssignmentHistoryRequest) Offset(offset int32) ApiListAssignmentHistoryRequest {
	r.offset = &offset
	return r
}

func (r ApiListAssignmentHistoryRequest) Count(count int32) ApiListAssignmentHistoryRequest {
	r.count = &count
	return r
}

func (r ApiListAssignmentHistoryRequest) Execute() (*ListPageResponseAssignment, *http.Response, error) {
	return r.ApiService.ListAssignmentHistoryExecute(r)
}

/*
ListAssignmentHistory Method for ListAssignmentHistory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiListAssignmentHistoryRequest
*/
func (a *AssignmentsControllerAPIService) ListAssignmentHistory(ctx context.Context, locator string) ApiListAssignmentHistoryRequest {
	return ApiListAssignmentHistoryRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAssignment
func (a *AssignmentsControllerAPIService) ListAssignmentHistoryExecute(r ApiListAssignmentHistoryRequest) (*ListPageResponseAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.ListAssignmentHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{locator}/history/list"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListReferenceAssignmentsHistoryRequest struct {
	ctx              context.Context
	ApiService       *AssignmentsControllerAPIService
	referenceType    string
	referenceLocator string
	offset           *int32
	count            *int32
}

func (r ApiListReferenceAssignmentsHistoryRequest) Offset(offset int32) ApiListReferenceAssignmentsHistoryRequest {
	r.offset = &offset
	return r
}

func (r ApiListReferenceAssignmentsHistoryRequest) Count(count int32) ApiListReferenceAssignmentsHistoryRequest {
	r.count = &count
	return r
}

func (r ApiListReferenceAssignmentsHistoryRequest) Execute() (*ListPageResponseAssignment, *http.Response, error) {
	return r.ApiService.ListReferenceAssignmentsHistoryExecute(r)
}

/*
ListReferenceAssignmentsHistory Method for ListReferenceAssignmentsHistory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param referenceType
	@param referenceLocator
	@return ApiListReferenceAssignmentsHistoryRequest
*/
func (a *AssignmentsControllerAPIService) ListReferenceAssignmentsHistory(ctx context.Context, referenceType string, referenceLocator string) ApiListReferenceAssignmentsHistoryRequest {
	return ApiListReferenceAssignmentsHistoryRequest{
		ApiService:       a,
		ctx:              ctx,
		referenceType:    referenceType,
		referenceLocator: referenceLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAssignment
func (a *AssignmentsControllerAPIService) ListReferenceAssignmentsHistoryExecute(r ApiListReferenceAssignmentsHistoryRequest) (*ListPageResponseAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.ListReferenceAssignmentsHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{referenceType}/{referenceLocator}/history/list"
	localVarPath = strings.Replace(localVarPath, "{"+"referenceType"+"}", url.PathEscape(parameterValueToString(r.referenceType, "referenceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"referenceLocator"+"}", url.PathEscape(parameterValueToString(r.referenceLocator, "referenceLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserAssignmentsRequest struct {
	ctx             context.Context
	ApiService      *AssignmentsControllerAPIService
	userLocator     string
	assignmentState string
	offset          *int32
	count           *int32
}

func (r ApiListUserAssignmentsRequest) Offset(offset int32) ApiListUserAssignmentsRequest {
	r.offset = &offset
	return r
}

func (r ApiListUserAssignmentsRequest) Count(count int32) ApiListUserAssignmentsRequest {
	r.count = &count
	return r
}

func (r ApiListUserAssignmentsRequest) Execute() (*ListPageResponseAssignment, *http.Response, error) {
	return r.ApiService.ListUserAssignmentsExecute(r)
}

/*
ListUserAssignments Method for ListUserAssignments

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userLocator
	@param assignmentState
	@return ApiListUserAssignmentsRequest
*/
func (a *AssignmentsControllerAPIService) ListUserAssignments(ctx context.Context, userLocator string, assignmentState string) ApiListUserAssignmentsRequest {
	return ApiListUserAssignmentsRequest{
		ApiService:      a,
		ctx:             ctx,
		userLocator:     userLocator,
		assignmentState: assignmentState,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAssignment
func (a *AssignmentsControllerAPIService) ListUserAssignmentsExecute(r ApiListUserAssignmentsRequest) (*ListPageResponseAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.ListUserAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/user/{userLocator}/{assignmentState}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"userLocator"+"}", url.PathEscape(parameterValueToString(r.userLocator, "userLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assignmentState"+"}", url.PathEscape(parameterValueToString(r.assignmentState, "assignmentState")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserAssignmentsHistoryRequest struct {
	ctx         context.Context
	ApiService  *AssignmentsControllerAPIService
	userLocator string
	offset      *int32
	count       *int32
}

func (r ApiListUserAssignmentsHistoryRequest) Offset(offset int32) ApiListUserAssignmentsHistoryRequest {
	r.offset = &offset
	return r
}

func (r ApiListUserAssignmentsHistoryRequest) Count(count int32) ApiListUserAssignmentsHistoryRequest {
	r.count = &count
	return r
}

func (r ApiListUserAssignmentsHistoryRequest) Execute() (*ListPageResponseAssignment, *http.Response, error) {
	return r.ApiService.ListUserAssignmentsHistoryExecute(r)
}

/*
ListUserAssignmentsHistory Method for ListUserAssignmentsHistory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userLocator
	@return ApiListUserAssignmentsHistoryRequest
*/
func (a *AssignmentsControllerAPIService) ListUserAssignmentsHistory(ctx context.Context, userLocator string) ApiListUserAssignmentsHistoryRequest {
	return ApiListUserAssignmentsHistoryRequest{
		ApiService:  a,
		ctx:         ctx,
		userLocator: userLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAssignment
func (a *AssignmentsControllerAPIService) ListUserAssignmentsHistoryExecute(r ApiListUserAssignmentsHistoryRequest) (*ListPageResponseAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.ListUserAssignmentsHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/user/{userLocator}/history/list"
	localVarPath = strings.Replace(localVarPath, "{"+"userLocator"+"}", url.PathEscape(parameterValueToString(r.userLocator, "userLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMakeAssignmentRequest struct {
	ctx                     context.Context
	ApiService              *AssignmentsControllerAPIService
	assignmentCreateRequest *AssignmentCreateRequest
}

func (r ApiMakeAssignmentRequest) AssignmentCreateRequest(assignmentCreateRequest AssignmentCreateRequest) ApiMakeAssignmentRequest {
	r.assignmentCreateRequest = &assignmentCreateRequest
	return r
}

func (r ApiMakeAssignmentRequest) Execute() (*Assignment, *http.Response, error) {
	return r.ApiService.MakeAssignmentExecute(r)
}

/*
MakeAssignment Method for MakeAssignment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMakeAssignmentRequest
*/
func (a *AssignmentsControllerAPIService) MakeAssignment(ctx context.Context) ApiMakeAssignmentRequest {
	return ApiMakeAssignmentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Assignment
func (a *AssignmentsControllerAPIService) MakeAssignmentExecute(r ApiMakeAssignmentRequest) (*Assignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Assignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.MakeAssignment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assignmentCreateRequest == nil {
		return localVarReturnValue, nil, reportError("assignmentCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assignmentCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnassignAssignmentRequest struct {
	ctx               context.Context
	ApiService        *AssignmentsControllerAPIService
	assignmentLocator string
}

func (r ApiUnassignAssignmentRequest) Execute() (*Assignment, *http.Response, error) {
	return r.ApiService.UnassignAssignmentExecute(r)
}

/*
UnassignAssignment Method for UnassignAssignment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param assignmentLocator
	@return ApiUnassignAssignmentRequest
*/
func (a *AssignmentsControllerAPIService) UnassignAssignment(ctx context.Context, assignmentLocator string) ApiUnassignAssignmentRequest {
	return ApiUnassignAssignmentRequest{
		ApiService:        a,
		ctx:               ctx,
		assignmentLocator: assignmentLocator,
	}
}

// Execute executes the request
//
//	@return Assignment
func (a *AssignmentsControllerAPIService) UnassignAssignmentExecute(r ApiUnassignAssignmentRequest) (*Assignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Assignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.UnassignAssignment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{assignmentLocator}/unassign"
	localVarPath = strings.Replace(localVarPath, "{"+"assignmentLocator"+"}", url.PathEscape(parameterValueToString(r.assignmentLocator, "assignmentLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnassignAssignment1Request struct {
	ctx               context.Context
	ApiService        *AssignmentsControllerAPIService
	assignmentLocator string
	userLocator       string
}

func (r ApiUnassignAssignment1Request) Execute() (*Assignment, *http.Response, error) {
	return r.ApiService.UnassignAssignment1Execute(r)
}

/*
UnassignAssignment1 Method for UnassignAssignment1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param assignmentLocator
	@param userLocator
	@return ApiUnassignAssignment1Request
*/
func (a *AssignmentsControllerAPIService) UnassignAssignment1(ctx context.Context, assignmentLocator string, userLocator string) ApiUnassignAssignment1Request {
	return ApiUnassignAssignment1Request{
		ApiService:        a,
		ctx:               ctx,
		assignmentLocator: assignmentLocator,
		userLocator:       userLocator,
	}
}

// Execute executes the request
//
//	@return Assignment
func (a *AssignmentsControllerAPIService) UnassignAssignment1Execute(r ApiUnassignAssignment1Request) (*Assignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Assignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.UnassignAssignment1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{assignmentLocator}/assign/{userLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"assignmentLocator"+"}", url.PathEscape(parameterValueToString(r.assignmentLocator, "assignmentLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userLocator"+"}", url.PathEscape(parameterValueToString(r.userLocator, "userLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUncompleteAssignmentRequest struct {
	ctx               context.Context
	ApiService        *AssignmentsControllerAPIService
	assignmentLocator string
}

func (r ApiUncompleteAssignmentRequest) Execute() (*Assignment, *http.Response, error) {
	return r.ApiService.UncompleteAssignmentExecute(r)
}

/*
UncompleteAssignment Method for UncompleteAssignment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param assignmentLocator
	@return ApiUncompleteAssignmentRequest
*/
func (a *AssignmentsControllerAPIService) UncompleteAssignment(ctx context.Context, assignmentLocator string) ApiUncompleteAssignmentRequest {
	return ApiUncompleteAssignmentRequest{
		ApiService:        a,
		ctx:               ctx,
		assignmentLocator: assignmentLocator,
	}
}

// Execute executes the request
//
//	@return Assignment
func (a *AssignmentsControllerAPIService) UncompleteAssignmentExecute(r ApiUncompleteAssignmentRequest) (*Assignment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Assignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssignmentsControllerAPIService.UncompleteAssignment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assignments/{assignmentLocator}/uncomplete"
	localVarPath = strings.Replace(localVarPath, "{"+"assignmentLocator"+"}", url.PathEscape(parameterValueToString(r.assignmentLocator, "assignmentLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
