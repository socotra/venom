/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PatchRoleReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchRoleReq{}

// PatchRoleReq struct for PatchRoleReq
type PatchRoleReq struct {
	Version           int32    `json:"version"`
	Name              string   `json:"name"`
	AddPermissions    []string `json:"addPermissions"`
	RemovePermissions []string `json:"removePermissions"`
	Description       string   `json:"description"`
}

type _PatchRoleReq PatchRoleReq

// NewPatchRoleReq instantiates a new PatchRoleReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchRoleReq(version int32, name string, addPermissions []string, removePermissions []string, description string) *PatchRoleReq {
	this := PatchRoleReq{}
	this.Version = version
	this.Name = name
	this.AddPermissions = addPermissions
	this.RemovePermissions = removePermissions
	this.Description = description
	return &this
}

// NewPatchRoleReqWithDefaults instantiates a new PatchRoleReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchRoleReqWithDefaults() *PatchRoleReq {
	this := PatchRoleReq{}
	return &this
}

// GetVersion returns the Version field value
func (o *PatchRoleReq) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PatchRoleReq) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PatchRoleReq) SetVersion(v int32) {
	o.Version = v
}

// GetName returns the Name field value
func (o *PatchRoleReq) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PatchRoleReq) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PatchRoleReq) SetName(v string) {
	o.Name = v
}

// GetAddPermissions returns the AddPermissions field value
func (o *PatchRoleReq) GetAddPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AddPermissions
}

// GetAddPermissionsOk returns a tuple with the AddPermissions field value
// and a boolean to check if the value has been set.
func (o *PatchRoleReq) GetAddPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddPermissions, true
}

// SetAddPermissions sets field value
func (o *PatchRoleReq) SetAddPermissions(v []string) {
	o.AddPermissions = v
}

// GetRemovePermissions returns the RemovePermissions field value
func (o *PatchRoleReq) GetRemovePermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemovePermissions
}

// GetRemovePermissionsOk returns a tuple with the RemovePermissions field value
// and a boolean to check if the value has been set.
func (o *PatchRoleReq) GetRemovePermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovePermissions, true
}

// SetRemovePermissions sets field value
func (o *PatchRoleReq) SetRemovePermissions(v []string) {
	o.RemovePermissions = v
}

// GetDescription returns the Description field value
func (o *PatchRoleReq) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PatchRoleReq) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PatchRoleReq) SetDescription(v string) {
	o.Description = v
}

func (o PatchRoleReq) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchRoleReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["name"] = o.Name
	toSerialize["addPermissions"] = o.AddPermissions
	toSerialize["removePermissions"] = o.RemovePermissions
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *PatchRoleReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"name",
		"addPermissions",
		"removePermissions",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchRoleReq := _PatchRoleReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchRoleReq)

	if err != nil {
		return err
	}

	*o = PatchRoleReq(varPatchRoleReq)

	return err
}

type NullablePatchRoleReq struct {
	value *PatchRoleReq
	isSet bool
}

func (v NullablePatchRoleReq) Get() *PatchRoleReq {
	return v.value
}

func (v *NullablePatchRoleReq) Set(val *PatchRoleReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRoleReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRoleReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRoleReq(val *PatchRoleReq) *NullablePatchRoleReq {
	return &NullablePatchRoleReq{value: val, isSet: true}
}

func (v NullablePatchRoleReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchRoleReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
