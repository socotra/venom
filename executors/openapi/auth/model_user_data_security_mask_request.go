/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserDataSecurityMaskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDataSecurityMaskRequest{}

// UserDataSecurityMaskRequest struct for UserDataSecurityMaskRequest
type UserDataSecurityMaskRequest struct {
	TenantLocator string              `json:"tenantLocator"`
	Type          string              `json:"type"`
	Fields        map[string][]string `json:"fields"`
}

type _UserDataSecurityMaskRequest UserDataSecurityMaskRequest

// NewUserDataSecurityMaskRequest instantiates a new UserDataSecurityMaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataSecurityMaskRequest(tenantLocator string, type_ string, fields map[string][]string) *UserDataSecurityMaskRequest {
	this := UserDataSecurityMaskRequest{}
	this.TenantLocator = tenantLocator
	this.Type = type_
	this.Fields = fields
	return &this
}

// NewUserDataSecurityMaskRequestWithDefaults instantiates a new UserDataSecurityMaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataSecurityMaskRequestWithDefaults() *UserDataSecurityMaskRequest {
	this := UserDataSecurityMaskRequest{}
	return &this
}

// GetTenantLocator returns the TenantLocator field value
func (o *UserDataSecurityMaskRequest) GetTenantLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantLocator
}

// GetTenantLocatorOk returns a tuple with the TenantLocator field value
// and a boolean to check if the value has been set.
func (o *UserDataSecurityMaskRequest) GetTenantLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantLocator, true
}

// SetTenantLocator sets field value
func (o *UserDataSecurityMaskRequest) SetTenantLocator(v string) {
	o.TenantLocator = v
}

// GetType returns the Type field value
func (o *UserDataSecurityMaskRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserDataSecurityMaskRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserDataSecurityMaskRequest) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value
func (o *UserDataSecurityMaskRequest) GetFields() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *UserDataSecurityMaskRequest) GetFieldsOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *UserDataSecurityMaskRequest) SetFields(v map[string][]string) {
	o.Fields = v
}

func (o UserDataSecurityMaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDataSecurityMaskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantLocator"] = o.TenantLocator
	toSerialize["type"] = o.Type
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

func (o *UserDataSecurityMaskRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantLocator",
		"type",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDataSecurityMaskRequest := _UserDataSecurityMaskRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDataSecurityMaskRequest)

	if err != nil {
		return err
	}

	*o = UserDataSecurityMaskRequest(varUserDataSecurityMaskRequest)

	return err
}

type NullableUserDataSecurityMaskRequest struct {
	value *UserDataSecurityMaskRequest
	isSet bool
}

func (v NullableUserDataSecurityMaskRequest) Get() *UserDataSecurityMaskRequest {
	return v.value
}

func (v *NullableUserDataSecurityMaskRequest) Set(val *UserDataSecurityMaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataSecurityMaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataSecurityMaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataSecurityMaskRequest(val *UserDataSecurityMaskRequest) *NullableUserDataSecurityMaskRequest {
	return &NullableUserDataSecurityMaskRequest{value: val, isSet: true}
}

func (v NullableUserDataSecurityMaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataSecurityMaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
