/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IdentityProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProvider{}

// IdentityProvider struct for IdentityProvider
type IdentityProvider struct {
	Id                     string `json:"id"`
	DisplayName            string `json:"displayName"`
	Type                   string `json:"type"`
	AcsUrl                 string `json:"acsUrl"`
	CallbackUrl            string `json:"callbackUrl"`
	EntityId               string `json:"entityId"`
	SingleSignOnServiceUrl string `json:"singleSignOnServiceUrl"`
}

type _IdentityProvider IdentityProvider

// NewIdentityProvider instantiates a new IdentityProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProvider(id string, displayName string, type_ string, acsUrl string, callbackUrl string, entityId string, singleSignOnServiceUrl string) *IdentityProvider {
	this := IdentityProvider{}
	this.Id = id
	this.DisplayName = displayName
	this.Type = type_
	this.AcsUrl = acsUrl
	this.CallbackUrl = callbackUrl
	this.EntityId = entityId
	this.SingleSignOnServiceUrl = singleSignOnServiceUrl
	return &this
}

// NewIdentityProviderWithDefaults instantiates a new IdentityProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderWithDefaults() *IdentityProvider {
	this := IdentityProvider{}
	return &this
}

// GetId returns the Id field value
func (o *IdentityProvider) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IdentityProvider) SetId(v string) {
	o.Id = v
}

// GetDisplayName returns the DisplayName field value
func (o *IdentityProvider) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *IdentityProvider) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetType returns the Type field value
func (o *IdentityProvider) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IdentityProvider) SetType(v string) {
	o.Type = v
}

// GetAcsUrl returns the AcsUrl field value
func (o *IdentityProvider) GetAcsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AcsUrl
}

// GetAcsUrlOk returns a tuple with the AcsUrl field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetAcsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcsUrl, true
}

// SetAcsUrl sets field value
func (o *IdentityProvider) SetAcsUrl(v string) {
	o.AcsUrl = v
}

// GetCallbackUrl returns the CallbackUrl field value
func (o *IdentityProvider) GetCallbackUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackUrl, true
}

// SetCallbackUrl sets field value
func (o *IdentityProvider) SetCallbackUrl(v string) {
	o.CallbackUrl = v
}

// GetEntityId returns the EntityId field value
func (o *IdentityProvider) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *IdentityProvider) SetEntityId(v string) {
	o.EntityId = v
}

// GetSingleSignOnServiceUrl returns the SingleSignOnServiceUrl field value
func (o *IdentityProvider) GetSingleSignOnServiceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SingleSignOnServiceUrl
}

// GetSingleSignOnServiceUrlOk returns a tuple with the SingleSignOnServiceUrl field value
// and a boolean to check if the value has been set.
func (o *IdentityProvider) GetSingleSignOnServiceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingleSignOnServiceUrl, true
}

// SetSingleSignOnServiceUrl sets field value
func (o *IdentityProvider) SetSingleSignOnServiceUrl(v string) {
	o.SingleSignOnServiceUrl = v
}

func (o IdentityProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["displayName"] = o.DisplayName
	toSerialize["type"] = o.Type
	toSerialize["acsUrl"] = o.AcsUrl
	toSerialize["callbackUrl"] = o.CallbackUrl
	toSerialize["entityId"] = o.EntityId
	toSerialize["singleSignOnServiceUrl"] = o.SingleSignOnServiceUrl
	return toSerialize, nil
}

func (o *IdentityProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"displayName",
		"type",
		"acsUrl",
		"callbackUrl",
		"entityId",
		"singleSignOnServiceUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityProvider := _IdentityProvider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityProvider)

	if err != nil {
		return err
	}

	*o = IdentityProvider(varIdentityProvider)

	return err
}

type NullableIdentityProvider struct {
	value *IdentityProvider
	isSet bool
}

func (v NullableIdentityProvider) Get() *IdentityProvider {
	return v.value
}

func (v *NullableIdentityProvider) Set(val *IdentityProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProvider(val *IdentityProvider) *NullableIdentityProvider {
	return &NullableIdentityProvider{value: val, isSet: true}
}

func (v NullableIdentityProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
