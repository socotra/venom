/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RoleDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleDetails{}

// RoleDetails struct for RoleDetails
type RoleDetails struct {
	Name        string    `json:"name"`
	Locator     string    `json:"locator"`
	Permissions []string  `json:"permissions"`
	Version     int32     `json:"version"`
	CreatedAt   time.Time `json:"createdAt"`
	CreatedBy   string    `json:"createdBy"`
	Description string    `json:"description"`
}

type _RoleDetails RoleDetails

// NewRoleDetails instantiates a new RoleDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDetails(name string, locator string, permissions []string, version int32, createdAt time.Time, createdBy string, description string) *RoleDetails {
	this := RoleDetails{}
	this.Name = name
	this.Locator = locator
	this.Permissions = permissions
	this.Version = version
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Description = description
	return &this
}

// NewRoleDetailsWithDefaults instantiates a new RoleDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDetailsWithDefaults() *RoleDetails {
	this := RoleDetails{}
	return &this
}

// GetName returns the Name field value
func (o *RoleDetails) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleDetails) SetName(v string) {
	o.Name = v
}

// GetLocator returns the Locator field value
func (o *RoleDetails) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *RoleDetails) SetLocator(v string) {
	o.Locator = v
}

// GetPermissions returns the Permissions field value
func (o *RoleDetails) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *RoleDetails) SetPermissions(v []string) {
	o.Permissions = v
}

// GetVersion returns the Version field value
func (o *RoleDetails) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *RoleDetails) SetVersion(v int32) {
	o.Version = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RoleDetails) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RoleDetails) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *RoleDetails) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *RoleDetails) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetDescription returns the Description field value
func (o *RoleDetails) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RoleDetails) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RoleDetails) SetDescription(v string) {
	o.Description = v
}

func (o RoleDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["locator"] = o.Locator
	toSerialize["permissions"] = o.Permissions
	toSerialize["version"] = o.Version
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *RoleDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"locator",
		"permissions",
		"version",
		"createdAt",
		"createdBy",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleDetails := _RoleDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleDetails)

	if err != nil {
		return err
	}

	*o = RoleDetails(varRoleDetails)

	return err
}

type NullableRoleDetails struct {
	value *RoleDetails
	isSet bool
}

func (v NullableRoleDetails) Get() *RoleDetails {
	return v.value
}

func (v *NullableRoleDetails) Set(val *RoleDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDetails(val *RoleDetails) *NullableRoleDetails {
	return &NullableRoleDetails{value: val, isSet: true}
}

func (v NullableRoleDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
