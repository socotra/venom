/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PatchUserTenantsReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchUserTenantsReq{}

// PatchUserTenantsReq struct for PatchUserTenantsReq
type PatchUserTenantsReq struct {
	AddTenants    []string `json:"addTenants"`
	RemoveTenants []string `json:"removeTenants"`
}

type _PatchUserTenantsReq PatchUserTenantsReq

// NewPatchUserTenantsReq instantiates a new PatchUserTenantsReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchUserTenantsReq(addTenants []string, removeTenants []string) *PatchUserTenantsReq {
	this := PatchUserTenantsReq{}
	this.AddTenants = addTenants
	this.RemoveTenants = removeTenants
	return &this
}

// NewPatchUserTenantsReqWithDefaults instantiates a new PatchUserTenantsReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchUserTenantsReqWithDefaults() *PatchUserTenantsReq {
	this := PatchUserTenantsReq{}
	return &this
}

// GetAddTenants returns the AddTenants field value
func (o *PatchUserTenantsReq) GetAddTenants() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AddTenants
}

// GetAddTenantsOk returns a tuple with the AddTenants field value
// and a boolean to check if the value has been set.
func (o *PatchUserTenantsReq) GetAddTenantsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddTenants, true
}

// SetAddTenants sets field value
func (o *PatchUserTenantsReq) SetAddTenants(v []string) {
	o.AddTenants = v
}

// GetRemoveTenants returns the RemoveTenants field value
func (o *PatchUserTenantsReq) GetRemoveTenants() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemoveTenants
}

// GetRemoveTenantsOk returns a tuple with the RemoveTenants field value
// and a boolean to check if the value has been set.
func (o *PatchUserTenantsReq) GetRemoveTenantsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveTenants, true
}

// SetRemoveTenants sets field value
func (o *PatchUserTenantsReq) SetRemoveTenants(v []string) {
	o.RemoveTenants = v
}

func (o PatchUserTenantsReq) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchUserTenantsReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addTenants"] = o.AddTenants
	toSerialize["removeTenants"] = o.RemoveTenants
	return toSerialize, nil
}

func (o *PatchUserTenantsReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addTenants",
		"removeTenants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchUserTenantsReq := _PatchUserTenantsReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchUserTenantsReq)

	if err != nil {
		return err
	}

	*o = PatchUserTenantsReq(varPatchUserTenantsReq)

	return err
}

type NullablePatchUserTenantsReq struct {
	value *PatchUserTenantsReq
	isSet bool
}

func (v NullablePatchUserTenantsReq) Get() *PatchUserTenantsReq {
	return v.value
}

func (v *NullablePatchUserTenantsReq) Set(val *PatchUserTenantsReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchUserTenantsReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchUserTenantsReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchUserTenantsReq(val *PatchUserTenantsReq) *NullablePatchUserTenantsReq {
	return &NullablePatchUserTenantsReq{value: val, isSet: true}
}

func (v NullablePatchUserTenantsReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchUserTenantsReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
