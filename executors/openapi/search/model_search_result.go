/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResult{}

// SearchResult struct for SearchResult
type SearchResult struct {
	Score               float64                           `json:"score"`
	SearchEntityType    string                            `json:"searchEntityType"`
	SearchEntityLocator string                            `json:"searchEntityLocator"`
	ProductName         string                            `json:"productName"`
	AccountLocator      string                            `json:"accountLocator"`
	SearchSummary       map[string]map[string]interface{} `json:"searchSummary"`
	Highlights          []string                          `json:"highlights"`
}

type _SearchResult SearchResult

// NewSearchResult instantiates a new SearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResult(score float64, searchEntityType string, searchEntityLocator string, productName string, accountLocator string, searchSummary map[string]map[string]interface{}, highlights []string) *SearchResult {
	this := SearchResult{}
	this.Score = score
	this.SearchEntityType = searchEntityType
	this.SearchEntityLocator = searchEntityLocator
	this.ProductName = productName
	this.AccountLocator = accountLocator
	this.SearchSummary = searchSummary
	this.Highlights = highlights
	return &this
}

// NewSearchResultWithDefaults instantiates a new SearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultWithDefaults() *SearchResult {
	this := SearchResult{}
	return &this
}

// GetScore returns the Score field value
func (o *SearchResult) GetScore() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *SearchResult) SetScore(v float64) {
	o.Score = v
}

// GetSearchEntityType returns the SearchEntityType field value
func (o *SearchResult) GetSearchEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchEntityType
}

// GetSearchEntityTypeOk returns a tuple with the SearchEntityType field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetSearchEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchEntityType, true
}

// SetSearchEntityType sets field value
func (o *SearchResult) SetSearchEntityType(v string) {
	o.SearchEntityType = v
}

// GetSearchEntityLocator returns the SearchEntityLocator field value
func (o *SearchResult) GetSearchEntityLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchEntityLocator
}

// GetSearchEntityLocatorOk returns a tuple with the SearchEntityLocator field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetSearchEntityLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchEntityLocator, true
}

// SetSearchEntityLocator sets field value
func (o *SearchResult) SetSearchEntityLocator(v string) {
	o.SearchEntityLocator = v
}

// GetProductName returns the ProductName field value
func (o *SearchResult) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *SearchResult) SetProductName(v string) {
	o.ProductName = v
}

// GetAccountLocator returns the AccountLocator field value
func (o *SearchResult) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *SearchResult) SetAccountLocator(v string) {
	o.AccountLocator = v
}

// GetSearchSummary returns the SearchSummary field value
func (o *SearchResult) GetSearchSummary() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SearchSummary
}

// GetSearchSummaryOk returns a tuple with the SearchSummary field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetSearchSummaryOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SearchSummary, true
}

// SetSearchSummary sets field value
func (o *SearchResult) SetSearchSummary(v map[string]map[string]interface{}) {
	o.SearchSummary = v
}

// GetHighlights returns the Highlights field value
func (o *SearchResult) GetHighlights() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Highlights
}

// GetHighlightsOk returns a tuple with the Highlights field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetHighlightsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Highlights, true
}

// SetHighlights sets field value
func (o *SearchResult) SetHighlights(v []string) {
	o.Highlights = v
}

func (o SearchResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["score"] = o.Score
	toSerialize["searchEntityType"] = o.SearchEntityType
	toSerialize["searchEntityLocator"] = o.SearchEntityLocator
	toSerialize["productName"] = o.ProductName
	toSerialize["accountLocator"] = o.AccountLocator
	toSerialize["searchSummary"] = o.SearchSummary
	toSerialize["highlights"] = o.Highlights
	return toSerialize, nil
}

func (o *SearchResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"score",
		"searchEntityType",
		"searchEntityLocator",
		"productName",
		"accountLocator",
		"searchSummary",
		"highlights",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchResult := _SearchResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchResult)

	if err != nil {
		return err
	}

	*o = SearchResult(varSearchResult)

	return err
}

type NullableSearchResult struct {
	value *SearchResult
	isSet bool
}

func (v NullableSearchResult) Get() *SearchResult {
	return v.value
}

func (v *NullableSearchResult) Set(val *SearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResult(val *SearchResult) *NullableSearchResult {
	return &NullableSearchResult{value: val, isSet: true}
}

func (v NullableSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
