/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequest{}

// SearchRequest struct for SearchRequest
type SearchRequest struct {
	SearchString      string       `json:"searchString"`
	SearchEntityType  string       `json:"searchEntityType"`
	SearchTerms       []SearchTerm `json:"searchTerms"`
	StartCreationTime *time.Time   `json:"startCreationTime,omitempty"`
	EndCreationTime   *time.Time   `json:"endCreationTime,omitempty"`
	Fields            []string     `json:"fields"`
}

type _SearchRequest SearchRequest

// NewSearchRequest instantiates a new SearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequest(searchString string, searchEntityType string, searchTerms []SearchTerm, fields []string) *SearchRequest {
	this := SearchRequest{}
	this.SearchString = searchString
	this.SearchEntityType = searchEntityType
	this.SearchTerms = searchTerms
	this.Fields = fields
	return &this
}

// NewSearchRequestWithDefaults instantiates a new SearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestWithDefaults() *SearchRequest {
	this := SearchRequest{}
	return &this
}

// GetSearchString returns the SearchString field value
func (o *SearchRequest) GetSearchString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchString
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSearchStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchString, true
}

// SetSearchString sets field value
func (o *SearchRequest) SetSearchString(v string) {
	o.SearchString = v
}

// GetSearchEntityType returns the SearchEntityType field value
func (o *SearchRequest) GetSearchEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchEntityType
}

// GetSearchEntityTypeOk returns a tuple with the SearchEntityType field value
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSearchEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchEntityType, true
}

// SetSearchEntityType sets field value
func (o *SearchRequest) SetSearchEntityType(v string) {
	o.SearchEntityType = v
}

// GetSearchTerms returns the SearchTerms field value
func (o *SearchRequest) GetSearchTerms() []SearchTerm {
	if o == nil {
		var ret []SearchTerm
		return ret
	}

	return o.SearchTerms
}

// GetSearchTermsOk returns a tuple with the SearchTerms field value
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetSearchTermsOk() ([]SearchTerm, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchTerms, true
}

// SetSearchTerms sets field value
func (o *SearchRequest) SetSearchTerms(v []SearchTerm) {
	o.SearchTerms = v
}

// GetStartCreationTime returns the StartCreationTime field value if set, zero value otherwise.
func (o *SearchRequest) GetStartCreationTime() time.Time {
	if o == nil || IsNil(o.StartCreationTime) {
		var ret time.Time
		return ret
	}
	return *o.StartCreationTime
}

// GetStartCreationTimeOk returns a tuple with the StartCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetStartCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartCreationTime) {
		return nil, false
	}
	return o.StartCreationTime, true
}

// HasStartCreationTime returns a boolean if a field has been set.
func (o *SearchRequest) HasStartCreationTime() bool {
	if o != nil && !IsNil(o.StartCreationTime) {
		return true
	}

	return false
}

// SetStartCreationTime gets a reference to the given time.Time and assigns it to the StartCreationTime field.
func (o *SearchRequest) SetStartCreationTime(v time.Time) {
	o.StartCreationTime = &v
}

// GetEndCreationTime returns the EndCreationTime field value if set, zero value otherwise.
func (o *SearchRequest) GetEndCreationTime() time.Time {
	if o == nil || IsNil(o.EndCreationTime) {
		var ret time.Time
		return ret
	}
	return *o.EndCreationTime
}

// GetEndCreationTimeOk returns a tuple with the EndCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetEndCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndCreationTime) {
		return nil, false
	}
	return o.EndCreationTime, true
}

// HasEndCreationTime returns a boolean if a field has been set.
func (o *SearchRequest) HasEndCreationTime() bool {
	if o != nil && !IsNil(o.EndCreationTime) {
		return true
	}

	return false
}

// SetEndCreationTime gets a reference to the given time.Time and assigns it to the EndCreationTime field.
func (o *SearchRequest) SetEndCreationTime(v time.Time) {
	o.EndCreationTime = &v
}

// GetFields returns the Fields field value
func (o *SearchRequest) GetFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetFieldsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *SearchRequest) SetFields(v []string) {
	o.Fields = v
}

func (o SearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["searchString"] = o.SearchString
	toSerialize["searchEntityType"] = o.SearchEntityType
	toSerialize["searchTerms"] = o.SearchTerms
	if !IsNil(o.StartCreationTime) {
		toSerialize["startCreationTime"] = o.StartCreationTime
	}
	if !IsNil(o.EndCreationTime) {
		toSerialize["endCreationTime"] = o.EndCreationTime
	}
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

func (o *SearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchString",
		"searchEntityType",
		"searchTerms",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchRequest := _SearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchRequest)

	if err != nil {
		return err
	}

	*o = SearchRequest(varSearchRequest)

	return err
}

type NullableSearchRequest struct {
	value *SearchRequest
	isSet bool
}

func (v NullableSearchRequest) Get() *SearchRequest {
	return v.value
}

func (v *NullableSearchRequest) Set(val *SearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequest(val *SearchRequest) *NullableSearchRequest {
	return &NullableSearchRequest{value: val, isSet: true}
}

func (v NullableSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
