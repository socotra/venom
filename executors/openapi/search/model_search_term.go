/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchTerm{}

// SearchTerm struct for SearchTerm
type SearchTerm struct {
	SearchTerm string `json:"searchTerm"`
	FieldName  string `json:"fieldName"`
	Match      string `json:"match"`
	Absolute   string `json:"absolute"`
}

type _SearchTerm SearchTerm

// NewSearchTerm instantiates a new SearchTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchTerm(searchTerm string, fieldName string, match string, absolute string) *SearchTerm {
	this := SearchTerm{}
	this.SearchTerm = searchTerm
	this.FieldName = fieldName
	this.Match = match
	this.Absolute = absolute
	return &this
}

// NewSearchTermWithDefaults instantiates a new SearchTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTermWithDefaults() *SearchTerm {
	this := SearchTerm{}
	return &this
}

// GetSearchTerm returns the SearchTerm field value
func (o *SearchTerm) GetSearchTerm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchTerm
}

// GetSearchTermOk returns a tuple with the SearchTerm field value
// and a boolean to check if the value has been set.
func (o *SearchTerm) GetSearchTermOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchTerm, true
}

// SetSearchTerm sets field value
func (o *SearchTerm) SetSearchTerm(v string) {
	o.SearchTerm = v
}

// GetFieldName returns the FieldName field value
func (o *SearchTerm) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *SearchTerm) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *SearchTerm) SetFieldName(v string) {
	o.FieldName = v
}

// GetMatch returns the Match field value
func (o *SearchTerm) GetMatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *SearchTerm) GetMatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *SearchTerm) SetMatch(v string) {
	o.Match = v
}

// GetAbsolute returns the Absolute field value
func (o *SearchTerm) GetAbsolute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Absolute
}

// GetAbsoluteOk returns a tuple with the Absolute field value
// and a boolean to check if the value has been set.
func (o *SearchTerm) GetAbsoluteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Absolute, true
}

// SetAbsolute sets field value
func (o *SearchTerm) SetAbsolute(v string) {
	o.Absolute = v
}

func (o SearchTerm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["searchTerm"] = o.SearchTerm
	toSerialize["fieldName"] = o.FieldName
	toSerialize["match"] = o.Match
	toSerialize["absolute"] = o.Absolute
	return toSerialize, nil
}

func (o *SearchTerm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchTerm",
		"fieldName",
		"match",
		"absolute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchTerm := _SearchTerm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchTerm)

	if err != nil {
		return err
	}

	*o = SearchTerm(varSearchTerm)

	return err
}

type NullableSearchTerm struct {
	value *SearchTerm
	isSet bool
}

func (v NullableSearchTerm) Get() *SearchTerm {
	return v.value
}

func (v *NullableSearchTerm) Set(val *SearchTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTerm(val *SearchTerm) *NullableSearchTerm {
	return &NullableSearchTerm{value: val, isSet: true}
}

func (v NullableSearchTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
