/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchServiceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchServiceResponse{}

// SearchServiceResponse struct for SearchServiceResponse
type SearchServiceResponse struct {
	SearchToken string         `json:"searchToken"`
	Offset      int32          `json:"offset"`
	Count       int32          `json:"count"`
	Results     []SearchResult `json:"results"`
}

type _SearchServiceResponse SearchServiceResponse

// NewSearchServiceResponse instantiates a new SearchServiceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchServiceResponse(searchToken string, offset int32, count int32, results []SearchResult) *SearchServiceResponse {
	this := SearchServiceResponse{}
	this.SearchToken = searchToken
	this.Offset = offset
	this.Count = count
	this.Results = results
	return &this
}

// NewSearchServiceResponseWithDefaults instantiates a new SearchServiceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchServiceResponseWithDefaults() *SearchServiceResponse {
	this := SearchServiceResponse{}
	return &this
}

// GetSearchToken returns the SearchToken field value
func (o *SearchServiceResponse) GetSearchToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchToken
}

// GetSearchTokenOk returns a tuple with the SearchToken field value
// and a boolean to check if the value has been set.
func (o *SearchServiceResponse) GetSearchTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchToken, true
}

// SetSearchToken sets field value
func (o *SearchServiceResponse) SetSearchToken(v string) {
	o.SearchToken = v
}

// GetOffset returns the Offset field value
func (o *SearchServiceResponse) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *SearchServiceResponse) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *SearchServiceResponse) SetOffset(v int32) {
	o.Offset = v
}

// GetCount returns the Count field value
func (o *SearchServiceResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *SearchServiceResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *SearchServiceResponse) SetCount(v int32) {
	o.Count = v
}

// GetResults returns the Results field value
func (o *SearchServiceResponse) GetResults() []SearchResult {
	if o == nil {
		var ret []SearchResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *SearchServiceResponse) GetResultsOk() ([]SearchResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *SearchServiceResponse) SetResults(v []SearchResult) {
	o.Results = v
}

func (o SearchServiceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchServiceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["searchToken"] = o.SearchToken
	toSerialize["offset"] = o.Offset
	toSerialize["count"] = o.Count
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *SearchServiceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchToken",
		"offset",
		"count",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchServiceResponse := _SearchServiceResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchServiceResponse)

	if err != nil {
		return err
	}

	*o = SearchServiceResponse(varSearchServiceResponse)

	return err
}

type NullableSearchServiceResponse struct {
	value *SearchServiceResponse
	isSet bool
}

func (v NullableSearchServiceResponse) Get() *SearchServiceResponse {
	return v.value
}

func (v *NullableSearchServiceResponse) Set(val *SearchServiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchServiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchServiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchServiceResponse(val *SearchServiceResponse) *NullableSearchServiceResponse {
	return &NullableSearchServiceResponse{value: val, isSet: true}
}

func (v NullableSearchServiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchServiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
