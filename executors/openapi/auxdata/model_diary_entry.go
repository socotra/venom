/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DiaryEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiaryEntry{}

// DiaryEntry struct for DiaryEntry
type DiaryEntry struct {
	Locator          string    `json:"locator"`
	ReferenceLocator string    `json:"referenceLocator"`
	ReferenceType    string    `json:"referenceType"`
	Category         *string   `json:"category,omitempty"`
	Contents         string    `json:"contents"`
	CreatedAt        time.Time `json:"createdAt"`
	CreatedBy        string    `json:"createdBy"`
	UpdatedAt        time.Time `json:"updatedAt"`
	UpdatedBy        string    `json:"updatedBy"`
	DiaryState       string    `json:"diaryState"`
}

type _DiaryEntry DiaryEntry

// NewDiaryEntry instantiates a new DiaryEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiaryEntry(locator string, referenceLocator string, referenceType string, contents string, createdAt time.Time, createdBy string, updatedAt time.Time, updatedBy string, diaryState string) *DiaryEntry {
	this := DiaryEntry{}
	this.Locator = locator
	this.ReferenceLocator = referenceLocator
	this.ReferenceType = referenceType
	this.Contents = contents
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.UpdatedAt = updatedAt
	this.UpdatedBy = updatedBy
	this.DiaryState = diaryState
	return &this
}

// NewDiaryEntryWithDefaults instantiates a new DiaryEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiaryEntryWithDefaults() *DiaryEntry {
	this := DiaryEntry{}
	return &this
}

// GetLocator returns the Locator field value
func (o *DiaryEntry) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *DiaryEntry) SetLocator(v string) {
	o.Locator = v
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *DiaryEntry) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *DiaryEntry) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

// GetReferenceType returns the ReferenceType field value
func (o *DiaryEntry) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *DiaryEntry) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DiaryEntry) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DiaryEntry) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *DiaryEntry) SetCategory(v string) {
	o.Category = &v
}

// GetContents returns the Contents field value
func (o *DiaryEntry) GetContents() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetContentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contents, true
}

// SetContents sets field value
func (o *DiaryEntry) SetContents(v string) {
	o.Contents = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DiaryEntry) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DiaryEntry) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *DiaryEntry) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *DiaryEntry) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DiaryEntry) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DiaryEntry) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value
func (o *DiaryEntry) GetUpdatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedBy, true
}

// SetUpdatedBy sets field value
func (o *DiaryEntry) SetUpdatedBy(v string) {
	o.UpdatedBy = v
}

// GetDiaryState returns the DiaryState field value
func (o *DiaryEntry) GetDiaryState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiaryState
}

// GetDiaryStateOk returns a tuple with the DiaryState field value
// and a boolean to check if the value has been set.
func (o *DiaryEntry) GetDiaryStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiaryState, true
}

// SetDiaryState sets field value
func (o *DiaryEntry) SetDiaryState(v string) {
	o.DiaryState = v
}

func (o DiaryEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiaryEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["referenceLocator"] = o.ReferenceLocator
	toSerialize["referenceType"] = o.ReferenceType
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["contents"] = o.Contents
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["updatedBy"] = o.UpdatedBy
	toSerialize["diaryState"] = o.DiaryState
	return toSerialize, nil
}

func (o *DiaryEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"referenceLocator",
		"referenceType",
		"contents",
		"createdAt",
		"createdBy",
		"updatedAt",
		"updatedBy",
		"diaryState",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiaryEntry := _DiaryEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiaryEntry)

	if err != nil {
		return err
	}

	*o = DiaryEntry(varDiaryEntry)

	return err
}

type NullableDiaryEntry struct {
	value *DiaryEntry
	isSet bool
}

func (v NullableDiaryEntry) Get() *DiaryEntry {
	return v.value
}

func (v *NullableDiaryEntry) Set(val *DiaryEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDiaryEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDiaryEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiaryEntry(val *DiaryEntry) *NullableDiaryEntry {
	return &NullableDiaryEntry{value: val, isSet: true}
}

func (v NullableDiaryEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiaryEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
