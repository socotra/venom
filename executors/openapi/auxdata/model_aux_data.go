/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AuxData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuxData{}

// AuxData struct for AuxData
type AuxData struct {
	Locator               string     `json:"locator"`
	Key                   string     `json:"key"`
	UiType                string     `json:"uiType"`
	Value                 string     `json:"value"`
	ModificationTimestamp time.Time  `json:"modificationTimestamp"`
	ExpirationTimestamp   *time.Time `json:"expirationTimestamp,omitempty"`
	AuxDataSettingsName   *string    `json:"auxDataSettingsName,omitempty"`
}

type _AuxData AuxData

// NewAuxData instantiates a new AuxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuxData(locator string, key string, uiType string, value string, modificationTimestamp time.Time) *AuxData {
	this := AuxData{}
	this.Locator = locator
	this.Key = key
	this.UiType = uiType
	this.Value = value
	this.ModificationTimestamp = modificationTimestamp
	return &this
}

// NewAuxDataWithDefaults instantiates a new AuxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuxDataWithDefaults() *AuxData {
	this := AuxData{}
	return &this
}

// GetLocator returns the Locator field value
func (o *AuxData) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *AuxData) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *AuxData) SetLocator(v string) {
	o.Locator = v
}

// GetKey returns the Key field value
func (o *AuxData) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AuxData) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AuxData) SetKey(v string) {
	o.Key = v
}

// GetUiType returns the UiType field value
func (o *AuxData) GetUiType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UiType
}

// GetUiTypeOk returns a tuple with the UiType field value
// and a boolean to check if the value has been set.
func (o *AuxData) GetUiTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UiType, true
}

// SetUiType sets field value
func (o *AuxData) SetUiType(v string) {
	o.UiType = v
}

// GetValue returns the Value field value
func (o *AuxData) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AuxData) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AuxData) SetValue(v string) {
	o.Value = v
}

// GetModificationTimestamp returns the ModificationTimestamp field value
func (o *AuxData) GetModificationTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModificationTimestamp
}

// GetModificationTimestampOk returns a tuple with the ModificationTimestamp field value
// and a boolean to check if the value has been set.
func (o *AuxData) GetModificationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModificationTimestamp, true
}

// SetModificationTimestamp sets field value
func (o *AuxData) SetModificationTimestamp(v time.Time) {
	o.ModificationTimestamp = v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value if set, zero value otherwise.
func (o *AuxData) GetExpirationTimestamp() time.Time {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuxData) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTimestamp) {
		return nil, false
	}
	return o.ExpirationTimestamp, true
}

// HasExpirationTimestamp returns a boolean if a field has been set.
func (o *AuxData) HasExpirationTimestamp() bool {
	if o != nil && !IsNil(o.ExpirationTimestamp) {
		return true
	}

	return false
}

// SetExpirationTimestamp gets a reference to the given time.Time and assigns it to the ExpirationTimestamp field.
func (o *AuxData) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp = &v
}

// GetAuxDataSettingsName returns the AuxDataSettingsName field value if set, zero value otherwise.
func (o *AuxData) GetAuxDataSettingsName() string {
	if o == nil || IsNil(o.AuxDataSettingsName) {
		var ret string
		return ret
	}
	return *o.AuxDataSettingsName
}

// GetAuxDataSettingsNameOk returns a tuple with the AuxDataSettingsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuxData) GetAuxDataSettingsNameOk() (*string, bool) {
	if o == nil || IsNil(o.AuxDataSettingsName) {
		return nil, false
	}
	return o.AuxDataSettingsName, true
}

// HasAuxDataSettingsName returns a boolean if a field has been set.
func (o *AuxData) HasAuxDataSettingsName() bool {
	if o != nil && !IsNil(o.AuxDataSettingsName) {
		return true
	}

	return false
}

// SetAuxDataSettingsName gets a reference to the given string and assigns it to the AuxDataSettingsName field.
func (o *AuxData) SetAuxDataSettingsName(v string) {
	o.AuxDataSettingsName = &v
}

func (o AuxData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuxData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["key"] = o.Key
	toSerialize["uiType"] = o.UiType
	toSerialize["value"] = o.Value
	toSerialize["modificationTimestamp"] = o.ModificationTimestamp
	if !IsNil(o.ExpirationTimestamp) {
		toSerialize["expirationTimestamp"] = o.ExpirationTimestamp
	}
	if !IsNil(o.AuxDataSettingsName) {
		toSerialize["auxDataSettingsName"] = o.AuxDataSettingsName
	}
	return toSerialize, nil
}

func (o *AuxData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"key",
		"uiType",
		"value",
		"modificationTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuxData := _AuxData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuxData)

	if err != nil {
		return err
	}

	*o = AuxData(varAuxData)

	return err
}

type NullableAuxData struct {
	value *AuxData
	isSet bool
}

func (v NullableAuxData) Get() *AuxData {
	return v.value
}

func (v *NullableAuxData) Set(val *AuxData) {
	v.value = val
	v.isSet = true
}

func (v NullableAuxData) IsSet() bool {
	return v.isSet
}

func (v *NullableAuxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuxData(val *AuxData) *NullableAuxData {
	return &NullableAuxData{value: val, isSet: true}
}

func (v NullableAuxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
