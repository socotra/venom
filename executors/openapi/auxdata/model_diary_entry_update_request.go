/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DiaryEntryUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiaryEntryUpdateRequest{}

// DiaryEntryUpdateRequest struct for DiaryEntryUpdateRequest
type DiaryEntryUpdateRequest struct {
	Category *string `json:"category,omitempty"`
	Contents string  `json:"contents"`
}

type _DiaryEntryUpdateRequest DiaryEntryUpdateRequest

// NewDiaryEntryUpdateRequest instantiates a new DiaryEntryUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiaryEntryUpdateRequest(contents string) *DiaryEntryUpdateRequest {
	this := DiaryEntryUpdateRequest{}
	this.Contents = contents
	return &this
}

// NewDiaryEntryUpdateRequestWithDefaults instantiates a new DiaryEntryUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiaryEntryUpdateRequestWithDefaults() *DiaryEntryUpdateRequest {
	this := DiaryEntryUpdateRequest{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DiaryEntryUpdateRequest) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiaryEntryUpdateRequest) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DiaryEntryUpdateRequest) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *DiaryEntryUpdateRequest) SetCategory(v string) {
	o.Category = &v
}

// GetContents returns the Contents field value
func (o *DiaryEntryUpdateRequest) GetContents() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *DiaryEntryUpdateRequest) GetContentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contents, true
}

// SetContents sets field value
func (o *DiaryEntryUpdateRequest) SetContents(v string) {
	o.Contents = v
}

func (o DiaryEntryUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiaryEntryUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["contents"] = o.Contents
	return toSerialize, nil
}

func (o *DiaryEntryUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiaryEntryUpdateRequest := _DiaryEntryUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiaryEntryUpdateRequest)

	if err != nil {
		return err
	}

	*o = DiaryEntryUpdateRequest(varDiaryEntryUpdateRequest)

	return err
}

type NullableDiaryEntryUpdateRequest struct {
	value *DiaryEntryUpdateRequest
	isSet bool
}

func (v NullableDiaryEntryUpdateRequest) Get() *DiaryEntryUpdateRequest {
	return v.value
}

func (v *NullableDiaryEntryUpdateRequest) Set(val *DiaryEntryUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDiaryEntryUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDiaryEntryUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiaryEntryUpdateRequest(val *DiaryEntryUpdateRequest) *NullableDiaryEntryUpdateRequest {
	return &NullableDiaryEntryUpdateRequest{value: val, isSet: true}
}

func (v NullableDiaryEntryUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiaryEntryUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
