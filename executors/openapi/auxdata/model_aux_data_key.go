/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuxDataKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuxDataKey{}

// AuxDataKey struct for AuxDataKey
type AuxDataKey struct {
	Key                 string  `json:"key"`
	UiType              string  `json:"uiType"`
	AuxDataSettingsName *string `json:"auxDataSettingsName,omitempty"`
}

type _AuxDataKey AuxDataKey

// NewAuxDataKey instantiates a new AuxDataKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuxDataKey(key string, uiType string) *AuxDataKey {
	this := AuxDataKey{}
	this.Key = key
	this.UiType = uiType
	return &this
}

// NewAuxDataKeyWithDefaults instantiates a new AuxDataKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuxDataKeyWithDefaults() *AuxDataKey {
	this := AuxDataKey{}
	return &this
}

// GetKey returns the Key field value
func (o *AuxDataKey) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AuxDataKey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AuxDataKey) SetKey(v string) {
	o.Key = v
}

// GetUiType returns the UiType field value
func (o *AuxDataKey) GetUiType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UiType
}

// GetUiTypeOk returns a tuple with the UiType field value
// and a boolean to check if the value has been set.
func (o *AuxDataKey) GetUiTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UiType, true
}

// SetUiType sets field value
func (o *AuxDataKey) SetUiType(v string) {
	o.UiType = v
}

// GetAuxDataSettingsName returns the AuxDataSettingsName field value if set, zero value otherwise.
func (o *AuxDataKey) GetAuxDataSettingsName() string {
	if o == nil || IsNil(o.AuxDataSettingsName) {
		var ret string
		return ret
	}
	return *o.AuxDataSettingsName
}

// GetAuxDataSettingsNameOk returns a tuple with the AuxDataSettingsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuxDataKey) GetAuxDataSettingsNameOk() (*string, bool) {
	if o == nil || IsNil(o.AuxDataSettingsName) {
		return nil, false
	}
	return o.AuxDataSettingsName, true
}

// HasAuxDataSettingsName returns a boolean if a field has been set.
func (o *AuxDataKey) HasAuxDataSettingsName() bool {
	if o != nil && !IsNil(o.AuxDataSettingsName) {
		return true
	}

	return false
}

// SetAuxDataSettingsName gets a reference to the given string and assigns it to the AuxDataSettingsName field.
func (o *AuxDataKey) SetAuxDataSettingsName(v string) {
	o.AuxDataSettingsName = &v
}

func (o AuxDataKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuxDataKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["uiType"] = o.UiType
	if !IsNil(o.AuxDataSettingsName) {
		toSerialize["auxDataSettingsName"] = o.AuxDataSettingsName
	}
	return toSerialize, nil
}

func (o *AuxDataKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"uiType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuxDataKey := _AuxDataKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuxDataKey)

	if err != nil {
		return err
	}

	*o = AuxDataKey(varAuxDataKey)

	return err
}

type NullableAuxDataKey struct {
	value *AuxDataKey
	isSet bool
}

func (v NullableAuxDataKey) Get() *AuxDataKey {
	return v.value
}

func (v *NullableAuxDataKey) Set(val *AuxDataKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAuxDataKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAuxDataKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuxDataKey(val *AuxDataKey) *NullableAuxDataKey {
	return &NullableAuxDataKey{value: val, isSet: true}
}

func (v NullableAuxDataKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuxDataKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
