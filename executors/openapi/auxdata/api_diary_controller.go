/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DiaryControllerAPIService DiaryControllerAPI service
type DiaryControllerAPIService service

type ApiCreateDiaryRequest struct {
	ctx                     context.Context
	ApiService              *DiaryControllerAPIService
	referenceType           string
	referenceLocator        string
	diaryEntryCreateRequest *DiaryEntryCreateRequest
}

func (r ApiCreateDiaryRequest) DiaryEntryCreateRequest(diaryEntryCreateRequest DiaryEntryCreateRequest) ApiCreateDiaryRequest {
	r.diaryEntryCreateRequest = &diaryEntryCreateRequest
	return r
}

func (r ApiCreateDiaryRequest) Execute() (*DiaryEntry, *http.Response, error) {
	return r.ApiService.CreateDiaryExecute(r)
}

/*
CreateDiary Method for CreateDiary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param referenceType
	@param referenceLocator
	@return ApiCreateDiaryRequest
*/
func (a *DiaryControllerAPIService) CreateDiary(ctx context.Context, referenceType string, referenceLocator string) ApiCreateDiaryRequest {
	return ApiCreateDiaryRequest{
		ApiService:       a,
		ctx:              ctx,
		referenceType:    referenceType,
		referenceLocator: referenceLocator,
	}
}

// Execute executes the request
//
//	@return DiaryEntry
func (a *DiaryControllerAPIService) CreateDiaryExecute(r ApiCreateDiaryRequest) (*DiaryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiaryControllerAPIService.CreateDiary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diary/{referenceType}/{referenceLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"referenceType"+"}", url.PathEscape(parameterValueToString(r.referenceType, "referenceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"referenceLocator"+"}", url.PathEscape(parameterValueToString(r.referenceLocator, "referenceLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.diaryEntryCreateRequest == nil {
		return localVarReturnValue, nil, reportError("diaryEntryCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.diaryEntryCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDiscardDiaryRequest struct {
	ctx        context.Context
	ApiService *DiaryControllerAPIService
	locator    string
}

func (r ApiDiscardDiaryRequest) Execute() (*DiaryEntry, *http.Response, error) {
	return r.ApiService.DiscardDiaryExecute(r)
}

/*
DiscardDiary Method for DiscardDiary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiDiscardDiaryRequest
*/
func (a *DiaryControllerAPIService) DiscardDiary(ctx context.Context, locator string) ApiDiscardDiaryRequest {
	return ApiDiscardDiaryRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return DiaryEntry
func (a *DiaryControllerAPIService) DiscardDiaryExecute(r ApiDiscardDiaryRequest) (*DiaryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiaryControllerAPIService.DiscardDiary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diary/{locator}/discard"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchAllByLocatorRequest struct {
	ctx        context.Context
	ApiService *DiaryControllerAPIService
	locator    string
	offset     *int32
	count      *int32
}

func (r ApiFetchAllByLocatorRequest) Offset(offset int32) ApiFetchAllByLocatorRequest {
	r.offset = &offset
	return r
}

func (r ApiFetchAllByLocatorRequest) Count(count int32) ApiFetchAllByLocatorRequest {
	r.count = &count
	return r
}

func (r ApiFetchAllByLocatorRequest) Execute() ([]DiaryEntry, *http.Response, error) {
	return r.ApiService.FetchAllByLocatorExecute(r)
}

/*
FetchAllByLocator Method for FetchAllByLocator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiFetchAllByLocatorRequest
*/
func (a *DiaryControllerAPIService) FetchAllByLocator(ctx context.Context, locator string) ApiFetchAllByLocatorRequest {
	return ApiFetchAllByLocatorRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return []DiaryEntry
func (a *DiaryControllerAPIService) FetchAllByLocatorExecute(r ApiFetchAllByLocatorRequest) ([]DiaryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DiaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiaryControllerAPIService.FetchAllByLocator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diary/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchLatestByLocatorRequest struct {
	ctx        context.Context
	ApiService *DiaryControllerAPIService
	locator    string
}

func (r ApiFetchLatestByLocatorRequest) Execute() (*DiaryEntry, *http.Response, error) {
	return r.ApiService.FetchLatestByLocatorExecute(r)
}

/*
FetchLatestByLocator Method for FetchLatestByLocator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiFetchLatestByLocatorRequest
*/
func (a *DiaryControllerAPIService) FetchLatestByLocator(ctx context.Context, locator string) ApiFetchLatestByLocatorRequest {
	return ApiFetchLatestByLocatorRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return DiaryEntry
func (a *DiaryControllerAPIService) FetchLatestByLocatorExecute(r ApiFetchLatestByLocatorRequest) (*DiaryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiaryControllerAPIService.FetchLatestByLocator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diary/{locator}/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchLatestByReferenceRequest struct {
	ctx              context.Context
	ApiService       *DiaryControllerAPIService
	referenceType    string
	referenceLocator string
	includeDiscarded *bool
}

func (r ApiFetchLatestByReferenceRequest) IncludeDiscarded(includeDiscarded bool) ApiFetchLatestByReferenceRequest {
	r.includeDiscarded = &includeDiscarded
	return r
}

func (r ApiFetchLatestByReferenceRequest) Execute() ([]DiaryEntry, *http.Response, error) {
	return r.ApiService.FetchLatestByReferenceExecute(r)
}

/*
FetchLatestByReference Method for FetchLatestByReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param referenceType
	@param referenceLocator
	@return ApiFetchLatestByReferenceRequest
*/
func (a *DiaryControllerAPIService) FetchLatestByReference(ctx context.Context, referenceType string, referenceLocator string) ApiFetchLatestByReferenceRequest {
	return ApiFetchLatestByReferenceRequest{
		ApiService:       a,
		ctx:              ctx,
		referenceType:    referenceType,
		referenceLocator: referenceLocator,
	}
}

// Execute executes the request
//
//	@return []DiaryEntry
func (a *DiaryControllerAPIService) FetchLatestByReferenceExecute(r ApiFetchLatestByReferenceRequest) ([]DiaryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DiaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiaryControllerAPIService.FetchLatestByReference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diary/{referenceType}/{referenceLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"referenceType"+"}", url.PathEscape(parameterValueToString(r.referenceType, "referenceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"referenceLocator"+"}", url.PathEscape(parameterValueToString(r.referenceLocator, "referenceLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeDiscarded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDiscarded", r.includeDiscarded, "form", "")
	} else {
		var defaultValue bool = false
		r.includeDiscarded = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDiaryRequest struct {
	ctx                     context.Context
	ApiService              *DiaryControllerAPIService
	locator                 string
	diaryEntryUpdateRequest *DiaryEntryUpdateRequest
}

func (r ApiUpdateDiaryRequest) DiaryEntryUpdateRequest(diaryEntryUpdateRequest DiaryEntryUpdateRequest) ApiUpdateDiaryRequest {
	r.diaryEntryUpdateRequest = &diaryEntryUpdateRequest
	return r
}

func (r ApiUpdateDiaryRequest) Execute() (*DiaryEntry, *http.Response, error) {
	return r.ApiService.UpdateDiaryExecute(r)
}

/*
UpdateDiary Method for UpdateDiary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiUpdateDiaryRequest
*/
func (a *DiaryControllerAPIService) UpdateDiary(ctx context.Context, locator string) ApiUpdateDiaryRequest {
	return ApiUpdateDiaryRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return DiaryEntry
func (a *DiaryControllerAPIService) UpdateDiaryExecute(r ApiUpdateDiaryRequest) (*DiaryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiaryControllerAPIService.UpdateDiary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/diary/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.diaryEntryUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("diaryEntryUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.diaryEntryUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
