/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuxDataSizeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuxDataSizeResponse{}

// AuxDataSizeResponse struct for AuxDataSizeResponse
type AuxDataSizeResponse struct {
	DataSizeKb int32 `json:"dataSizeKb"`
}

type _AuxDataSizeResponse AuxDataSizeResponse

// NewAuxDataSizeResponse instantiates a new AuxDataSizeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuxDataSizeResponse(dataSizeKb int32) *AuxDataSizeResponse {
	this := AuxDataSizeResponse{}
	this.DataSizeKb = dataSizeKb
	return &this
}

// NewAuxDataSizeResponseWithDefaults instantiates a new AuxDataSizeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuxDataSizeResponseWithDefaults() *AuxDataSizeResponse {
	this := AuxDataSizeResponse{}
	return &this
}

// GetDataSizeKb returns the DataSizeKb field value
func (o *AuxDataSizeResponse) GetDataSizeKb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DataSizeKb
}

// GetDataSizeKbOk returns a tuple with the DataSizeKb field value
// and a boolean to check if the value has been set.
func (o *AuxDataSizeResponse) GetDataSizeKbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSizeKb, true
}

// SetDataSizeKb sets field value
func (o *AuxDataSizeResponse) SetDataSizeKb(v int32) {
	o.DataSizeKb = v
}

func (o AuxDataSizeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuxDataSizeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataSizeKb"] = o.DataSizeKb
	return toSerialize, nil
}

func (o *AuxDataSizeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataSizeKb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuxDataSizeResponse := _AuxDataSizeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuxDataSizeResponse)

	if err != nil {
		return err
	}

	*o = AuxDataSizeResponse(varAuxDataSizeResponse)

	return err
}

type NullableAuxDataSizeResponse struct {
	value *AuxDataSizeResponse
	isSet bool
}

func (v NullableAuxDataSizeResponse) Get() *AuxDataSizeResponse {
	return v.value
}

func (v *NullableAuxDataSizeResponse) Set(val *AuxDataSizeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuxDataSizeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuxDataSizeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuxDataSizeResponse(val *AuxDataSizeResponse) *NullableAuxDataSizeResponse {
	return &NullableAuxDataSizeResponse{value: val, isSet: true}
}

func (v NullableAuxDataSizeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuxDataSizeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
