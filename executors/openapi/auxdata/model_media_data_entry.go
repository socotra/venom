/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MediaDataEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaDataEntry{}

// MediaDataEntry struct for MediaDataEntry
type MediaDataEntry struct {
	Locator        string                    `json:"locator"`
	VersionLocator *string                   `json:"versionLocator,omitempty"`
	Filename       string                    `json:"filename"`
	Title          *string                   `json:"title,omitempty"`
	Tag            *string                   `json:"tag,omitempty"`
	References     []MediaDataEntryReference `json:"references"`
	CreatedAt      time.Time                 `json:"createdAt"`
	CreatedBy      string                    `json:"createdBy"`
	UpdatedAt      time.Time                 `json:"updatedAt"`
	UpdatedBy      string                    `json:"updatedBy"`
}

type _MediaDataEntry MediaDataEntry

// NewMediaDataEntry instantiates a new MediaDataEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaDataEntry(locator string, filename string, references []MediaDataEntryReference, createdAt time.Time, createdBy string, updatedAt time.Time, updatedBy string) *MediaDataEntry {
	this := MediaDataEntry{}
	this.Locator = locator
	this.Filename = filename
	this.References = references
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.UpdatedAt = updatedAt
	this.UpdatedBy = updatedBy
	return &this
}

// NewMediaDataEntryWithDefaults instantiates a new MediaDataEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaDataEntryWithDefaults() *MediaDataEntry {
	this := MediaDataEntry{}
	return &this
}

// GetLocator returns the Locator field value
func (o *MediaDataEntry) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *MediaDataEntry) SetLocator(v string) {
	o.Locator = v
}

// GetVersionLocator returns the VersionLocator field value if set, zero value otherwise.
func (o *MediaDataEntry) GetVersionLocator() string {
	if o == nil || IsNil(o.VersionLocator) {
		var ret string
		return ret
	}
	return *o.VersionLocator
}

// GetVersionLocatorOk returns a tuple with the VersionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetVersionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.VersionLocator) {
		return nil, false
	}
	return o.VersionLocator, true
}

// HasVersionLocator returns a boolean if a field has been set.
func (o *MediaDataEntry) HasVersionLocator() bool {
	if o != nil && !IsNil(o.VersionLocator) {
		return true
	}

	return false
}

// SetVersionLocator gets a reference to the given string and assigns it to the VersionLocator field.
func (o *MediaDataEntry) SetVersionLocator(v string) {
	o.VersionLocator = &v
}

// GetFilename returns the Filename field value
func (o *MediaDataEntry) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *MediaDataEntry) SetFilename(v string) {
	o.Filename = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *MediaDataEntry) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *MediaDataEntry) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *MediaDataEntry) SetTitle(v string) {
	o.Title = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *MediaDataEntry) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *MediaDataEntry) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *MediaDataEntry) SetTag(v string) {
	o.Tag = &v
}

// GetReferences returns the References field value
func (o *MediaDataEntry) GetReferences() []MediaDataEntryReference {
	if o == nil {
		var ret []MediaDataEntryReference
		return ret
	}

	return o.References
}

// GetReferencesOk returns a tuple with the References field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetReferencesOk() ([]MediaDataEntryReference, bool) {
	if o == nil {
		return nil, false
	}
	return o.References, true
}

// SetReferences sets field value
func (o *MediaDataEntry) SetReferences(v []MediaDataEntryReference) {
	o.References = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *MediaDataEntry) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *MediaDataEntry) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *MediaDataEntry) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *MediaDataEntry) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *MediaDataEntry) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *MediaDataEntry) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value
func (o *MediaDataEntry) GetUpdatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntry) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedBy, true
}

// SetUpdatedBy sets field value
func (o *MediaDataEntry) SetUpdatedBy(v string) {
	o.UpdatedBy = v
}

func (o MediaDataEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaDataEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	if !IsNil(o.VersionLocator) {
		toSerialize["versionLocator"] = o.VersionLocator
	}
	toSerialize["filename"] = o.Filename
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["references"] = o.References
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["updatedBy"] = o.UpdatedBy
	return toSerialize, nil
}

func (o *MediaDataEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"filename",
		"references",
		"createdAt",
		"createdBy",
		"updatedAt",
		"updatedBy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaDataEntry := _MediaDataEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaDataEntry)

	if err != nil {
		return err
	}

	*o = MediaDataEntry(varMediaDataEntry)

	return err
}

type NullableMediaDataEntry struct {
	value *MediaDataEntry
	isSet bool
}

func (v NullableMediaDataEntry) Get() *MediaDataEntry {
	return v.value
}

func (v *NullableMediaDataEntry) Set(val *MediaDataEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaDataEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaDataEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaDataEntry(val *MediaDataEntry) *NullableMediaDataEntry {
	return &NullableMediaDataEntry{value: val, isSet: true}
}

func (v NullableMediaDataEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaDataEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
