/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MediaDataEntryReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaDataEntryReference{}

// MediaDataEntryReference struct for MediaDataEntryReference
type MediaDataEntryReference struct {
	Type    string `json:"type"`
	Locator string `json:"locator"`
}

type _MediaDataEntryReference MediaDataEntryReference

// NewMediaDataEntryReference instantiates a new MediaDataEntryReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaDataEntryReference(type_ string, locator string) *MediaDataEntryReference {
	this := MediaDataEntryReference{}
	this.Type = type_
	this.Locator = locator
	return &this
}

// NewMediaDataEntryReferenceWithDefaults instantiates a new MediaDataEntryReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaDataEntryReferenceWithDefaults() *MediaDataEntryReference {
	this := MediaDataEntryReference{}
	return &this
}

// GetType returns the Type field value
func (o *MediaDataEntryReference) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntryReference) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MediaDataEntryReference) SetType(v string) {
	o.Type = v
}

// GetLocator returns the Locator field value
func (o *MediaDataEntryReference) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *MediaDataEntryReference) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *MediaDataEntryReference) SetLocator(v string) {
	o.Locator = v
}

func (o MediaDataEntryReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaDataEntryReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["locator"] = o.Locator
	return toSerialize, nil
}

func (o *MediaDataEntryReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"locator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaDataEntryReference := _MediaDataEntryReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaDataEntryReference)

	if err != nil {
		return err
	}

	*o = MediaDataEntryReference(varMediaDataEntryReference)

	return err
}

type NullableMediaDataEntryReference struct {
	value *MediaDataEntryReference
	isSet bool
}

func (v NullableMediaDataEntryReference) Get() *MediaDataEntryReference {
	return v.value
}

func (v *NullableMediaDataEntryReference) Set(val *MediaDataEntryReference) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaDataEntryReference) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaDataEntryReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaDataEntryReference(val *MediaDataEntryReference) *NullableMediaDataEntryReference {
	return &NullableMediaDataEntryReference{value: val, isSet: true}
}

func (v NullableMediaDataEntryReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaDataEntryReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
