/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auxdata

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuxDataKeySetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuxDataKeySetResponse{}

// AuxDataKeySetResponse struct for AuxDataKeySetResponse
type AuxDataKeySetResponse struct {
	Offset int32        `json:"offset"`
	Count  int32        `json:"count"`
	Keys   []AuxDataKey `json:"keys"`
}

type _AuxDataKeySetResponse AuxDataKeySetResponse

// NewAuxDataKeySetResponse instantiates a new AuxDataKeySetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuxDataKeySetResponse(offset int32, count int32, keys []AuxDataKey) *AuxDataKeySetResponse {
	this := AuxDataKeySetResponse{}
	this.Offset = offset
	this.Count = count
	this.Keys = keys
	return &this
}

// NewAuxDataKeySetResponseWithDefaults instantiates a new AuxDataKeySetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuxDataKeySetResponseWithDefaults() *AuxDataKeySetResponse {
	this := AuxDataKeySetResponse{}
	return &this
}

// GetOffset returns the Offset field value
func (o *AuxDataKeySetResponse) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *AuxDataKeySetResponse) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *AuxDataKeySetResponse) SetOffset(v int32) {
	o.Offset = v
}

// GetCount returns the Count field value
func (o *AuxDataKeySetResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AuxDataKeySetResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AuxDataKeySetResponse) SetCount(v int32) {
	o.Count = v
}

// GetKeys returns the Keys field value
func (o *AuxDataKeySetResponse) GetKeys() []AuxDataKey {
	if o == nil {
		var ret []AuxDataKey
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *AuxDataKeySetResponse) GetKeysOk() ([]AuxDataKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keys, true
}

// SetKeys sets field value
func (o *AuxDataKeySetResponse) SetKeys(v []AuxDataKey) {
	o.Keys = v
}

func (o AuxDataKeySetResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuxDataKeySetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offset"] = o.Offset
	toSerialize["count"] = o.Count
	toSerialize["keys"] = o.Keys
	return toSerialize, nil
}

func (o *AuxDataKeySetResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offset",
		"count",
		"keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuxDataKeySetResponse := _AuxDataKeySetResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuxDataKeySetResponse)

	if err != nil {
		return err
	}

	*o = AuxDataKeySetResponse(varAuxDataKeySetResponse)

	return err
}

type NullableAuxDataKeySetResponse struct {
	value *AuxDataKeySetResponse
	isSet bool
}

func (v NullableAuxDataKeySetResponse) Get() *AuxDataKeySetResponse {
	return v.value
}

func (v *NullableAuxDataKeySetResponse) Set(val *AuxDataKeySetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuxDataKeySetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuxDataKeySetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuxDataKeySetResponse(val *AuxDataKeySetResponse) *NullableAuxDataKeySetResponse {
	return &NullableAuxDataKeySetResponse{value: val, isSet: true}
}

func (v NullableAuxDataKeySetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuxDataKeySetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
