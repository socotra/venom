/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package event

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateEndpointRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEndpointRequest{}

// UpdateEndpointRequest struct for UpdateEndpointRequest
type UpdateEndpointRequest struct {
	Url           string              `json:"url"`
	RemoveHeaders []string            `json:"removeHeaders"`
	AddHeaders    map[string][]string `json:"addHeaders"`
	SecureSsl     *bool               `json:"secureSsl,omitempty"`
	HmacEnabled   *bool               `json:"hmacEnabled,omitempty"`
	Secret        *string             `json:"secret,omitempty"`
	Tag           *string             `json:"tag,omitempty"`
}

type _UpdateEndpointRequest UpdateEndpointRequest

// NewUpdateEndpointRequest instantiates a new UpdateEndpointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEndpointRequest(url string, removeHeaders []string, addHeaders map[string][]string) *UpdateEndpointRequest {
	this := UpdateEndpointRequest{}
	this.Url = url
	this.RemoveHeaders = removeHeaders
	this.AddHeaders = addHeaders
	return &this
}

// NewUpdateEndpointRequestWithDefaults instantiates a new UpdateEndpointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEndpointRequestWithDefaults() *UpdateEndpointRequest {
	this := UpdateEndpointRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *UpdateEndpointRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *UpdateEndpointRequest) SetUrl(v string) {
	o.Url = v
}

// GetRemoveHeaders returns the RemoveHeaders field value
func (o *UpdateEndpointRequest) GetRemoveHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemoveHeaders
}

// GetRemoveHeadersOk returns a tuple with the RemoveHeaders field value
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetRemoveHeadersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveHeaders, true
}

// SetRemoveHeaders sets field value
func (o *UpdateEndpointRequest) SetRemoveHeaders(v []string) {
	o.RemoveHeaders = v
}

// GetAddHeaders returns the AddHeaders field value
func (o *UpdateEndpointRequest) GetAddHeaders() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.AddHeaders
}

// GetAddHeadersOk returns a tuple with the AddHeaders field value
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetAddHeadersOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddHeaders, true
}

// SetAddHeaders sets field value
func (o *UpdateEndpointRequest) SetAddHeaders(v map[string][]string) {
	o.AddHeaders = v
}

// GetSecureSsl returns the SecureSsl field value if set, zero value otherwise.
func (o *UpdateEndpointRequest) GetSecureSsl() bool {
	if o == nil || IsNil(o.SecureSsl) {
		var ret bool
		return ret
	}
	return *o.SecureSsl
}

// GetSecureSslOk returns a tuple with the SecureSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetSecureSslOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureSsl) {
		return nil, false
	}
	return o.SecureSsl, true
}

// HasSecureSsl returns a boolean if a field has been set.
func (o *UpdateEndpointRequest) HasSecureSsl() bool {
	if o != nil && !IsNil(o.SecureSsl) {
		return true
	}

	return false
}

// SetSecureSsl gets a reference to the given bool and assigns it to the SecureSsl field.
func (o *UpdateEndpointRequest) SetSecureSsl(v bool) {
	o.SecureSsl = &v
}

// GetHmacEnabled returns the HmacEnabled field value if set, zero value otherwise.
func (o *UpdateEndpointRequest) GetHmacEnabled() bool {
	if o == nil || IsNil(o.HmacEnabled) {
		var ret bool
		return ret
	}
	return *o.HmacEnabled
}

// GetHmacEnabledOk returns a tuple with the HmacEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetHmacEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HmacEnabled) {
		return nil, false
	}
	return o.HmacEnabled, true
}

// HasHmacEnabled returns a boolean if a field has been set.
func (o *UpdateEndpointRequest) HasHmacEnabled() bool {
	if o != nil && !IsNil(o.HmacEnabled) {
		return true
	}

	return false
}

// SetHmacEnabled gets a reference to the given bool and assigns it to the HmacEnabled field.
func (o *UpdateEndpointRequest) SetHmacEnabled(v bool) {
	o.HmacEnabled = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UpdateEndpointRequest) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UpdateEndpointRequest) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *UpdateEndpointRequest) SetSecret(v string) {
	o.Secret = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *UpdateEndpointRequest) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpointRequest) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *UpdateEndpointRequest) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *UpdateEndpointRequest) SetTag(v string) {
	o.Tag = &v
}

func (o UpdateEndpointRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEndpointRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["removeHeaders"] = o.RemoveHeaders
	toSerialize["addHeaders"] = o.AddHeaders
	if !IsNil(o.SecureSsl) {
		toSerialize["secureSsl"] = o.SecureSsl
	}
	if !IsNil(o.HmacEnabled) {
		toSerialize["hmacEnabled"] = o.HmacEnabled
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *UpdateEndpointRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"removeHeaders",
		"addHeaders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateEndpointRequest := _UpdateEndpointRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateEndpointRequest)

	if err != nil {
		return err
	}

	*o = UpdateEndpointRequest(varUpdateEndpointRequest)

	return err
}

type NullableUpdateEndpointRequest struct {
	value *UpdateEndpointRequest
	isSet bool
}

func (v NullableUpdateEndpointRequest) Get() *UpdateEndpointRequest {
	return v.value
}

func (v *NullableUpdateEndpointRequest) Set(val *UpdateEndpointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEndpointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEndpointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEndpointRequest(val *UpdateEndpointRequest) *NullableUpdateEndpointRequest {
	return &NullableUpdateEndpointRequest{value: val, isSet: true}
}

func (v NullableUpdateEndpointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEndpointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
