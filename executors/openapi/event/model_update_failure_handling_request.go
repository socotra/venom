/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package event

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateFailureHandlingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFailureHandlingRequest{}

// UpdateFailureHandlingRequest struct for UpdateFailureHandlingRequest
type UpdateFailureHandlingRequest struct {
	RemoveAlertEndpoint bool                       `json:"removeAlertEndpoint"`
	AlertEndpoint       UpdateEndpointRequest      `json:"alertEndpoint"`
	RemoveTriggers      []string                   `json:"removeTriggers"`
	AddTriggers         []string                   `json:"addTriggers"`
	RemoveRetryStrategy bool                       `json:"removeRetryStrategy"`
	RetryStrategy       UpdateRetryStrategyRequest `json:"retryStrategy"`
	Divert              bool                       `json:"divert"`
	Suspend             bool                       `json:"suspend"`
}

type _UpdateFailureHandlingRequest UpdateFailureHandlingRequest

// NewUpdateFailureHandlingRequest instantiates a new UpdateFailureHandlingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFailureHandlingRequest(removeAlertEndpoint bool, alertEndpoint UpdateEndpointRequest, removeTriggers []string, addTriggers []string, removeRetryStrategy bool, retryStrategy UpdateRetryStrategyRequest, divert bool, suspend bool) *UpdateFailureHandlingRequest {
	this := UpdateFailureHandlingRequest{}
	this.RemoveAlertEndpoint = removeAlertEndpoint
	this.AlertEndpoint = alertEndpoint
	this.RemoveTriggers = removeTriggers
	this.AddTriggers = addTriggers
	this.RemoveRetryStrategy = removeRetryStrategy
	this.RetryStrategy = retryStrategy
	this.Divert = divert
	this.Suspend = suspend
	return &this
}

// NewUpdateFailureHandlingRequestWithDefaults instantiates a new UpdateFailureHandlingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFailureHandlingRequestWithDefaults() *UpdateFailureHandlingRequest {
	this := UpdateFailureHandlingRequest{}
	return &this
}

// GetRemoveAlertEndpoint returns the RemoveAlertEndpoint field value
func (o *UpdateFailureHandlingRequest) GetRemoveAlertEndpoint() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoveAlertEndpoint
}

// GetRemoveAlertEndpointOk returns a tuple with the RemoveAlertEndpoint field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetRemoveAlertEndpointOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveAlertEndpoint, true
}

// SetRemoveAlertEndpoint sets field value
func (o *UpdateFailureHandlingRequest) SetRemoveAlertEndpoint(v bool) {
	o.RemoveAlertEndpoint = v
}

// GetAlertEndpoint returns the AlertEndpoint field value
func (o *UpdateFailureHandlingRequest) GetAlertEndpoint() UpdateEndpointRequest {
	if o == nil {
		var ret UpdateEndpointRequest
		return ret
	}

	return o.AlertEndpoint
}

// GetAlertEndpointOk returns a tuple with the AlertEndpoint field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetAlertEndpointOk() (*UpdateEndpointRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertEndpoint, true
}

// SetAlertEndpoint sets field value
func (o *UpdateFailureHandlingRequest) SetAlertEndpoint(v UpdateEndpointRequest) {
	o.AlertEndpoint = v
}

// GetRemoveTriggers returns the RemoveTriggers field value
func (o *UpdateFailureHandlingRequest) GetRemoveTriggers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemoveTriggers
}

// GetRemoveTriggersOk returns a tuple with the RemoveTriggers field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetRemoveTriggersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveTriggers, true
}

// SetRemoveTriggers sets field value
func (o *UpdateFailureHandlingRequest) SetRemoveTriggers(v []string) {
	o.RemoveTriggers = v
}

// GetAddTriggers returns the AddTriggers field value
func (o *UpdateFailureHandlingRequest) GetAddTriggers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AddTriggers
}

// GetAddTriggersOk returns a tuple with the AddTriggers field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetAddTriggersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddTriggers, true
}

// SetAddTriggers sets field value
func (o *UpdateFailureHandlingRequest) SetAddTriggers(v []string) {
	o.AddTriggers = v
}

// GetRemoveRetryStrategy returns the RemoveRetryStrategy field value
func (o *UpdateFailureHandlingRequest) GetRemoveRetryStrategy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoveRetryStrategy
}

// GetRemoveRetryStrategyOk returns a tuple with the RemoveRetryStrategy field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetRemoveRetryStrategyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveRetryStrategy, true
}

// SetRemoveRetryStrategy sets field value
func (o *UpdateFailureHandlingRequest) SetRemoveRetryStrategy(v bool) {
	o.RemoveRetryStrategy = v
}

// GetRetryStrategy returns the RetryStrategy field value
func (o *UpdateFailureHandlingRequest) GetRetryStrategy() UpdateRetryStrategyRequest {
	if o == nil {
		var ret UpdateRetryStrategyRequest
		return ret
	}

	return o.RetryStrategy
}

// GetRetryStrategyOk returns a tuple with the RetryStrategy field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetRetryStrategyOk() (*UpdateRetryStrategyRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetryStrategy, true
}

// SetRetryStrategy sets field value
func (o *UpdateFailureHandlingRequest) SetRetryStrategy(v UpdateRetryStrategyRequest) {
	o.RetryStrategy = v
}

// GetDivert returns the Divert field value
func (o *UpdateFailureHandlingRequest) GetDivert() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Divert
}

// GetDivertOk returns a tuple with the Divert field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetDivertOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Divert, true
}

// SetDivert sets field value
func (o *UpdateFailureHandlingRequest) SetDivert(v bool) {
	o.Divert = v
}

// GetSuspend returns the Suspend field value
func (o *UpdateFailureHandlingRequest) GetSuspend() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Suspend
}

// GetSuspendOk returns a tuple with the Suspend field value
// and a boolean to check if the value has been set.
func (o *UpdateFailureHandlingRequest) GetSuspendOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Suspend, true
}

// SetSuspend sets field value
func (o *UpdateFailureHandlingRequest) SetSuspend(v bool) {
	o.Suspend = v
}

func (o UpdateFailureHandlingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFailureHandlingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["removeAlertEndpoint"] = o.RemoveAlertEndpoint
	toSerialize["alertEndpoint"] = o.AlertEndpoint
	toSerialize["removeTriggers"] = o.RemoveTriggers
	toSerialize["addTriggers"] = o.AddTriggers
	toSerialize["removeRetryStrategy"] = o.RemoveRetryStrategy
	toSerialize["retryStrategy"] = o.RetryStrategy
	toSerialize["divert"] = o.Divert
	toSerialize["suspend"] = o.Suspend
	return toSerialize, nil
}

func (o *UpdateFailureHandlingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"removeAlertEndpoint",
		"alertEndpoint",
		"removeTriggers",
		"addTriggers",
		"removeRetryStrategy",
		"retryStrategy",
		"divert",
		"suspend",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateFailureHandlingRequest := _UpdateFailureHandlingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateFailureHandlingRequest)

	if err != nil {
		return err
	}

	*o = UpdateFailureHandlingRequest(varUpdateFailureHandlingRequest)

	return err
}

type NullableUpdateFailureHandlingRequest struct {
	value *UpdateFailureHandlingRequest
	isSet bool
}

func (v NullableUpdateFailureHandlingRequest) Get() *UpdateFailureHandlingRequest {
	return v.value
}

func (v *NullableUpdateFailureHandlingRequest) Set(val *UpdateFailureHandlingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFailureHandlingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFailureHandlingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFailureHandlingRequest(val *UpdateFailureHandlingRequest) *NullableUpdateFailureHandlingRequest {
	return &NullableUpdateFailureHandlingRequest{value: val, isSet: true}
}

func (v NullableUpdateFailureHandlingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFailureHandlingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
