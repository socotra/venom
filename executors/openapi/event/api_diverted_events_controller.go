/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package event

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DivertedEventsControllerAPIService DivertedEventsControllerAPI service
type DivertedEventsControllerAPIService service

type ApiDeleteDivertedEventRequest struct {
	ctx            context.Context
	ApiService     *DivertedEventsControllerAPIService
	webhookLocator string
	eventLocator   string
}

func (r ApiDeleteDivertedEventRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteDivertedEventExecute(r)
}

/*
DeleteDivertedEvent Method for DeleteDivertedEvent

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webhookLocator
	@param eventLocator
	@return ApiDeleteDivertedEventRequest
*/
func (a *DivertedEventsControllerAPIService) DeleteDivertedEvent(ctx context.Context, webhookLocator string, eventLocator string) ApiDeleteDivertedEventRequest {
	return ApiDeleteDivertedEventRequest{
		ApiService:     a,
		ctx:            ctx,
		webhookLocator: webhookLocator,
		eventLocator:   eventLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *DivertedEventsControllerAPIService) DeleteDivertedEventExecute(r ApiDeleteDivertedEventRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DivertedEventsControllerAPIService.DeleteDivertedEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhooks/{webhookLocator}/diverted/{eventLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookLocator"+"}", url.PathEscape(parameterValueToString(r.webhookLocator, "webhookLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventLocator"+"}", url.PathEscape(parameterValueToString(r.eventLocator, "eventLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDivertedEventRequest struct {
	ctx            context.Context
	ApiService     *DivertedEventsControllerAPIService
	webhookLocator string
	eventLocator   string
}

func (r ApiGetDivertedEventRequest) Execute() (*DivertedEventResponse, *http.Response, error) {
	return r.ApiService.GetDivertedEventExecute(r)
}

/*
GetDivertedEvent Method for GetDivertedEvent

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webhookLocator
	@param eventLocator
	@return ApiGetDivertedEventRequest
*/
func (a *DivertedEventsControllerAPIService) GetDivertedEvent(ctx context.Context, webhookLocator string, eventLocator string) ApiGetDivertedEventRequest {
	return ApiGetDivertedEventRequest{
		ApiService:     a,
		ctx:            ctx,
		webhookLocator: webhookLocator,
		eventLocator:   eventLocator,
	}
}

// Execute executes the request
//
//	@return DivertedEventResponse
func (a *DivertedEventsControllerAPIService) GetDivertedEventExecute(r ApiGetDivertedEventRequest) (*DivertedEventResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DivertedEventResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DivertedEventsControllerAPIService.GetDivertedEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhooks/{webhookLocator}/diverted/{eventLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookLocator"+"}", url.PathEscape(parameterValueToString(r.webhookLocator, "webhookLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventLocator"+"}", url.PathEscape(parameterValueToString(r.eventLocator, "eventLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDivertedEventsRequest struct {
	ctx            context.Context
	ApiService     *DivertedEventsControllerAPIService
	webhookLocator string
	offset         *int32
	count          *int32
}

func (r ApiListDivertedEventsRequest) Offset(offset int32) ApiListDivertedEventsRequest {
	r.offset = &offset
	return r
}

func (r ApiListDivertedEventsRequest) Count(count int32) ApiListDivertedEventsRequest {
	r.count = &count
	return r
}

func (r ApiListDivertedEventsRequest) Execute() ([]DivertedEventResponse, *http.Response, error) {
	return r.ApiService.ListDivertedEventsExecute(r)
}

/*
ListDivertedEvents Method for ListDivertedEvents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webhookLocator
	@return ApiListDivertedEventsRequest
*/
func (a *DivertedEventsControllerAPIService) ListDivertedEvents(ctx context.Context, webhookLocator string) ApiListDivertedEventsRequest {
	return ApiListDivertedEventsRequest{
		ApiService:     a,
		ctx:            ctx,
		webhookLocator: webhookLocator,
	}
}

// Execute executes the request
//
//	@return []DivertedEventResponse
func (a *DivertedEventsControllerAPIService) ListDivertedEventsExecute(r ApiListDivertedEventsRequest) ([]DivertedEventResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DivertedEventResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DivertedEventsControllerAPIService.ListDivertedEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhooks/{webhookLocator}/diverted"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookLocator"+"}", url.PathEscape(parameterValueToString(r.webhookLocator, "webhookLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResendDivertedEventRequest struct {
	ctx            context.Context
	ApiService     *DivertedEventsControllerAPIService
	webhookLocator string
	eventLocator   string
}

func (r ApiResendDivertedEventRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ResendDivertedEventExecute(r)
}

/*
ResendDivertedEvent Method for ResendDivertedEvent

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webhookLocator
	@param eventLocator
	@return ApiResendDivertedEventRequest
*/
func (a *DivertedEventsControllerAPIService) ResendDivertedEvent(ctx context.Context, webhookLocator string, eventLocator string) ApiResendDivertedEventRequest {
	return ApiResendDivertedEventRequest{
		ApiService:     a,
		ctx:            ctx,
		webhookLocator: webhookLocator,
		eventLocator:   eventLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *DivertedEventsControllerAPIService) ResendDivertedEventExecute(r ApiResendDivertedEventRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DivertedEventsControllerAPIService.ResendDivertedEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhooks/{webhookLocator}/diverted/{eventLocator}/resend"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookLocator"+"}", url.PathEscape(parameterValueToString(r.webhookLocator, "webhookLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventLocator"+"}", url.PathEscape(parameterValueToString(r.eventLocator, "eventLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
