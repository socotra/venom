/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package event

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookRequest{}

// UpdateWebhookRequest struct for UpdateWebhookRequest
type UpdateWebhookRequest struct {
	Name                  string                       `json:"name"`
	Enabled               bool                         `json:"enabled"`
	RemoveEventTypes      []string                     `json:"removeEventTypes"`
	AddEventTypes         []string                     `json:"addEventTypes"`
	Endpoint              UpdateEndpointRequest        `json:"endpoint"`
	RemoveFailureHandling bool                         `json:"removeFailureHandling"`
	FailureHandling       UpdateFailureHandlingRequest `json:"failureHandling"`
}

type _UpdateWebhookRequest UpdateWebhookRequest

// NewUpdateWebhookRequest instantiates a new UpdateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookRequest(name string, enabled bool, removeEventTypes []string, addEventTypes []string, endpoint UpdateEndpointRequest, removeFailureHandling bool, failureHandling UpdateFailureHandlingRequest) *UpdateWebhookRequest {
	this := UpdateWebhookRequest{}
	this.Name = name
	this.Enabled = enabled
	this.RemoveEventTypes = removeEventTypes
	this.AddEventTypes = addEventTypes
	this.Endpoint = endpoint
	this.RemoveFailureHandling = removeFailureHandling
	this.FailureHandling = failureHandling
	return &this
}

// NewUpdateWebhookRequestWithDefaults instantiates a new UpdateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookRequestWithDefaults() *UpdateWebhookRequest {
	this := UpdateWebhookRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateWebhookRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateWebhookRequest) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *UpdateWebhookRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UpdateWebhookRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRemoveEventTypes returns the RemoveEventTypes field value
func (o *UpdateWebhookRequest) GetRemoveEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemoveEventTypes
}

// GetRemoveEventTypesOk returns a tuple with the RemoveEventTypes field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetRemoveEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveEventTypes, true
}

// SetRemoveEventTypes sets field value
func (o *UpdateWebhookRequest) SetRemoveEventTypes(v []string) {
	o.RemoveEventTypes = v
}

// GetAddEventTypes returns the AddEventTypes field value
func (o *UpdateWebhookRequest) GetAddEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AddEventTypes
}

// GetAddEventTypesOk returns a tuple with the AddEventTypes field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetAddEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddEventTypes, true
}

// SetAddEventTypes sets field value
func (o *UpdateWebhookRequest) SetAddEventTypes(v []string) {
	o.AddEventTypes = v
}

// GetEndpoint returns the Endpoint field value
func (o *UpdateWebhookRequest) GetEndpoint() UpdateEndpointRequest {
	if o == nil {
		var ret UpdateEndpointRequest
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetEndpointOk() (*UpdateEndpointRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *UpdateWebhookRequest) SetEndpoint(v UpdateEndpointRequest) {
	o.Endpoint = v
}

// GetRemoveFailureHandling returns the RemoveFailureHandling field value
func (o *UpdateWebhookRequest) GetRemoveFailureHandling() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoveFailureHandling
}

// GetRemoveFailureHandlingOk returns a tuple with the RemoveFailureHandling field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetRemoveFailureHandlingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveFailureHandling, true
}

// SetRemoveFailureHandling sets field value
func (o *UpdateWebhookRequest) SetRemoveFailureHandling(v bool) {
	o.RemoveFailureHandling = v
}

// GetFailureHandling returns the FailureHandling field value
func (o *UpdateWebhookRequest) GetFailureHandling() UpdateFailureHandlingRequest {
	if o == nil {
		var ret UpdateFailureHandlingRequest
		return ret
	}

	return o.FailureHandling
}

// GetFailureHandlingOk returns a tuple with the FailureHandling field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetFailureHandlingOk() (*UpdateFailureHandlingRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureHandling, true
}

// SetFailureHandling sets field value
func (o *UpdateWebhookRequest) SetFailureHandling(v UpdateFailureHandlingRequest) {
	o.FailureHandling = v
}

func (o UpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["removeEventTypes"] = o.RemoveEventTypes
	toSerialize["addEventTypes"] = o.AddEventTypes
	toSerialize["endpoint"] = o.Endpoint
	toSerialize["removeFailureHandling"] = o.RemoveFailureHandling
	toSerialize["failureHandling"] = o.FailureHandling
	return toSerialize, nil
}

func (o *UpdateWebhookRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"enabled",
		"removeEventTypes",
		"addEventTypes",
		"endpoint",
		"removeFailureHandling",
		"failureHandling",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateWebhookRequest := _UpdateWebhookRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateWebhookRequest)

	if err != nil {
		return err
	}

	*o = UpdateWebhookRequest(varUpdateWebhookRequest)

	return err
}

type NullableUpdateWebhookRequest struct {
	value *UpdateWebhookRequest
	isSet bool
}

func (v NullableUpdateWebhookRequest) Get() *UpdateWebhookRequest {
	return v.value
}

func (v *NullableUpdateWebhookRequest) Set(val *UpdateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookRequest(val *UpdateWebhookRequest) *NullableUpdateWebhookRequest {
	return &NullableUpdateWebhookRequest{value: val, isSet: true}
}

func (v NullableUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
