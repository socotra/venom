/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package event

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EndpointResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointResponse{}

// EndpointResponse struct for EndpointResponse
type EndpointResponse struct {
	Url         string              `json:"url"`
	Headers     map[string][]string `json:"headers"`
	SecureSsl   bool                `json:"secureSsl"`
	HmacEnabled bool                `json:"hmacEnabled"`
	Secret      string              `json:"secret"`
	Tag         string              `json:"tag"`
}

type _EndpointResponse EndpointResponse

// NewEndpointResponse instantiates a new EndpointResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointResponse(url string, headers map[string][]string, secureSsl bool, hmacEnabled bool, secret string, tag string) *EndpointResponse {
	this := EndpointResponse{}
	this.Url = url
	this.Headers = headers
	this.SecureSsl = secureSsl
	this.HmacEnabled = hmacEnabled
	this.Secret = secret
	this.Tag = tag
	return &this
}

// NewEndpointResponseWithDefaults instantiates a new EndpointResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointResponseWithDefaults() *EndpointResponse {
	this := EndpointResponse{}
	return &this
}

// GetUrl returns the Url field value
func (o *EndpointResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *EndpointResponse) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *EndpointResponse) GetHeaders() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetHeadersOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *EndpointResponse) SetHeaders(v map[string][]string) {
	o.Headers = v
}

// GetSecureSsl returns the SecureSsl field value
func (o *EndpointResponse) GetSecureSsl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecureSsl
}

// GetSecureSslOk returns a tuple with the SecureSsl field value
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetSecureSslOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecureSsl, true
}

// SetSecureSsl sets field value
func (o *EndpointResponse) SetSecureSsl(v bool) {
	o.SecureSsl = v
}

// GetHmacEnabled returns the HmacEnabled field value
func (o *EndpointResponse) GetHmacEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HmacEnabled
}

// GetHmacEnabledOk returns a tuple with the HmacEnabled field value
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetHmacEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HmacEnabled, true
}

// SetHmacEnabled sets field value
func (o *EndpointResponse) SetHmacEnabled(v bool) {
	o.HmacEnabled = v
}

// GetSecret returns the Secret field value
func (o *EndpointResponse) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *EndpointResponse) SetSecret(v string) {
	o.Secret = v
}

// GetTag returns the Tag field value
func (o *EndpointResponse) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *EndpointResponse) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *EndpointResponse) SetTag(v string) {
	o.Tag = v
}

func (o EndpointResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["headers"] = o.Headers
	toSerialize["secureSsl"] = o.SecureSsl
	toSerialize["hmacEnabled"] = o.HmacEnabled
	toSerialize["secret"] = o.Secret
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *EndpointResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"headers",
		"secureSsl",
		"hmacEnabled",
		"secret",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointResponse := _EndpointResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEndpointResponse)

	if err != nil {
		return err
	}

	*o = EndpointResponse(varEndpointResponse)

	return err
}

type NullableEndpointResponse struct {
	value *EndpointResponse
	isSet bool
}

func (v NullableEndpointResponse) Get() *EndpointResponse {
	return v.value
}

func (v *NullableEndpointResponse) Set(val *EndpointResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointResponse(val *EndpointResponse) *NullableEndpointResponse {
	return &NullableEndpointResponse{value: val, isSet: true}
}

func (v NullableEndpointResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
