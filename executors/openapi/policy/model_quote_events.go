/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"encoding/json"
)

// checks if the QuoteEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteEvents{}

// QuoteEvents struct for QuoteEvents
type QuoteEvents struct {
	PolicyQuoteIssue               *QuoteLocatorData            `json:"policy.quote.issue,omitempty"`
	PolicyQuoteStaticdataReplace   *QuoteLocatorData            `json:"policy.quote.staticdata.replace,omitempty"`
	PolicyQuoteCreate              *QuoteLocatorData            `json:"policy.quote.create,omitempty"`
	PolicyQuoteReset               *QuoteLocatorData            `json:"policy.quote.reset,omitempty"`
	PolicyQuoteStaticdataAnonymize *QuoteLocatorData            `json:"policy.quote.staticdata.anonymize,omitempty"`
	PolicyQuoteStaticdataUpdate    *QuoteLocatorData            `json:"policy.quote.staticdata.update,omitempty"`
	PolicyQuoteRefuse              *QuoteLocatorData            `json:"policy.quote.refuse,omitempty"`
	PolicyQuoteStaticdataAdd       *QuoteLocatorData            `json:"policy.quote.staticdata.add,omitempty"`
	PolicyQuoteAnonymize           *QuoteLocatorData            `json:"policy.quote.anonymize,omitempty"`
	PolicyQuoteUnderwrite          *QuoteUnderwritingData       `json:"policy.quote.underwrite,omitempty"`
	PolicyQuoteManualunderwrite    *QuoteManualUnderwritingData `json:"policy.quote.manualunderwrite,omitempty"`
	PolicyQuoteUpdate              *QuoteLocatorData            `json:"policy.quote.update,omitempty"`
	PolicyQuotePrice               *QuoteLocatorData            `json:"policy.quote.price,omitempty"`
	PolicyQuoteValidate            *QuoteLocatorData            `json:"policy.quote.validate,omitempty"`
	PolicyQuoteDiscard             *QuoteLocatorData            `json:"policy.quote.discard,omitempty"`
	PolicyQuoteAccept              *QuoteLocatorData            `json:"policy.quote.accept,omitempty"`
}

// NewQuoteEvents instantiates a new QuoteEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteEvents() *QuoteEvents {
	this := QuoteEvents{}
	return &this
}

// NewQuoteEventsWithDefaults instantiates a new QuoteEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteEventsWithDefaults() *QuoteEvents {
	this := QuoteEvents{}
	return &this
}

// GetPolicyQuoteIssue returns the PolicyQuoteIssue field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteIssue() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteIssue) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteIssue
}

// GetPolicyQuoteIssueOk returns a tuple with the PolicyQuoteIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteIssueOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteIssue) {
		return nil, false
	}
	return o.PolicyQuoteIssue, true
}

// HasPolicyQuoteIssue returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteIssue() bool {
	if o != nil && !IsNil(o.PolicyQuoteIssue) {
		return true
	}

	return false
}

// SetPolicyQuoteIssue gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteIssue field.
func (o *QuoteEvents) SetPolicyQuoteIssue(v QuoteLocatorData) {
	o.PolicyQuoteIssue = &v
}

// GetPolicyQuoteStaticdataReplace returns the PolicyQuoteStaticdataReplace field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteStaticdataReplace() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteStaticdataReplace) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteStaticdataReplace
}

// GetPolicyQuoteStaticdataReplaceOk returns a tuple with the PolicyQuoteStaticdataReplace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteStaticdataReplaceOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteStaticdataReplace) {
		return nil, false
	}
	return o.PolicyQuoteStaticdataReplace, true
}

// HasPolicyQuoteStaticdataReplace returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteStaticdataReplace() bool {
	if o != nil && !IsNil(o.PolicyQuoteStaticdataReplace) {
		return true
	}

	return false
}

// SetPolicyQuoteStaticdataReplace gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteStaticdataReplace field.
func (o *QuoteEvents) SetPolicyQuoteStaticdataReplace(v QuoteLocatorData) {
	o.PolicyQuoteStaticdataReplace = &v
}

// GetPolicyQuoteCreate returns the PolicyQuoteCreate field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteCreate() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteCreate) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteCreate
}

// GetPolicyQuoteCreateOk returns a tuple with the PolicyQuoteCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteCreateOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteCreate) {
		return nil, false
	}
	return o.PolicyQuoteCreate, true
}

// HasPolicyQuoteCreate returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteCreate() bool {
	if o != nil && !IsNil(o.PolicyQuoteCreate) {
		return true
	}

	return false
}

// SetPolicyQuoteCreate gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteCreate field.
func (o *QuoteEvents) SetPolicyQuoteCreate(v QuoteLocatorData) {
	o.PolicyQuoteCreate = &v
}

// GetPolicyQuoteReset returns the PolicyQuoteReset field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteReset() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteReset) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteReset
}

// GetPolicyQuoteResetOk returns a tuple with the PolicyQuoteReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteResetOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteReset) {
		return nil, false
	}
	return o.PolicyQuoteReset, true
}

// HasPolicyQuoteReset returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteReset() bool {
	if o != nil && !IsNil(o.PolicyQuoteReset) {
		return true
	}

	return false
}

// SetPolicyQuoteReset gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteReset field.
func (o *QuoteEvents) SetPolicyQuoteReset(v QuoteLocatorData) {
	o.PolicyQuoteReset = &v
}

// GetPolicyQuoteStaticdataAnonymize returns the PolicyQuoteStaticdataAnonymize field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteStaticdataAnonymize() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteStaticdataAnonymize) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteStaticdataAnonymize
}

// GetPolicyQuoteStaticdataAnonymizeOk returns a tuple with the PolicyQuoteStaticdataAnonymize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteStaticdataAnonymizeOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteStaticdataAnonymize) {
		return nil, false
	}
	return o.PolicyQuoteStaticdataAnonymize, true
}

// HasPolicyQuoteStaticdataAnonymize returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteStaticdataAnonymize() bool {
	if o != nil && !IsNil(o.PolicyQuoteStaticdataAnonymize) {
		return true
	}

	return false
}

// SetPolicyQuoteStaticdataAnonymize gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteStaticdataAnonymize field.
func (o *QuoteEvents) SetPolicyQuoteStaticdataAnonymize(v QuoteLocatorData) {
	o.PolicyQuoteStaticdataAnonymize = &v
}

// GetPolicyQuoteStaticdataUpdate returns the PolicyQuoteStaticdataUpdate field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteStaticdataUpdate() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteStaticdataUpdate) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteStaticdataUpdate
}

// GetPolicyQuoteStaticdataUpdateOk returns a tuple with the PolicyQuoteStaticdataUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteStaticdataUpdateOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteStaticdataUpdate) {
		return nil, false
	}
	return o.PolicyQuoteStaticdataUpdate, true
}

// HasPolicyQuoteStaticdataUpdate returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteStaticdataUpdate() bool {
	if o != nil && !IsNil(o.PolicyQuoteStaticdataUpdate) {
		return true
	}

	return false
}

// SetPolicyQuoteStaticdataUpdate gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteStaticdataUpdate field.
func (o *QuoteEvents) SetPolicyQuoteStaticdataUpdate(v QuoteLocatorData) {
	o.PolicyQuoteStaticdataUpdate = &v
}

// GetPolicyQuoteRefuse returns the PolicyQuoteRefuse field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteRefuse() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteRefuse) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteRefuse
}

// GetPolicyQuoteRefuseOk returns a tuple with the PolicyQuoteRefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteRefuseOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteRefuse) {
		return nil, false
	}
	return o.PolicyQuoteRefuse, true
}

// HasPolicyQuoteRefuse returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteRefuse() bool {
	if o != nil && !IsNil(o.PolicyQuoteRefuse) {
		return true
	}

	return false
}

// SetPolicyQuoteRefuse gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteRefuse field.
func (o *QuoteEvents) SetPolicyQuoteRefuse(v QuoteLocatorData) {
	o.PolicyQuoteRefuse = &v
}

// GetPolicyQuoteStaticdataAdd returns the PolicyQuoteStaticdataAdd field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteStaticdataAdd() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteStaticdataAdd) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteStaticdataAdd
}

// GetPolicyQuoteStaticdataAddOk returns a tuple with the PolicyQuoteStaticdataAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteStaticdataAddOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteStaticdataAdd) {
		return nil, false
	}
	return o.PolicyQuoteStaticdataAdd, true
}

// HasPolicyQuoteStaticdataAdd returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteStaticdataAdd() bool {
	if o != nil && !IsNil(o.PolicyQuoteStaticdataAdd) {
		return true
	}

	return false
}

// SetPolicyQuoteStaticdataAdd gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteStaticdataAdd field.
func (o *QuoteEvents) SetPolicyQuoteStaticdataAdd(v QuoteLocatorData) {
	o.PolicyQuoteStaticdataAdd = &v
}

// GetPolicyQuoteAnonymize returns the PolicyQuoteAnonymize field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteAnonymize() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteAnonymize) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteAnonymize
}

// GetPolicyQuoteAnonymizeOk returns a tuple with the PolicyQuoteAnonymize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteAnonymizeOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteAnonymize) {
		return nil, false
	}
	return o.PolicyQuoteAnonymize, true
}

// HasPolicyQuoteAnonymize returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteAnonymize() bool {
	if o != nil && !IsNil(o.PolicyQuoteAnonymize) {
		return true
	}

	return false
}

// SetPolicyQuoteAnonymize gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteAnonymize field.
func (o *QuoteEvents) SetPolicyQuoteAnonymize(v QuoteLocatorData) {
	o.PolicyQuoteAnonymize = &v
}

// GetPolicyQuoteUnderwrite returns the PolicyQuoteUnderwrite field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteUnderwrite() QuoteUnderwritingData {
	if o == nil || IsNil(o.PolicyQuoteUnderwrite) {
		var ret QuoteUnderwritingData
		return ret
	}
	return *o.PolicyQuoteUnderwrite
}

// GetPolicyQuoteUnderwriteOk returns a tuple with the PolicyQuoteUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteUnderwriteOk() (*QuoteUnderwritingData, bool) {
	if o == nil || IsNil(o.PolicyQuoteUnderwrite) {
		return nil, false
	}
	return o.PolicyQuoteUnderwrite, true
}

// HasPolicyQuoteUnderwrite returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyQuoteUnderwrite) {
		return true
	}

	return false
}

// SetPolicyQuoteUnderwrite gets a reference to the given QuoteUnderwritingData and assigns it to the PolicyQuoteUnderwrite field.
func (o *QuoteEvents) SetPolicyQuoteUnderwrite(v QuoteUnderwritingData) {
	o.PolicyQuoteUnderwrite = &v
}

// GetPolicyQuoteManualunderwrite returns the PolicyQuoteManualunderwrite field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteManualunderwrite() QuoteManualUnderwritingData {
	if o == nil || IsNil(o.PolicyQuoteManualunderwrite) {
		var ret QuoteManualUnderwritingData
		return ret
	}
	return *o.PolicyQuoteManualunderwrite
}

// GetPolicyQuoteManualunderwriteOk returns a tuple with the PolicyQuoteManualunderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteManualunderwriteOk() (*QuoteManualUnderwritingData, bool) {
	if o == nil || IsNil(o.PolicyQuoteManualunderwrite) {
		return nil, false
	}
	return o.PolicyQuoteManualunderwrite, true
}

// HasPolicyQuoteManualunderwrite returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteManualunderwrite() bool {
	if o != nil && !IsNil(o.PolicyQuoteManualunderwrite) {
		return true
	}

	return false
}

// SetPolicyQuoteManualunderwrite gets a reference to the given QuoteManualUnderwritingData and assigns it to the PolicyQuoteManualunderwrite field.
func (o *QuoteEvents) SetPolicyQuoteManualunderwrite(v QuoteManualUnderwritingData) {
	o.PolicyQuoteManualunderwrite = &v
}

// GetPolicyQuoteUpdate returns the PolicyQuoteUpdate field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteUpdate() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteUpdate) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteUpdate
}

// GetPolicyQuoteUpdateOk returns a tuple with the PolicyQuoteUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteUpdateOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteUpdate) {
		return nil, false
	}
	return o.PolicyQuoteUpdate, true
}

// HasPolicyQuoteUpdate returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteUpdate() bool {
	if o != nil && !IsNil(o.PolicyQuoteUpdate) {
		return true
	}

	return false
}

// SetPolicyQuoteUpdate gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteUpdate field.
func (o *QuoteEvents) SetPolicyQuoteUpdate(v QuoteLocatorData) {
	o.PolicyQuoteUpdate = &v
}

// GetPolicyQuotePrice returns the PolicyQuotePrice field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuotePrice() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuotePrice) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuotePrice
}

// GetPolicyQuotePriceOk returns a tuple with the PolicyQuotePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuotePriceOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuotePrice) {
		return nil, false
	}
	return o.PolicyQuotePrice, true
}

// HasPolicyQuotePrice returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuotePrice() bool {
	if o != nil && !IsNil(o.PolicyQuotePrice) {
		return true
	}

	return false
}

// SetPolicyQuotePrice gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuotePrice field.
func (o *QuoteEvents) SetPolicyQuotePrice(v QuoteLocatorData) {
	o.PolicyQuotePrice = &v
}

// GetPolicyQuoteValidate returns the PolicyQuoteValidate field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteValidate() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteValidate) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteValidate
}

// GetPolicyQuoteValidateOk returns a tuple with the PolicyQuoteValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteValidateOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteValidate) {
		return nil, false
	}
	return o.PolicyQuoteValidate, true
}

// HasPolicyQuoteValidate returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteValidate() bool {
	if o != nil && !IsNil(o.PolicyQuoteValidate) {
		return true
	}

	return false
}

// SetPolicyQuoteValidate gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteValidate field.
func (o *QuoteEvents) SetPolicyQuoteValidate(v QuoteLocatorData) {
	o.PolicyQuoteValidate = &v
}

// GetPolicyQuoteDiscard returns the PolicyQuoteDiscard field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteDiscard() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteDiscard) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteDiscard
}

// GetPolicyQuoteDiscardOk returns a tuple with the PolicyQuoteDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteDiscardOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteDiscard) {
		return nil, false
	}
	return o.PolicyQuoteDiscard, true
}

// HasPolicyQuoteDiscard returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteDiscard() bool {
	if o != nil && !IsNil(o.PolicyQuoteDiscard) {
		return true
	}

	return false
}

// SetPolicyQuoteDiscard gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteDiscard field.
func (o *QuoteEvents) SetPolicyQuoteDiscard(v QuoteLocatorData) {
	o.PolicyQuoteDiscard = &v
}

// GetPolicyQuoteAccept returns the PolicyQuoteAccept field value if set, zero value otherwise.
func (o *QuoteEvents) GetPolicyQuoteAccept() QuoteLocatorData {
	if o == nil || IsNil(o.PolicyQuoteAccept) {
		var ret QuoteLocatorData
		return ret
	}
	return *o.PolicyQuoteAccept
}

// GetPolicyQuoteAcceptOk returns a tuple with the PolicyQuoteAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteEvents) GetPolicyQuoteAcceptOk() (*QuoteLocatorData, bool) {
	if o == nil || IsNil(o.PolicyQuoteAccept) {
		return nil, false
	}
	return o.PolicyQuoteAccept, true
}

// HasPolicyQuoteAccept returns a boolean if a field has been set.
func (o *QuoteEvents) HasPolicyQuoteAccept() bool {
	if o != nil && !IsNil(o.PolicyQuoteAccept) {
		return true
	}

	return false
}

// SetPolicyQuoteAccept gets a reference to the given QuoteLocatorData and assigns it to the PolicyQuoteAccept field.
func (o *QuoteEvents) SetPolicyQuoteAccept(v QuoteLocatorData) {
	o.PolicyQuoteAccept = &v
}

func (o QuoteEvents) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyQuoteIssue) {
		toSerialize["policy.quote.issue"] = o.PolicyQuoteIssue
	}
	if !IsNil(o.PolicyQuoteStaticdataReplace) {
		toSerialize["policy.quote.staticdata.replace"] = o.PolicyQuoteStaticdataReplace
	}
	if !IsNil(o.PolicyQuoteCreate) {
		toSerialize["policy.quote.create"] = o.PolicyQuoteCreate
	}
	if !IsNil(o.PolicyQuoteReset) {
		toSerialize["policy.quote.reset"] = o.PolicyQuoteReset
	}
	if !IsNil(o.PolicyQuoteStaticdataAnonymize) {
		toSerialize["policy.quote.staticdata.anonymize"] = o.PolicyQuoteStaticdataAnonymize
	}
	if !IsNil(o.PolicyQuoteStaticdataUpdate) {
		toSerialize["policy.quote.staticdata.update"] = o.PolicyQuoteStaticdataUpdate
	}
	if !IsNil(o.PolicyQuoteRefuse) {
		toSerialize["policy.quote.refuse"] = o.PolicyQuoteRefuse
	}
	if !IsNil(o.PolicyQuoteStaticdataAdd) {
		toSerialize["policy.quote.staticdata.add"] = o.PolicyQuoteStaticdataAdd
	}
	if !IsNil(o.PolicyQuoteAnonymize) {
		toSerialize["policy.quote.anonymize"] = o.PolicyQuoteAnonymize
	}
	if !IsNil(o.PolicyQuoteUnderwrite) {
		toSerialize["policy.quote.underwrite"] = o.PolicyQuoteUnderwrite
	}
	if !IsNil(o.PolicyQuoteManualunderwrite) {
		toSerialize["policy.quote.manualunderwrite"] = o.PolicyQuoteManualunderwrite
	}
	if !IsNil(o.PolicyQuoteUpdate) {
		toSerialize["policy.quote.update"] = o.PolicyQuoteUpdate
	}
	if !IsNil(o.PolicyQuotePrice) {
		toSerialize["policy.quote.price"] = o.PolicyQuotePrice
	}
	if !IsNil(o.PolicyQuoteValidate) {
		toSerialize["policy.quote.validate"] = o.PolicyQuoteValidate
	}
	if !IsNil(o.PolicyQuoteDiscard) {
		toSerialize["policy.quote.discard"] = o.PolicyQuoteDiscard
	}
	if !IsNil(o.PolicyQuoteAccept) {
		toSerialize["policy.quote.accept"] = o.PolicyQuoteAccept
	}
	return toSerialize, nil
}

type NullableQuoteEvents struct {
	value *QuoteEvents
	isSet bool
}

func (v NullableQuoteEvents) Get() *QuoteEvents {
	return v.value
}

func (v *NullableQuoteEvents) Set(val *QuoteEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteEvents(val *QuoteEvents) *NullableQuoteEvents {
	return &NullableQuoteEvents{value: val, isSet: true}
}

func (v NullableQuoteEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
