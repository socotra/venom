/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeleteChangeInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteChangeInstruction{}

// DeleteChangeInstruction struct for DeleteChangeInstruction
type DeleteChangeInstruction struct {
	ChangeInstruction
	Locator               string   `json:"locator"`
	Action                string   `json:"action"`
	StaticElementLocators []string `json:"staticElementLocators"`
}

type _DeleteChangeInstruction DeleteChangeInstruction

// NewDeleteChangeInstruction instantiates a new DeleteChangeInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteChangeInstruction(locator string, action string, staticElementLocators []string) *DeleteChangeInstruction {
	this := DeleteChangeInstruction{}
	this.Action = action
	this.Locator = locator
	this.StaticElementLocators = staticElementLocators
	return &this
}

// NewDeleteChangeInstructionWithDefaults instantiates a new DeleteChangeInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteChangeInstructionWithDefaults() *DeleteChangeInstruction {
	this := DeleteChangeInstruction{}
	return &this
}

// GetLocator returns the Locator field value
func (o *DeleteChangeInstruction) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *DeleteChangeInstruction) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *DeleteChangeInstruction) SetLocator(v string) {
	o.Locator = v
}

// GetAction returns the Action field value
func (o *DeleteChangeInstruction) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *DeleteChangeInstruction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *DeleteChangeInstruction) SetAction(v string) {
	o.Action = v
}

// GetStaticElementLocators returns the StaticElementLocators field value
func (o *DeleteChangeInstruction) GetStaticElementLocators() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StaticElementLocators
}

// GetStaticElementLocatorsOk returns a tuple with the StaticElementLocators field value
// and a boolean to check if the value has been set.
func (o *DeleteChangeInstruction) GetStaticElementLocatorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StaticElementLocators, true
}

// SetStaticElementLocators sets field value
func (o *DeleteChangeInstruction) SetStaticElementLocators(v []string) {
	o.StaticElementLocators = v
}

func (o DeleteChangeInstruction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteChangeInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["action"] = o.Action
	toSerialize["staticElementLocators"] = o.StaticElementLocators
	return toSerialize, nil
}

func (o *DeleteChangeInstruction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"action",
		"staticElementLocators",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteChangeInstruction := _DeleteChangeInstruction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteChangeInstruction)

	if err != nil {
		return err
	}

	*o = DeleteChangeInstruction(varDeleteChangeInstruction)

	return err
}

type NullableDeleteChangeInstruction struct {
	value *DeleteChangeInstruction
	isSet bool
}

func (v NullableDeleteChangeInstruction) Get() *DeleteChangeInstruction {
	return v.value
}

func (v *NullableDeleteChangeInstruction) Set(val *DeleteChangeInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteChangeInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteChangeInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteChangeInstruction(val *DeleteChangeInstruction) *NullableDeleteChangeInstruction {
	return &NullableDeleteChangeInstruction{value: val, isSet: true}
}

func (v NullableDeleteChangeInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteChangeInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
