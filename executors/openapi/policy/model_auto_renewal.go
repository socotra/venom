/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AutoRenewal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoRenewal{}

// AutoRenewal struct for AutoRenewal
type AutoRenewal struct {
	Locator                        string            `json:"locator"`
	AutoRenewalState               string            `json:"autoRenewalState"`
	PolicyLocator                  string            `json:"policyLocator"`
	TermLocator                    string            `json:"termLocator"`
	RenewalTransactionType         string            `json:"renewalTransactionType"`
	RenewalTransactionLocator      *string           `json:"renewalTransactionLocator,omitempty"`
	RenewalTransactionCreateTime   *time.Time        `json:"renewalTransactionCreateTime,omitempty"`
	RenewalTransactionCreatedTime  *time.Time        `json:"renewalTransactionCreatedTime,omitempty"`
	RenewalTransactionAcceptTime   *time.Time        `json:"renewalTransactionAcceptTime,omitempty"`
	RenewalTransactionAcceptedTime *time.Time        `json:"renewalTransactionAcceptedTime,omitempty"`
	RenewalTransactionIssueTime    *time.Time        `json:"renewalTransactionIssueTime,omitempty"`
	RenewalTransactionIssuedTime   *time.Time        `json:"renewalTransactionIssuedTime,omitempty"`
	NewTermDuration                *int32            `json:"newTermDuration,omitempty"`
	ValidationResult               *ValidationResult `json:"validationResult,omitempty"`
}

type _AutoRenewal AutoRenewal

// NewAutoRenewal instantiates a new AutoRenewal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoRenewal(locator string, autoRenewalState string, policyLocator string, termLocator string, renewalTransactionType string) *AutoRenewal {
	this := AutoRenewal{}
	this.Locator = locator
	this.AutoRenewalState = autoRenewalState
	this.PolicyLocator = policyLocator
	this.TermLocator = termLocator
	this.RenewalTransactionType = renewalTransactionType
	return &this
}

// NewAutoRenewalWithDefaults instantiates a new AutoRenewal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoRenewalWithDefaults() *AutoRenewal {
	this := AutoRenewal{}
	return &this
}

// GetLocator returns the Locator field value
func (o *AutoRenewal) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *AutoRenewal) SetLocator(v string) {
	o.Locator = v
}

// GetAutoRenewalState returns the AutoRenewalState field value
func (o *AutoRenewal) GetAutoRenewalState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AutoRenewalState
}

// GetAutoRenewalStateOk returns a tuple with the AutoRenewalState field value
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetAutoRenewalStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRenewalState, true
}

// SetAutoRenewalState sets field value
func (o *AutoRenewal) SetAutoRenewalState(v string) {
	o.AutoRenewalState = v
}

// GetPolicyLocator returns the PolicyLocator field value
func (o *AutoRenewal) GetPolicyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetPolicyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocator, true
}

// SetPolicyLocator sets field value
func (o *AutoRenewal) SetPolicyLocator(v string) {
	o.PolicyLocator = v
}

// GetTermLocator returns the TermLocator field value
func (o *AutoRenewal) GetTermLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TermLocator
}

// GetTermLocatorOk returns a tuple with the TermLocator field value
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetTermLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermLocator, true
}

// SetTermLocator sets field value
func (o *AutoRenewal) SetTermLocator(v string) {
	o.TermLocator = v
}

// GetRenewalTransactionType returns the RenewalTransactionType field value
func (o *AutoRenewal) GetRenewalTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RenewalTransactionType
}

// GetRenewalTransactionTypeOk returns a tuple with the RenewalTransactionType field value
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenewalTransactionType, true
}

// SetRenewalTransactionType sets field value
func (o *AutoRenewal) SetRenewalTransactionType(v string) {
	o.RenewalTransactionType = v
}

// GetRenewalTransactionLocator returns the RenewalTransactionLocator field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionLocator() string {
	if o == nil || IsNil(o.RenewalTransactionLocator) {
		var ret string
		return ret
	}
	return *o.RenewalTransactionLocator
}

// GetRenewalTransactionLocatorOk returns a tuple with the RenewalTransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalTransactionLocator) {
		return nil, false
	}
	return o.RenewalTransactionLocator, true
}

// HasRenewalTransactionLocator returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionLocator() bool {
	if o != nil && !IsNil(o.RenewalTransactionLocator) {
		return true
	}

	return false
}

// SetRenewalTransactionLocator gets a reference to the given string and assigns it to the RenewalTransactionLocator field.
func (o *AutoRenewal) SetRenewalTransactionLocator(v string) {
	o.RenewalTransactionLocator = &v
}

// GetRenewalTransactionCreateTime returns the RenewalTransactionCreateTime field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionCreateTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionCreateTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionCreateTime
}

// GetRenewalTransactionCreateTimeOk returns a tuple with the RenewalTransactionCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionCreateTime) {
		return nil, false
	}
	return o.RenewalTransactionCreateTime, true
}

// HasRenewalTransactionCreateTime returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionCreateTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionCreateTime) {
		return true
	}

	return false
}

// SetRenewalTransactionCreateTime gets a reference to the given time.Time and assigns it to the RenewalTransactionCreateTime field.
func (o *AutoRenewal) SetRenewalTransactionCreateTime(v time.Time) {
	o.RenewalTransactionCreateTime = &v
}

// GetRenewalTransactionCreatedTime returns the RenewalTransactionCreatedTime field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionCreatedTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionCreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionCreatedTime
}

// GetRenewalTransactionCreatedTimeOk returns a tuple with the RenewalTransactionCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionCreatedTime) {
		return nil, false
	}
	return o.RenewalTransactionCreatedTime, true
}

// HasRenewalTransactionCreatedTime returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionCreatedTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionCreatedTime) {
		return true
	}

	return false
}

// SetRenewalTransactionCreatedTime gets a reference to the given time.Time and assigns it to the RenewalTransactionCreatedTime field.
func (o *AutoRenewal) SetRenewalTransactionCreatedTime(v time.Time) {
	o.RenewalTransactionCreatedTime = &v
}

// GetRenewalTransactionAcceptTime returns the RenewalTransactionAcceptTime field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionAcceptTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionAcceptTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionAcceptTime
}

// GetRenewalTransactionAcceptTimeOk returns a tuple with the RenewalTransactionAcceptTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionAcceptTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionAcceptTime) {
		return nil, false
	}
	return o.RenewalTransactionAcceptTime, true
}

// HasRenewalTransactionAcceptTime returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionAcceptTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionAcceptTime) {
		return true
	}

	return false
}

// SetRenewalTransactionAcceptTime gets a reference to the given time.Time and assigns it to the RenewalTransactionAcceptTime field.
func (o *AutoRenewal) SetRenewalTransactionAcceptTime(v time.Time) {
	o.RenewalTransactionAcceptTime = &v
}

// GetRenewalTransactionAcceptedTime returns the RenewalTransactionAcceptedTime field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionAcceptedTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionAcceptedTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionAcceptedTime
}

// GetRenewalTransactionAcceptedTimeOk returns a tuple with the RenewalTransactionAcceptedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionAcceptedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionAcceptedTime) {
		return nil, false
	}
	return o.RenewalTransactionAcceptedTime, true
}

// HasRenewalTransactionAcceptedTime returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionAcceptedTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionAcceptedTime) {
		return true
	}

	return false
}

// SetRenewalTransactionAcceptedTime gets a reference to the given time.Time and assigns it to the RenewalTransactionAcceptedTime field.
func (o *AutoRenewal) SetRenewalTransactionAcceptedTime(v time.Time) {
	o.RenewalTransactionAcceptedTime = &v
}

// GetRenewalTransactionIssueTime returns the RenewalTransactionIssueTime field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionIssueTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionIssueTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionIssueTime
}

// GetRenewalTransactionIssueTimeOk returns a tuple with the RenewalTransactionIssueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionIssueTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionIssueTime) {
		return nil, false
	}
	return o.RenewalTransactionIssueTime, true
}

// HasRenewalTransactionIssueTime returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionIssueTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionIssueTime) {
		return true
	}

	return false
}

// SetRenewalTransactionIssueTime gets a reference to the given time.Time and assigns it to the RenewalTransactionIssueTime field.
func (o *AutoRenewal) SetRenewalTransactionIssueTime(v time.Time) {
	o.RenewalTransactionIssueTime = &v
}

// GetRenewalTransactionIssuedTime returns the RenewalTransactionIssuedTime field value if set, zero value otherwise.
func (o *AutoRenewal) GetRenewalTransactionIssuedTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionIssuedTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionIssuedTime
}

// GetRenewalTransactionIssuedTimeOk returns a tuple with the RenewalTransactionIssuedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetRenewalTransactionIssuedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionIssuedTime) {
		return nil, false
	}
	return o.RenewalTransactionIssuedTime, true
}

// HasRenewalTransactionIssuedTime returns a boolean if a field has been set.
func (o *AutoRenewal) HasRenewalTransactionIssuedTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionIssuedTime) {
		return true
	}

	return false
}

// SetRenewalTransactionIssuedTime gets a reference to the given time.Time and assigns it to the RenewalTransactionIssuedTime field.
func (o *AutoRenewal) SetRenewalTransactionIssuedTime(v time.Time) {
	o.RenewalTransactionIssuedTime = &v
}

// GetNewTermDuration returns the NewTermDuration field value if set, zero value otherwise.
func (o *AutoRenewal) GetNewTermDuration() int32 {
	if o == nil || IsNil(o.NewTermDuration) {
		var ret int32
		return ret
	}
	return *o.NewTermDuration
}

// GetNewTermDurationOk returns a tuple with the NewTermDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetNewTermDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.NewTermDuration) {
		return nil, false
	}
	return o.NewTermDuration, true
}

// HasNewTermDuration returns a boolean if a field has been set.
func (o *AutoRenewal) HasNewTermDuration() bool {
	if o != nil && !IsNil(o.NewTermDuration) {
		return true
	}

	return false
}

// SetNewTermDuration gets a reference to the given int32 and assigns it to the NewTermDuration field.
func (o *AutoRenewal) SetNewTermDuration(v int32) {
	o.NewTermDuration = &v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *AutoRenewal) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoRenewal) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *AutoRenewal) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *AutoRenewal) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

func (o AutoRenewal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoRenewal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["autoRenewalState"] = o.AutoRenewalState
	toSerialize["policyLocator"] = o.PolicyLocator
	toSerialize["termLocator"] = o.TermLocator
	toSerialize["renewalTransactionType"] = o.RenewalTransactionType
	if !IsNil(o.RenewalTransactionLocator) {
		toSerialize["renewalTransactionLocator"] = o.RenewalTransactionLocator
	}
	if !IsNil(o.RenewalTransactionCreateTime) {
		toSerialize["renewalTransactionCreateTime"] = o.RenewalTransactionCreateTime
	}
	if !IsNil(o.RenewalTransactionCreatedTime) {
		toSerialize["renewalTransactionCreatedTime"] = o.RenewalTransactionCreatedTime
	}
	if !IsNil(o.RenewalTransactionAcceptTime) {
		toSerialize["renewalTransactionAcceptTime"] = o.RenewalTransactionAcceptTime
	}
	if !IsNil(o.RenewalTransactionAcceptedTime) {
		toSerialize["renewalTransactionAcceptedTime"] = o.RenewalTransactionAcceptedTime
	}
	if !IsNil(o.RenewalTransactionIssueTime) {
		toSerialize["renewalTransactionIssueTime"] = o.RenewalTransactionIssueTime
	}
	if !IsNil(o.RenewalTransactionIssuedTime) {
		toSerialize["renewalTransactionIssuedTime"] = o.RenewalTransactionIssuedTime
	}
	if !IsNil(o.NewTermDuration) {
		toSerialize["newTermDuration"] = o.NewTermDuration
	}
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	return toSerialize, nil
}

func (o *AutoRenewal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"autoRenewalState",
		"policyLocator",
		"termLocator",
		"renewalTransactionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAutoRenewal := _AutoRenewal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAutoRenewal)

	if err != nil {
		return err
	}

	*o = AutoRenewal(varAutoRenewal)

	return err
}

type NullableAutoRenewal struct {
	value *AutoRenewal
	isSet bool
}

func (v NullableAutoRenewal) Get() *AutoRenewal {
	return v.value
}

func (v *NullableAutoRenewal) Set(val *AutoRenewal) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoRenewal) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoRenewal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoRenewal(val *AutoRenewal) *NullableAutoRenewal {
	return &NullableAutoRenewal{value: val, isSet: true}
}

func (v NullableAutoRenewal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoRenewal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
