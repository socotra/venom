/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConstraintDependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstraintDependency{}

// ConstraintDependency struct for ConstraintDependency
type ConstraintDependency struct {
	Table  string                    `json:"table"`
	Column string                    `json:"column"`
	Where  map[string]ConditionValue `json:"where"`
}

type _ConstraintDependency ConstraintDependency

// NewConstraintDependency instantiates a new ConstraintDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstraintDependency(table string, column string, where map[string]ConditionValue) *ConstraintDependency {
	this := ConstraintDependency{}
	this.Table = table
	this.Column = column
	this.Where = where
	return &this
}

// NewConstraintDependencyWithDefaults instantiates a new ConstraintDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstraintDependencyWithDefaults() *ConstraintDependency {
	this := ConstraintDependency{}
	return &this
}

// GetTable returns the Table field value
func (o *ConstraintDependency) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *ConstraintDependency) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *ConstraintDependency) SetTable(v string) {
	o.Table = v
}

// GetColumn returns the Column field value
func (o *ConstraintDependency) GetColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *ConstraintDependency) GetColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *ConstraintDependency) SetColumn(v string) {
	o.Column = v
}

// GetWhere returns the Where field value
func (o *ConstraintDependency) GetWhere() map[string]ConditionValue {
	if o == nil {
		var ret map[string]ConditionValue
		return ret
	}

	return o.Where
}

// GetWhereOk returns a tuple with the Where field value
// and a boolean to check if the value has been set.
func (o *ConstraintDependency) GetWhereOk() (*map[string]ConditionValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Where, true
}

// SetWhere sets field value
func (o *ConstraintDependency) SetWhere(v map[string]ConditionValue) {
	o.Where = v
}

func (o ConstraintDependency) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstraintDependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["table"] = o.Table
	toSerialize["column"] = o.Column
	toSerialize["where"] = o.Where
	return toSerialize, nil
}

func (o *ConstraintDependency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"table",
		"column",
		"where",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConstraintDependency := _ConstraintDependency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConstraintDependency)

	if err != nil {
		return err
	}

	*o = ConstraintDependency(varConstraintDependency)

	return err
}

type NullableConstraintDependency struct {
	value *ConstraintDependency
	isSet bool
}

func (v NullableConstraintDependency) Get() *ConstraintDependency {
	return v.value
}

func (v *NullableConstraintDependency) Set(val *ConstraintDependency) {
	v.value = val
	v.isSet = true
}

func (v NullableConstraintDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableConstraintDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstraintDependency(val *ConstraintDependency) *NullableConstraintDependency {
	return &NullableConstraintDependency{value: val, isSet: true}
}

func (v NullableConstraintDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstraintDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
