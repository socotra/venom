/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Segment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Segment{}

// Segment struct for Segment
type Segment struct {
	Locator            string    `json:"locator"`
	TransactionLocator string    `json:"transactionLocator"`
	SegmentType        string    `json:"segmentType"`
	StartTime          time.Time `json:"startTime"`
	EndTime            time.Time `json:"endTime"`
	Element            Element   `json:"element"`
	Duration           float32   `json:"duration"`
	BasedOn            *string   `json:"basedOn,omitempty"`
}

type _Segment Segment

// NewSegment instantiates a new Segment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegment(locator string, transactionLocator string, segmentType string, startTime time.Time, endTime time.Time, element Element, duration float32) *Segment {
	this := Segment{}
	this.Locator = locator
	this.TransactionLocator = transactionLocator
	this.SegmentType = segmentType
	this.StartTime = startTime
	this.EndTime = endTime
	this.Element = element
	this.Duration = duration
	return &this
}

// NewSegmentWithDefaults instantiates a new Segment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentWithDefaults() *Segment {
	this := Segment{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Segment) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Segment) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Segment) SetLocator(v string) {
	o.Locator = v
}

// GetTransactionLocator returns the TransactionLocator field value
func (o *Segment) GetTransactionLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value
// and a boolean to check if the value has been set.
func (o *Segment) GetTransactionLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionLocator, true
}

// SetTransactionLocator sets field value
func (o *Segment) SetTransactionLocator(v string) {
	o.TransactionLocator = v
}

// GetSegmentType returns the SegmentType field value
func (o *Segment) GetSegmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SegmentType
}

// GetSegmentTypeOk returns a tuple with the SegmentType field value
// and a boolean to check if the value has been set.
func (o *Segment) GetSegmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SegmentType, true
}

// SetSegmentType sets field value
func (o *Segment) SetSegmentType(v string) {
	o.SegmentType = v
}

// GetStartTime returns the StartTime field value
func (o *Segment) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Segment) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Segment) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *Segment) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Segment) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Segment) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetElement returns the Element field value
func (o *Segment) GetElement() Element {
	if o == nil {
		var ret Element
		return ret
	}

	return o.Element
}

// GetElementOk returns a tuple with the Element field value
// and a boolean to check if the value has been set.
func (o *Segment) GetElementOk() (*Element, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Element, true
}

// SetElement sets field value
func (o *Segment) SetElement(v Element) {
	o.Element = v
}

// GetDuration returns the Duration field value
func (o *Segment) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Segment) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Segment) SetDuration(v float32) {
	o.Duration = v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *Segment) GetBasedOn() string {
	if o == nil || IsNil(o.BasedOn) {
		var ret string
		return ret
	}
	return *o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Segment) GetBasedOnOk() (*string, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *Segment) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given string and assigns it to the BasedOn field.
func (o *Segment) SetBasedOn(v string) {
	o.BasedOn = &v
}

func (o Segment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Segment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["transactionLocator"] = o.TransactionLocator
	toSerialize["segmentType"] = o.SegmentType
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["element"] = o.Element
	toSerialize["duration"] = o.Duration
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	return toSerialize, nil
}

func (o *Segment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"transactionLocator",
		"segmentType",
		"startTime",
		"endTime",
		"element",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSegment := _Segment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSegment)

	if err != nil {
		return err
	}

	*o = Segment(varSegment)

	return err
}

type NullableSegment struct {
	value *Segment
	isSet bool
}

func (v NullableSegment) Get() *Segment {
	return v.value
}

func (v *NullableSegment) Set(val *Segment) {
	v.value = val
	v.isSet = true
}

func (v NullableSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegment(val *Segment) *NullableSegment {
	return &NullableSegment{value: val, isSet: true}
}

func (v NullableSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
