/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AddChangeInstructionRequest - struct for AddChangeInstructionRequest
type AddChangeInstructionRequest struct {
	AddChangeInstruction    *AddChangeInstruction
	DeleteChangeInstruction *DeleteChangeInstruction
	ModifyChangeInstruction *ModifyChangeInstruction
	ParamsChangeInstruction *ParamsChangeInstruction
}

// AddChangeInstructionAsAddChangeInstructionRequest is a convenience function that returns AddChangeInstruction wrapped in AddChangeInstructionRequest
func AddChangeInstructionAsAddChangeInstructionRequest(v *AddChangeInstruction) AddChangeInstructionRequest {
	return AddChangeInstructionRequest{
		AddChangeInstruction: v,
	}
}

// DeleteChangeInstructionAsAddChangeInstructionRequest is a convenience function that returns DeleteChangeInstruction wrapped in AddChangeInstructionRequest
func DeleteChangeInstructionAsAddChangeInstructionRequest(v *DeleteChangeInstruction) AddChangeInstructionRequest {
	return AddChangeInstructionRequest{
		DeleteChangeInstruction: v,
	}
}

// ModifyChangeInstructionAsAddChangeInstructionRequest is a convenience function that returns ModifyChangeInstruction wrapped in AddChangeInstructionRequest
func ModifyChangeInstructionAsAddChangeInstructionRequest(v *ModifyChangeInstruction) AddChangeInstructionRequest {
	return AddChangeInstructionRequest{
		ModifyChangeInstruction: v,
	}
}

// ParamsChangeInstructionAsAddChangeInstructionRequest is a convenience function that returns ParamsChangeInstruction wrapped in AddChangeInstructionRequest
func ParamsChangeInstructionAsAddChangeInstructionRequest(v *ParamsChangeInstruction) AddChangeInstructionRequest {
	return AddChangeInstructionRequest{
		ParamsChangeInstruction: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddChangeInstructionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddChangeInstruction
	err = newStrictDecoder(data).Decode(&dst.AddChangeInstruction)
	if err == nil {
		jsonAddChangeInstruction, _ := json.Marshal(dst.AddChangeInstruction)
		if string(jsonAddChangeInstruction) == "{}" { // empty struct
			dst.AddChangeInstruction = nil
		} else {
			if err = validator.Validate(dst.AddChangeInstruction); err != nil {
				dst.AddChangeInstruction = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddChangeInstruction = nil
	}

	// try to unmarshal data into DeleteChangeInstruction
	err = newStrictDecoder(data).Decode(&dst.DeleteChangeInstruction)
	if err == nil {
		jsonDeleteChangeInstruction, _ := json.Marshal(dst.DeleteChangeInstruction)
		if string(jsonDeleteChangeInstruction) == "{}" { // empty struct
			dst.DeleteChangeInstruction = nil
		} else {
			if err = validator.Validate(dst.DeleteChangeInstruction); err != nil {
				dst.DeleteChangeInstruction = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteChangeInstruction = nil
	}

	// try to unmarshal data into ModifyChangeInstruction
	err = newStrictDecoder(data).Decode(&dst.ModifyChangeInstruction)
	if err == nil {
		jsonModifyChangeInstruction, _ := json.Marshal(dst.ModifyChangeInstruction)
		if string(jsonModifyChangeInstruction) == "{}" { // empty struct
			dst.ModifyChangeInstruction = nil
		} else {
			if err = validator.Validate(dst.ModifyChangeInstruction); err != nil {
				dst.ModifyChangeInstruction = nil
			} else {
				match++
			}
		}
	} else {
		dst.ModifyChangeInstruction = nil
	}

	// try to unmarshal data into ParamsChangeInstruction
	err = newStrictDecoder(data).Decode(&dst.ParamsChangeInstruction)
	if err == nil {
		jsonParamsChangeInstruction, _ := json.Marshal(dst.ParamsChangeInstruction)
		if string(jsonParamsChangeInstruction) == "{}" { // empty struct
			dst.ParamsChangeInstruction = nil
		} else {
			if err = validator.Validate(dst.ParamsChangeInstruction); err != nil {
				dst.ParamsChangeInstruction = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParamsChangeInstruction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddChangeInstruction = nil
		dst.DeleteChangeInstruction = nil
		dst.ModifyChangeInstruction = nil
		dst.ParamsChangeInstruction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddChangeInstructionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddChangeInstructionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddChangeInstructionRequest) MarshalJSON() ([]byte, error) {
	if src.AddChangeInstruction != nil {
		return json.Marshal(&src.AddChangeInstruction)
	}

	if src.DeleteChangeInstruction != nil {
		return json.Marshal(&src.DeleteChangeInstruction)
	}

	if src.ModifyChangeInstruction != nil {
		return json.Marshal(&src.ModifyChangeInstruction)
	}

	if src.ParamsChangeInstruction != nil {
		return json.Marshal(&src.ParamsChangeInstruction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddChangeInstructionRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddChangeInstruction != nil {
		return obj.AddChangeInstruction
	}

	if obj.DeleteChangeInstruction != nil {
		return obj.DeleteChangeInstruction
	}

	if obj.ModifyChangeInstruction != nil {
		return obj.ModifyChangeInstruction
	}

	if obj.ParamsChangeInstruction != nil {
		return obj.ParamsChangeInstruction
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AddChangeInstructionRequest) GetActualInstanceValue() interface{} {
	if obj.AddChangeInstruction != nil {
		return *obj.AddChangeInstruction
	}

	if obj.DeleteChangeInstruction != nil {
		return *obj.DeleteChangeInstruction
	}

	if obj.ModifyChangeInstruction != nil {
		return *obj.ModifyChangeInstruction
	}

	if obj.ParamsChangeInstruction != nil {
		return *obj.ParamsChangeInstruction
	}

	// all schemas are nil
	return nil
}

type NullableAddChangeInstructionRequest struct {
	value *AddChangeInstructionRequest
	isSet bool
}

func (v NullableAddChangeInstructionRequest) Get() *AddChangeInstructionRequest {
	return v.value
}

func (v *NullableAddChangeInstructionRequest) Set(val *AddChangeInstructionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddChangeInstructionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddChangeInstructionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddChangeInstructionRequest(val *AddChangeInstructionRequest) *NullableAddChangeInstructionRequest {
	return &NullableAddChangeInstructionRequest{value: val, isSet: true}
}

func (v NullableAddChangeInstructionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddChangeInstructionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
