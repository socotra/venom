/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Term type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Term{}

// Term struct for Term
type Term struct {
	Locator               string    `json:"locator"`
	StaticLocator         string    `json:"staticLocator"`
	PolicyLocator         string    `json:"policyLocator"`
	Number                int32     `json:"number"`
	PreviousTermLocator   *string   `json:"previousTermLocator,omitempty"`
	SupersedesTermLocator *string   `json:"supersedesTermLocator,omitempty"`
	StartTime             time.Time `json:"startTime"`
	EndTime               time.Time `json:"endTime"`
	AutoRenewalLocator    *string   `json:"autoRenewalLocator,omitempty"`
	TermNumber            *string   `json:"termNumber,omitempty"`
}

type _Term Term

// NewTerm instantiates a new Term object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerm(locator string, staticLocator string, policyLocator string, number int32, startTime time.Time, endTime time.Time) *Term {
	this := Term{}
	this.Locator = locator
	this.StaticLocator = staticLocator
	this.PolicyLocator = policyLocator
	this.Number = number
	this.StartTime = startTime
	this.EndTime = endTime
	return &this
}

// NewTermWithDefaults instantiates a new Term object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermWithDefaults() *Term {
	this := Term{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Term) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Term) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Term) SetLocator(v string) {
	o.Locator = v
}

// GetStaticLocator returns the StaticLocator field value
func (o *Term) GetStaticLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticLocator
}

// GetStaticLocatorOk returns a tuple with the StaticLocator field value
// and a boolean to check if the value has been set.
func (o *Term) GetStaticLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticLocator, true
}

// SetStaticLocator sets field value
func (o *Term) SetStaticLocator(v string) {
	o.StaticLocator = v
}

// GetPolicyLocator returns the PolicyLocator field value
func (o *Term) GetPolicyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value
// and a boolean to check if the value has been set.
func (o *Term) GetPolicyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocator, true
}

// SetPolicyLocator sets field value
func (o *Term) SetPolicyLocator(v string) {
	o.PolicyLocator = v
}

// GetNumber returns the Number field value
func (o *Term) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Term) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Term) SetNumber(v int32) {
	o.Number = v
}

// GetPreviousTermLocator returns the PreviousTermLocator field value if set, zero value otherwise.
func (o *Term) GetPreviousTermLocator() string {
	if o == nil || IsNil(o.PreviousTermLocator) {
		var ret string
		return ret
	}
	return *o.PreviousTermLocator
}

// GetPreviousTermLocatorOk returns a tuple with the PreviousTermLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Term) GetPreviousTermLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousTermLocator) {
		return nil, false
	}
	return o.PreviousTermLocator, true
}

// HasPreviousTermLocator returns a boolean if a field has been set.
func (o *Term) HasPreviousTermLocator() bool {
	if o != nil && !IsNil(o.PreviousTermLocator) {
		return true
	}

	return false
}

// SetPreviousTermLocator gets a reference to the given string and assigns it to the PreviousTermLocator field.
func (o *Term) SetPreviousTermLocator(v string) {
	o.PreviousTermLocator = &v
}

// GetSupersedesTermLocator returns the SupersedesTermLocator field value if set, zero value otherwise.
func (o *Term) GetSupersedesTermLocator() string {
	if o == nil || IsNil(o.SupersedesTermLocator) {
		var ret string
		return ret
	}
	return *o.SupersedesTermLocator
}

// GetSupersedesTermLocatorOk returns a tuple with the SupersedesTermLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Term) GetSupersedesTermLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.SupersedesTermLocator) {
		return nil, false
	}
	return o.SupersedesTermLocator, true
}

// HasSupersedesTermLocator returns a boolean if a field has been set.
func (o *Term) HasSupersedesTermLocator() bool {
	if o != nil && !IsNil(o.SupersedesTermLocator) {
		return true
	}

	return false
}

// SetSupersedesTermLocator gets a reference to the given string and assigns it to the SupersedesTermLocator field.
func (o *Term) SetSupersedesTermLocator(v string) {
	o.SupersedesTermLocator = &v
}

// GetStartTime returns the StartTime field value
func (o *Term) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Term) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Term) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *Term) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Term) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Term) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetAutoRenewalLocator returns the AutoRenewalLocator field value if set, zero value otherwise.
func (o *Term) GetAutoRenewalLocator() string {
	if o == nil || IsNil(o.AutoRenewalLocator) {
		var ret string
		return ret
	}
	return *o.AutoRenewalLocator
}

// GetAutoRenewalLocatorOk returns a tuple with the AutoRenewalLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Term) GetAutoRenewalLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AutoRenewalLocator) {
		return nil, false
	}
	return o.AutoRenewalLocator, true
}

// HasAutoRenewalLocator returns a boolean if a field has been set.
func (o *Term) HasAutoRenewalLocator() bool {
	if o != nil && !IsNil(o.AutoRenewalLocator) {
		return true
	}

	return false
}

// SetAutoRenewalLocator gets a reference to the given string and assigns it to the AutoRenewalLocator field.
func (o *Term) SetAutoRenewalLocator(v string) {
	o.AutoRenewalLocator = &v
}

// GetTermNumber returns the TermNumber field value if set, zero value otherwise.
func (o *Term) GetTermNumber() string {
	if o == nil || IsNil(o.TermNumber) {
		var ret string
		return ret
	}
	return *o.TermNumber
}

// GetTermNumberOk returns a tuple with the TermNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Term) GetTermNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TermNumber) {
		return nil, false
	}
	return o.TermNumber, true
}

// HasTermNumber returns a boolean if a field has been set.
func (o *Term) HasTermNumber() bool {
	if o != nil && !IsNil(o.TermNumber) {
		return true
	}

	return false
}

// SetTermNumber gets a reference to the given string and assigns it to the TermNumber field.
func (o *Term) SetTermNumber(v string) {
	o.TermNumber = &v
}

func (o Term) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Term) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["staticLocator"] = o.StaticLocator
	toSerialize["policyLocator"] = o.PolicyLocator
	toSerialize["number"] = o.Number
	if !IsNil(o.PreviousTermLocator) {
		toSerialize["previousTermLocator"] = o.PreviousTermLocator
	}
	if !IsNil(o.SupersedesTermLocator) {
		toSerialize["supersedesTermLocator"] = o.SupersedesTermLocator
	}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	if !IsNil(o.AutoRenewalLocator) {
		toSerialize["autoRenewalLocator"] = o.AutoRenewalLocator
	}
	if !IsNil(o.TermNumber) {
		toSerialize["termNumber"] = o.TermNumber
	}
	return toSerialize, nil
}

func (o *Term) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"staticLocator",
		"policyLocator",
		"number",
		"startTime",
		"endTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerm := _Term{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTerm)

	if err != nil {
		return err
	}

	*o = Term(varTerm)

	return err
}

type NullableTerm struct {
	value *Term
	isSet bool
}

func (v NullableTerm) Get() *Term {
	return v.value
}

func (v *NullableTerm) Set(val *Term) {
	v.value = val
	v.isSet = true
}

func (v NullableTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerm(val *Term) *NullableTerm {
	return &NullableTerm{value: val, isSet: true}
}

func (v NullableTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
