/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PolicySnapshotResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicySnapshotResponse{}

// PolicySnapshotResponse struct for PolicySnapshotResponse
type PolicySnapshotResponse struct {
	Locator             string                            `json:"locator"`
	AccountLocator      string                            `json:"accountLocator"`
	ProductName         string                            `json:"productName"`
	Timezone            string                            `json:"timezone"`
	Currency            string                            `json:"currency"`
	Region              string                            `json:"region"`
	Transaction         TransactionSnapshotResponse       `json:"transaction"`
	DelinquencyPlanName *string                           `json:"delinquencyPlanName,omitempty"`
	Static              map[string]map[string]interface{} `json:"static"`
}

type _PolicySnapshotResponse PolicySnapshotResponse

// NewPolicySnapshotResponse instantiates a new PolicySnapshotResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicySnapshotResponse(locator string, accountLocator string, productName string, timezone string, currency string, region string, transaction TransactionSnapshotResponse, static map[string]map[string]interface{}) *PolicySnapshotResponse {
	this := PolicySnapshotResponse{}
	this.Locator = locator
	this.AccountLocator = accountLocator
	this.ProductName = productName
	this.Timezone = timezone
	this.Currency = currency
	this.Region = region
	this.Transaction = transaction
	this.Static = static
	return &this
}

// NewPolicySnapshotResponseWithDefaults instantiates a new PolicySnapshotResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicySnapshotResponseWithDefaults() *PolicySnapshotResponse {
	this := PolicySnapshotResponse{}
	return &this
}

// GetLocator returns the Locator field value
func (o *PolicySnapshotResponse) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *PolicySnapshotResponse) SetLocator(v string) {
	o.Locator = v
}

// GetAccountLocator returns the AccountLocator field value
func (o *PolicySnapshotResponse) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *PolicySnapshotResponse) SetAccountLocator(v string) {
	o.AccountLocator = v
}

// GetProductName returns the ProductName field value
func (o *PolicySnapshotResponse) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *PolicySnapshotResponse) SetProductName(v string) {
	o.ProductName = v
}

// GetTimezone returns the Timezone field value
func (o *PolicySnapshotResponse) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *PolicySnapshotResponse) SetTimezone(v string) {
	o.Timezone = v
}

// GetCurrency returns the Currency field value
func (o *PolicySnapshotResponse) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PolicySnapshotResponse) SetCurrency(v string) {
	o.Currency = v
}

// GetRegion returns the Region field value
func (o *PolicySnapshotResponse) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *PolicySnapshotResponse) SetRegion(v string) {
	o.Region = v
}

// GetTransaction returns the Transaction field value
func (o *PolicySnapshotResponse) GetTransaction() TransactionSnapshotResponse {
	if o == nil {
		var ret TransactionSnapshotResponse
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetTransactionOk() (*TransactionSnapshotResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *PolicySnapshotResponse) SetTransaction(v TransactionSnapshotResponse) {
	o.Transaction = v
}

// GetDelinquencyPlanName returns the DelinquencyPlanName field value if set, zero value otherwise.
func (o *PolicySnapshotResponse) GetDelinquencyPlanName() string {
	if o == nil || IsNil(o.DelinquencyPlanName) {
		var ret string
		return ret
	}
	return *o.DelinquencyPlanName
}

// GetDelinquencyPlanNameOk returns a tuple with the DelinquencyPlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetDelinquencyPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.DelinquencyPlanName) {
		return nil, false
	}
	return o.DelinquencyPlanName, true
}

// HasDelinquencyPlanName returns a boolean if a field has been set.
func (o *PolicySnapshotResponse) HasDelinquencyPlanName() bool {
	if o != nil && !IsNil(o.DelinquencyPlanName) {
		return true
	}

	return false
}

// SetDelinquencyPlanName gets a reference to the given string and assigns it to the DelinquencyPlanName field.
func (o *PolicySnapshotResponse) SetDelinquencyPlanName(v string) {
	o.DelinquencyPlanName = &v
}

// GetStatic returns the Static field value
func (o *PolicySnapshotResponse) GetStatic() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Static
}

// GetStaticOk returns a tuple with the Static field value
// and a boolean to check if the value has been set.
func (o *PolicySnapshotResponse) GetStaticOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Static, true
}

// SetStatic sets field value
func (o *PolicySnapshotResponse) SetStatic(v map[string]map[string]interface{}) {
	o.Static = v
}

func (o PolicySnapshotResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicySnapshotResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["accountLocator"] = o.AccountLocator
	toSerialize["productName"] = o.ProductName
	toSerialize["timezone"] = o.Timezone
	toSerialize["currency"] = o.Currency
	toSerialize["region"] = o.Region
	toSerialize["transaction"] = o.Transaction
	if !IsNil(o.DelinquencyPlanName) {
		toSerialize["delinquencyPlanName"] = o.DelinquencyPlanName
	}
	toSerialize["static"] = o.Static
	return toSerialize, nil
}

func (o *PolicySnapshotResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"accountLocator",
		"productName",
		"timezone",
		"currency",
		"region",
		"transaction",
		"static",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicySnapshotResponse := _PolicySnapshotResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicySnapshotResponse)

	if err != nil {
		return err
	}

	*o = PolicySnapshotResponse(varPolicySnapshotResponse)

	return err
}

type NullablePolicySnapshotResponse struct {
	value *PolicySnapshotResponse
	isSet bool
}

func (v NullablePolicySnapshotResponse) Get() *PolicySnapshotResponse {
	return v.value
}

func (v *NullablePolicySnapshotResponse) Set(val *PolicySnapshotResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicySnapshotResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicySnapshotResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicySnapshotResponse(val *PolicySnapshotResponse) *NullablePolicySnapshotResponse {
	return &NullablePolicySnapshotResponse{value: val, isSet: true}
}

func (v NullablePolicySnapshotResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicySnapshotResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
