/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DocumentSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSummary{}

// DocumentSummary struct for DocumentSummary
type DocumentSummary struct {
	Locator               string `json:"locator"`
	Name                  string `json:"name"`
	StaticName            string `json:"staticName"`
	DocumentInstanceState string `json:"documentInstanceState"`
	ReferenceType         string `json:"referenceType"`
	// Deprecated
	State string `json:"state"`
}

type _DocumentSummary DocumentSummary

// NewDocumentSummary instantiates a new DocumentSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSummary(locator string, name string, staticName string, documentInstanceState string, referenceType string, state string) *DocumentSummary {
	this := DocumentSummary{}
	this.Locator = locator
	this.Name = name
	this.StaticName = staticName
	this.DocumentInstanceState = documentInstanceState
	this.ReferenceType = referenceType
	this.State = state
	return &this
}

// NewDocumentSummaryWithDefaults instantiates a new DocumentSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSummaryWithDefaults() *DocumentSummary {
	this := DocumentSummary{}
	return &this
}

// GetLocator returns the Locator field value
func (o *DocumentSummary) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *DocumentSummary) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *DocumentSummary) SetLocator(v string) {
	o.Locator = v
}

// GetName returns the Name field value
func (o *DocumentSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentSummary) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentSummary) SetName(v string) {
	o.Name = v
}

// GetStaticName returns the StaticName field value
func (o *DocumentSummary) GetStaticName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticName
}

// GetStaticNameOk returns a tuple with the StaticName field value
// and a boolean to check if the value has been set.
func (o *DocumentSummary) GetStaticNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticName, true
}

// SetStaticName sets field value
func (o *DocumentSummary) SetStaticName(v string) {
	o.StaticName = v
}

// GetDocumentInstanceState returns the DocumentInstanceState field value
func (o *DocumentSummary) GetDocumentInstanceState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentInstanceState
}

// GetDocumentInstanceStateOk returns a tuple with the DocumentInstanceState field value
// and a boolean to check if the value has been set.
func (o *DocumentSummary) GetDocumentInstanceStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentInstanceState, true
}

// SetDocumentInstanceState sets field value
func (o *DocumentSummary) SetDocumentInstanceState(v string) {
	o.DocumentInstanceState = v
}

// GetReferenceType returns the ReferenceType field value
func (o *DocumentSummary) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *DocumentSummary) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *DocumentSummary) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetState returns the State field value
// Deprecated
func (o *DocumentSummary) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *DocumentSummary) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
// Deprecated
func (o *DocumentSummary) SetState(v string) {
	o.State = v
}

func (o DocumentSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["name"] = o.Name
	toSerialize["staticName"] = o.StaticName
	toSerialize["documentInstanceState"] = o.DocumentInstanceState
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *DocumentSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"name",
		"staticName",
		"documentInstanceState",
		"referenceType",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentSummary := _DocumentSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentSummary)

	if err != nil {
		return err
	}

	*o = DocumentSummary(varDocumentSummary)

	return err
}

type NullableDocumentSummary struct {
	value *DocumentSummary
	isSet bool
}

func (v NullableDocumentSummary) Get() *DocumentSummary {
	return v.value
}

func (v *NullableDocumentSummary) Set(val *DocumentSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSummary(val *DocumentSummary) *NullableDocumentSummary {
	return &NullableDocumentSummary{value: val, isSet: true}
}

func (v NullableDocumentSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
