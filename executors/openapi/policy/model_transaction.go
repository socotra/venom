/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	Locator                     string                   `json:"locator"`
	TransactionCategory         string                   `json:"transactionCategory"`
	TransactionState            string                   `json:"transactionState"`
	UnderwritingStatus          *string                  `json:"underwritingStatus,omitempty"`
	PolicyLocator               string                   `json:"policyLocator"`
	BaseTransactionLocator      *string                  `json:"baseTransactionLocator,omitempty"`
	AggregateTransactionLocator *string                  `json:"aggregateTransactionLocator,omitempty"`
	CreatedAt                   time.Time                `json:"createdAt"`
	CreatedBy                   string                   `json:"createdBy"`
	ValidationResult            *ValidationResult        `json:"validationResult,omitempty"`
	ChangeInstructions          []map[string]interface{} `json:"changeInstructions"`
	EffectiveTime               time.Time                `json:"effectiveTime"`
	AggregatedTransactions      []Transaction            `json:"aggregatedTransactions"`
	TermLocator                 string                   `json:"termLocator"`
	Preferences                 *Preferences             `json:"preferences,omitempty"`
	TransactionType             string                   `json:"transactionType"`
	IssuedTime                  *time.Time               `json:"issuedTime,omitempty"`
	BillingTrigger              *string                  `json:"billingTrigger,omitempty"`
	AcceptedTime                *time.Time               `json:"acceptedTime,omitempty"`
	ReapplicationOfLocator      *string                  `json:"reapplicationOfLocator,omitempty"`
	MaskingLevel                *string                  `json:"maskingLevel,omitempty"`
	AnonymizedAt                *time.Time               `json:"anonymizedAt,omitempty"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(locator string, transactionCategory string, transactionState string, policyLocator string, createdAt time.Time, createdBy string, changeInstructions []map[string]interface{}, effectiveTime time.Time, aggregatedTransactions []Transaction, termLocator string, transactionType string) *Transaction {
	this := Transaction{}
	this.Locator = locator
	this.TransactionCategory = transactionCategory
	this.TransactionState = transactionState
	this.PolicyLocator = policyLocator
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ChangeInstructions = changeInstructions
	this.EffectiveTime = effectiveTime
	this.AggregatedTransactions = aggregatedTransactions
	this.TermLocator = termLocator
	this.TransactionType = transactionType
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Transaction) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Transaction) SetLocator(v string) {
	o.Locator = v
}

// GetTransactionCategory returns the TransactionCategory field value
func (o *Transaction) GetTransactionCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionCategory
}

// GetTransactionCategoryOk returns a tuple with the TransactionCategory field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionCategory, true
}

// SetTransactionCategory sets field value
func (o *Transaction) SetTransactionCategory(v string) {
	o.TransactionCategory = v
}

// GetTransactionState returns the TransactionState field value
func (o *Transaction) GetTransactionState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionState
}

// GetTransactionStateOk returns a tuple with the TransactionState field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionState, true
}

// SetTransactionState sets field value
func (o *Transaction) SetTransactionState(v string) {
	o.TransactionState = v
}

// GetUnderwritingStatus returns the UnderwritingStatus field value if set, zero value otherwise.
func (o *Transaction) GetUnderwritingStatus() string {
	if o == nil || IsNil(o.UnderwritingStatus) {
		var ret string
		return ret
	}
	return *o.UnderwritingStatus
}

// GetUnderwritingStatusOk returns a tuple with the UnderwritingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetUnderwritingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UnderwritingStatus) {
		return nil, false
	}
	return o.UnderwritingStatus, true
}

// HasUnderwritingStatus returns a boolean if a field has been set.
func (o *Transaction) HasUnderwritingStatus() bool {
	if o != nil && !IsNil(o.UnderwritingStatus) {
		return true
	}

	return false
}

// SetUnderwritingStatus gets a reference to the given string and assigns it to the UnderwritingStatus field.
func (o *Transaction) SetUnderwritingStatus(v string) {
	o.UnderwritingStatus = &v
}

// GetPolicyLocator returns the PolicyLocator field value
func (o *Transaction) GetPolicyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetPolicyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocator, true
}

// SetPolicyLocator sets field value
func (o *Transaction) SetPolicyLocator(v string) {
	o.PolicyLocator = v
}

// GetBaseTransactionLocator returns the BaseTransactionLocator field value if set, zero value otherwise.
func (o *Transaction) GetBaseTransactionLocator() string {
	if o == nil || IsNil(o.BaseTransactionLocator) {
		var ret string
		return ret
	}
	return *o.BaseTransactionLocator
}

// GetBaseTransactionLocatorOk returns a tuple with the BaseTransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBaseTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.BaseTransactionLocator) {
		return nil, false
	}
	return o.BaseTransactionLocator, true
}

// HasBaseTransactionLocator returns a boolean if a field has been set.
func (o *Transaction) HasBaseTransactionLocator() bool {
	if o != nil && !IsNil(o.BaseTransactionLocator) {
		return true
	}

	return false
}

// SetBaseTransactionLocator gets a reference to the given string and assigns it to the BaseTransactionLocator field.
func (o *Transaction) SetBaseTransactionLocator(v string) {
	o.BaseTransactionLocator = &v
}

// GetAggregateTransactionLocator returns the AggregateTransactionLocator field value if set, zero value otherwise.
func (o *Transaction) GetAggregateTransactionLocator() string {
	if o == nil || IsNil(o.AggregateTransactionLocator) {
		var ret string
		return ret
	}
	return *o.AggregateTransactionLocator
}

// GetAggregateTransactionLocatorOk returns a tuple with the AggregateTransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAggregateTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AggregateTransactionLocator) {
		return nil, false
	}
	return o.AggregateTransactionLocator, true
}

// HasAggregateTransactionLocator returns a boolean if a field has been set.
func (o *Transaction) HasAggregateTransactionLocator() bool {
	if o != nil && !IsNil(o.AggregateTransactionLocator) {
		return true
	}

	return false
}

// SetAggregateTransactionLocator gets a reference to the given string and assigns it to the AggregateTransactionLocator field.
func (o *Transaction) SetAggregateTransactionLocator(v string) {
	o.AggregateTransactionLocator = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Transaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Transaction) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Transaction) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *Transaction) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *Transaction) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *Transaction) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

// GetChangeInstructions returns the ChangeInstructions field value
func (o *Transaction) GetChangeInstructions() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.ChangeInstructions
}

// GetChangeInstructionsOk returns a tuple with the ChangeInstructions field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetChangeInstructionsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangeInstructions, true
}

// SetChangeInstructions sets field value
func (o *Transaction) SetChangeInstructions(v []map[string]interface{}) {
	o.ChangeInstructions = v
}

// GetEffectiveTime returns the EffectiveTime field value
func (o *Transaction) GetEffectiveTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveTime
}

// GetEffectiveTimeOk returns a tuple with the EffectiveTime field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetEffectiveTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveTime, true
}

// SetEffectiveTime sets field value
func (o *Transaction) SetEffectiveTime(v time.Time) {
	o.EffectiveTime = v
}

// GetAggregatedTransactions returns the AggregatedTransactions field value
func (o *Transaction) GetAggregatedTransactions() []Transaction {
	if o == nil {
		var ret []Transaction
		return ret
	}

	return o.AggregatedTransactions
}

// GetAggregatedTransactionsOk returns a tuple with the AggregatedTransactions field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAggregatedTransactionsOk() ([]Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggregatedTransactions, true
}

// SetAggregatedTransactions sets field value
func (o *Transaction) SetAggregatedTransactions(v []Transaction) {
	o.AggregatedTransactions = v
}

// GetTermLocator returns the TermLocator field value
func (o *Transaction) GetTermLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TermLocator
}

// GetTermLocatorOk returns a tuple with the TermLocator field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTermLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermLocator, true
}

// SetTermLocator sets field value
func (o *Transaction) SetTermLocator(v string) {
	o.TermLocator = v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *Transaction) GetPreferences() Preferences {
	if o == nil || IsNil(o.Preferences) {
		var ret Preferences
		return ret
	}
	return *o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPreferencesOk() (*Preferences, bool) {
	if o == nil || IsNil(o.Preferences) {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *Transaction) HasPreferences() bool {
	if o != nil && !IsNil(o.Preferences) {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given Preferences and assigns it to the Preferences field.
func (o *Transaction) SetPreferences(v Preferences) {
	o.Preferences = &v
}

// GetTransactionType returns the TransactionType field value
func (o *Transaction) GetTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *Transaction) SetTransactionType(v string) {
	o.TransactionType = v
}

// GetIssuedTime returns the IssuedTime field value if set, zero value otherwise.
func (o *Transaction) GetIssuedTime() time.Time {
	if o == nil || IsNil(o.IssuedTime) {
		var ret time.Time
		return ret
	}
	return *o.IssuedTime
}

// GetIssuedTimeOk returns a tuple with the IssuedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIssuedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IssuedTime) {
		return nil, false
	}
	return o.IssuedTime, true
}

// HasIssuedTime returns a boolean if a field has been set.
func (o *Transaction) HasIssuedTime() bool {
	if o != nil && !IsNil(o.IssuedTime) {
		return true
	}

	return false
}

// SetIssuedTime gets a reference to the given time.Time and assigns it to the IssuedTime field.
func (o *Transaction) SetIssuedTime(v time.Time) {
	o.IssuedTime = &v
}

// GetBillingTrigger returns the BillingTrigger field value if set, zero value otherwise.
func (o *Transaction) GetBillingTrigger() string {
	if o == nil || IsNil(o.BillingTrigger) {
		var ret string
		return ret
	}
	return *o.BillingTrigger
}

// GetBillingTriggerOk returns a tuple with the BillingTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBillingTriggerOk() (*string, bool) {
	if o == nil || IsNil(o.BillingTrigger) {
		return nil, false
	}
	return o.BillingTrigger, true
}

// HasBillingTrigger returns a boolean if a field has been set.
func (o *Transaction) HasBillingTrigger() bool {
	if o != nil && !IsNil(o.BillingTrigger) {
		return true
	}

	return false
}

// SetBillingTrigger gets a reference to the given string and assigns it to the BillingTrigger field.
func (o *Transaction) SetBillingTrigger(v string) {
	o.BillingTrigger = &v
}

// GetAcceptedTime returns the AcceptedTime field value if set, zero value otherwise.
func (o *Transaction) GetAcceptedTime() time.Time {
	if o == nil || IsNil(o.AcceptedTime) {
		var ret time.Time
		return ret
	}
	return *o.AcceptedTime
}

// GetAcceptedTimeOk returns a tuple with the AcceptedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAcceptedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcceptedTime) {
		return nil, false
	}
	return o.AcceptedTime, true
}

// HasAcceptedTime returns a boolean if a field has been set.
func (o *Transaction) HasAcceptedTime() bool {
	if o != nil && !IsNil(o.AcceptedTime) {
		return true
	}

	return false
}

// SetAcceptedTime gets a reference to the given time.Time and assigns it to the AcceptedTime field.
func (o *Transaction) SetAcceptedTime(v time.Time) {
	o.AcceptedTime = &v
}

// GetReapplicationOfLocator returns the ReapplicationOfLocator field value if set, zero value otherwise.
func (o *Transaction) GetReapplicationOfLocator() string {
	if o == nil || IsNil(o.ReapplicationOfLocator) {
		var ret string
		return ret
	}
	return *o.ReapplicationOfLocator
}

// GetReapplicationOfLocatorOk returns a tuple with the ReapplicationOfLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetReapplicationOfLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ReapplicationOfLocator) {
		return nil, false
	}
	return o.ReapplicationOfLocator, true
}

// HasReapplicationOfLocator returns a boolean if a field has been set.
func (o *Transaction) HasReapplicationOfLocator() bool {
	if o != nil && !IsNil(o.ReapplicationOfLocator) {
		return true
	}

	return false
}

// SetReapplicationOfLocator gets a reference to the given string and assigns it to the ReapplicationOfLocator field.
func (o *Transaction) SetReapplicationOfLocator(v string) {
	o.ReapplicationOfLocator = &v
}

// GetMaskingLevel returns the MaskingLevel field value if set, zero value otherwise.
func (o *Transaction) GetMaskingLevel() string {
	if o == nil || IsNil(o.MaskingLevel) {
		var ret string
		return ret
	}
	return *o.MaskingLevel
}

// GetMaskingLevelOk returns a tuple with the MaskingLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMaskingLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MaskingLevel) {
		return nil, false
	}
	return o.MaskingLevel, true
}

// HasMaskingLevel returns a boolean if a field has been set.
func (o *Transaction) HasMaskingLevel() bool {
	if o != nil && !IsNil(o.MaskingLevel) {
		return true
	}

	return false
}

// SetMaskingLevel gets a reference to the given string and assigns it to the MaskingLevel field.
func (o *Transaction) SetMaskingLevel(v string) {
	o.MaskingLevel = &v
}

// GetAnonymizedAt returns the AnonymizedAt field value if set, zero value otherwise.
func (o *Transaction) GetAnonymizedAt() time.Time {
	if o == nil || IsNil(o.AnonymizedAt) {
		var ret time.Time
		return ret
	}
	return *o.AnonymizedAt
}

// GetAnonymizedAtOk returns a tuple with the AnonymizedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAnonymizedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AnonymizedAt) {
		return nil, false
	}
	return o.AnonymizedAt, true
}

// HasAnonymizedAt returns a boolean if a field has been set.
func (o *Transaction) HasAnonymizedAt() bool {
	if o != nil && !IsNil(o.AnonymizedAt) {
		return true
	}

	return false
}

// SetAnonymizedAt gets a reference to the given time.Time and assigns it to the AnonymizedAt field.
func (o *Transaction) SetAnonymizedAt(v time.Time) {
	o.AnonymizedAt = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["transactionCategory"] = o.TransactionCategory
	toSerialize["transactionState"] = o.TransactionState
	if !IsNil(o.UnderwritingStatus) {
		toSerialize["underwritingStatus"] = o.UnderwritingStatus
	}
	toSerialize["policyLocator"] = o.PolicyLocator
	if !IsNil(o.BaseTransactionLocator) {
		toSerialize["baseTransactionLocator"] = o.BaseTransactionLocator
	}
	if !IsNil(o.AggregateTransactionLocator) {
		toSerialize["aggregateTransactionLocator"] = o.AggregateTransactionLocator
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	toSerialize["changeInstructions"] = o.ChangeInstructions
	toSerialize["effectiveTime"] = o.EffectiveTime
	toSerialize["aggregatedTransactions"] = o.AggregatedTransactions
	toSerialize["termLocator"] = o.TermLocator
	if !IsNil(o.Preferences) {
		toSerialize["preferences"] = o.Preferences
	}
	toSerialize["transactionType"] = o.TransactionType
	if !IsNil(o.IssuedTime) {
		toSerialize["issuedTime"] = o.IssuedTime
	}
	if !IsNil(o.BillingTrigger) {
		toSerialize["billingTrigger"] = o.BillingTrigger
	}
	if !IsNil(o.AcceptedTime) {
		toSerialize["acceptedTime"] = o.AcceptedTime
	}
	if !IsNil(o.ReapplicationOfLocator) {
		toSerialize["reapplicationOfLocator"] = o.ReapplicationOfLocator
	}
	if !IsNil(o.MaskingLevel) {
		toSerialize["maskingLevel"] = o.MaskingLevel
	}
	if !IsNil(o.AnonymizedAt) {
		toSerialize["anonymizedAt"] = o.AnonymizedAt
	}
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"transactionCategory",
		"transactionState",
		"policyLocator",
		"createdAt",
		"createdBy",
		"changeInstructions",
		"effectiveTime",
		"aggregatedTransactions",
		"termLocator",
		"transactionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
