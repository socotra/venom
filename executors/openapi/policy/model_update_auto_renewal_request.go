/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UpdateAutoRenewalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAutoRenewalRequest{}

// UpdateAutoRenewalRequest struct for UpdateAutoRenewalRequest
type UpdateAutoRenewalRequest struct {
	RenewalTransactionType       *string    `json:"renewalTransactionType,omitempty"`
	NewTermDuration              *int32     `json:"newTermDuration,omitempty"`
	RenewalTransactionCreateTime time.Time  `json:"renewalTransactionCreateTime"`
	RenewalTransactionAcceptTime *time.Time `json:"renewalTransactionAcceptTime,omitempty"`
	RenewalTransactionIssueTime  *time.Time `json:"renewalTransactionIssueTime,omitempty"`
	RenewalTransactionLocator    *string    `json:"renewalTransactionLocator,omitempty"`
}

type _UpdateAutoRenewalRequest UpdateAutoRenewalRequest

// NewUpdateAutoRenewalRequest instantiates a new UpdateAutoRenewalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAutoRenewalRequest(renewalTransactionCreateTime time.Time) *UpdateAutoRenewalRequest {
	this := UpdateAutoRenewalRequest{}
	this.RenewalTransactionCreateTime = renewalTransactionCreateTime
	return &this
}

// NewUpdateAutoRenewalRequestWithDefaults instantiates a new UpdateAutoRenewalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAutoRenewalRequestWithDefaults() *UpdateAutoRenewalRequest {
	this := UpdateAutoRenewalRequest{}
	return &this
}

// GetRenewalTransactionType returns the RenewalTransactionType field value if set, zero value otherwise.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionType() string {
	if o == nil || IsNil(o.RenewalTransactionType) {
		var ret string
		return ret
	}
	return *o.RenewalTransactionType
}

// GetRenewalTransactionTypeOk returns a tuple with the RenewalTransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalTransactionType) {
		return nil, false
	}
	return o.RenewalTransactionType, true
}

// HasRenewalTransactionType returns a boolean if a field has been set.
func (o *UpdateAutoRenewalRequest) HasRenewalTransactionType() bool {
	if o != nil && !IsNil(o.RenewalTransactionType) {
		return true
	}

	return false
}

// SetRenewalTransactionType gets a reference to the given string and assigns it to the RenewalTransactionType field.
func (o *UpdateAutoRenewalRequest) SetRenewalTransactionType(v string) {
	o.RenewalTransactionType = &v
}

// GetNewTermDuration returns the NewTermDuration field value if set, zero value otherwise.
func (o *UpdateAutoRenewalRequest) GetNewTermDuration() int32 {
	if o == nil || IsNil(o.NewTermDuration) {
		var ret int32
		return ret
	}
	return *o.NewTermDuration
}

// GetNewTermDurationOk returns a tuple with the NewTermDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoRenewalRequest) GetNewTermDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.NewTermDuration) {
		return nil, false
	}
	return o.NewTermDuration, true
}

// HasNewTermDuration returns a boolean if a field has been set.
func (o *UpdateAutoRenewalRequest) HasNewTermDuration() bool {
	if o != nil && !IsNil(o.NewTermDuration) {
		return true
	}

	return false
}

// SetNewTermDuration gets a reference to the given int32 and assigns it to the NewTermDuration field.
func (o *UpdateAutoRenewalRequest) SetNewTermDuration(v int32) {
	o.NewTermDuration = &v
}

// GetRenewalTransactionCreateTime returns the RenewalTransactionCreateTime field value
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionCreateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RenewalTransactionCreateTime
}

// GetRenewalTransactionCreateTimeOk returns a tuple with the RenewalTransactionCreateTime field value
// and a boolean to check if the value has been set.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionCreateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenewalTransactionCreateTime, true
}

// SetRenewalTransactionCreateTime sets field value
func (o *UpdateAutoRenewalRequest) SetRenewalTransactionCreateTime(v time.Time) {
	o.RenewalTransactionCreateTime = v
}

// GetRenewalTransactionAcceptTime returns the RenewalTransactionAcceptTime field value if set, zero value otherwise.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionAcceptTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionAcceptTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionAcceptTime
}

// GetRenewalTransactionAcceptTimeOk returns a tuple with the RenewalTransactionAcceptTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionAcceptTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionAcceptTime) {
		return nil, false
	}
	return o.RenewalTransactionAcceptTime, true
}

// HasRenewalTransactionAcceptTime returns a boolean if a field has been set.
func (o *UpdateAutoRenewalRequest) HasRenewalTransactionAcceptTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionAcceptTime) {
		return true
	}

	return false
}

// SetRenewalTransactionAcceptTime gets a reference to the given time.Time and assigns it to the RenewalTransactionAcceptTime field.
func (o *UpdateAutoRenewalRequest) SetRenewalTransactionAcceptTime(v time.Time) {
	o.RenewalTransactionAcceptTime = &v
}

// GetRenewalTransactionIssueTime returns the RenewalTransactionIssueTime field value if set, zero value otherwise.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionIssueTime() time.Time {
	if o == nil || IsNil(o.RenewalTransactionIssueTime) {
		var ret time.Time
		return ret
	}
	return *o.RenewalTransactionIssueTime
}

// GetRenewalTransactionIssueTimeOk returns a tuple with the RenewalTransactionIssueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionIssueTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RenewalTransactionIssueTime) {
		return nil, false
	}
	return o.RenewalTransactionIssueTime, true
}

// HasRenewalTransactionIssueTime returns a boolean if a field has been set.
func (o *UpdateAutoRenewalRequest) HasRenewalTransactionIssueTime() bool {
	if o != nil && !IsNil(o.RenewalTransactionIssueTime) {
		return true
	}

	return false
}

// SetRenewalTransactionIssueTime gets a reference to the given time.Time and assigns it to the RenewalTransactionIssueTime field.
func (o *UpdateAutoRenewalRequest) SetRenewalTransactionIssueTime(v time.Time) {
	o.RenewalTransactionIssueTime = &v
}

// GetRenewalTransactionLocator returns the RenewalTransactionLocator field value if set, zero value otherwise.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionLocator() string {
	if o == nil || IsNil(o.RenewalTransactionLocator) {
		var ret string
		return ret
	}
	return *o.RenewalTransactionLocator
}

// GetRenewalTransactionLocatorOk returns a tuple with the RenewalTransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAutoRenewalRequest) GetRenewalTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.RenewalTransactionLocator) {
		return nil, false
	}
	return o.RenewalTransactionLocator, true
}

// HasRenewalTransactionLocator returns a boolean if a field has been set.
func (o *UpdateAutoRenewalRequest) HasRenewalTransactionLocator() bool {
	if o != nil && !IsNil(o.RenewalTransactionLocator) {
		return true
	}

	return false
}

// SetRenewalTransactionLocator gets a reference to the given string and assigns it to the RenewalTransactionLocator field.
func (o *UpdateAutoRenewalRequest) SetRenewalTransactionLocator(v string) {
	o.RenewalTransactionLocator = &v
}

func (o UpdateAutoRenewalRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAutoRenewalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RenewalTransactionType) {
		toSerialize["renewalTransactionType"] = o.RenewalTransactionType
	}
	if !IsNil(o.NewTermDuration) {
		toSerialize["newTermDuration"] = o.NewTermDuration
	}
	toSerialize["renewalTransactionCreateTime"] = o.RenewalTransactionCreateTime
	if !IsNil(o.RenewalTransactionAcceptTime) {
		toSerialize["renewalTransactionAcceptTime"] = o.RenewalTransactionAcceptTime
	}
	if !IsNil(o.RenewalTransactionIssueTime) {
		toSerialize["renewalTransactionIssueTime"] = o.RenewalTransactionIssueTime
	}
	if !IsNil(o.RenewalTransactionLocator) {
		toSerialize["renewalTransactionLocator"] = o.RenewalTransactionLocator
	}
	return toSerialize, nil
}

func (o *UpdateAutoRenewalRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"renewalTransactionCreateTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateAutoRenewalRequest := _UpdateAutoRenewalRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateAutoRenewalRequest)

	if err != nil {
		return err
	}

	*o = UpdateAutoRenewalRequest(varUpdateAutoRenewalRequest)

	return err
}

type NullableUpdateAutoRenewalRequest struct {
	value *UpdateAutoRenewalRequest
	isSet bool
}

func (v NullableUpdateAutoRenewalRequest) Get() *UpdateAutoRenewalRequest {
	return v.value
}

func (v *NullableUpdateAutoRenewalRequest) Set(val *UpdateAutoRenewalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAutoRenewalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAutoRenewalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAutoRenewalRequest(val *UpdateAutoRenewalRequest) *NullableUpdateAutoRenewalRequest {
	return &NullableUpdateAutoRenewalRequest{value: val, isSet: true}
}

func (v NullableUpdateAutoRenewalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAutoRenewalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
