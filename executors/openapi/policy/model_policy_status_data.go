/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PolicyStatusData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyStatusData{}

// PolicyStatusData struct for PolicyStatusData
type PolicyStatusData struct {
	PolicyLocator   string                       `json:"policyLocator"`
	NewStatuses     ListPageResponsePolicyStatus `json:"newStatuses"`
	RemovedStatuses ListPageResponsePolicyStatus `json:"removedStatuses"`
}

type _PolicyStatusData PolicyStatusData

// NewPolicyStatusData instantiates a new PolicyStatusData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyStatusData(policyLocator string, newStatuses ListPageResponsePolicyStatus, removedStatuses ListPageResponsePolicyStatus) *PolicyStatusData {
	this := PolicyStatusData{}
	this.PolicyLocator = policyLocator
	this.NewStatuses = newStatuses
	this.RemovedStatuses = removedStatuses
	return &this
}

// NewPolicyStatusDataWithDefaults instantiates a new PolicyStatusData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyStatusDataWithDefaults() *PolicyStatusData {
	this := PolicyStatusData{}
	return &this
}

// GetPolicyLocator returns the PolicyLocator field value
func (o *PolicyStatusData) GetPolicyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value
// and a boolean to check if the value has been set.
func (o *PolicyStatusData) GetPolicyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocator, true
}

// SetPolicyLocator sets field value
func (o *PolicyStatusData) SetPolicyLocator(v string) {
	o.PolicyLocator = v
}

// GetNewStatuses returns the NewStatuses field value
func (o *PolicyStatusData) GetNewStatuses() ListPageResponsePolicyStatus {
	if o == nil {
		var ret ListPageResponsePolicyStatus
		return ret
	}

	return o.NewStatuses
}

// GetNewStatusesOk returns a tuple with the NewStatuses field value
// and a boolean to check if the value has been set.
func (o *PolicyStatusData) GetNewStatusesOk() (*ListPageResponsePolicyStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewStatuses, true
}

// SetNewStatuses sets field value
func (o *PolicyStatusData) SetNewStatuses(v ListPageResponsePolicyStatus) {
	o.NewStatuses = v
}

// GetRemovedStatuses returns the RemovedStatuses field value
func (o *PolicyStatusData) GetRemovedStatuses() ListPageResponsePolicyStatus {
	if o == nil {
		var ret ListPageResponsePolicyStatus
		return ret
	}

	return o.RemovedStatuses
}

// GetRemovedStatusesOk returns a tuple with the RemovedStatuses field value
// and a boolean to check if the value has been set.
func (o *PolicyStatusData) GetRemovedStatusesOk() (*ListPageResponsePolicyStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemovedStatuses, true
}

// SetRemovedStatuses sets field value
func (o *PolicyStatusData) SetRemovedStatuses(v ListPageResponsePolicyStatus) {
	o.RemovedStatuses = v
}

func (o PolicyStatusData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyStatusData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policyLocator"] = o.PolicyLocator
	toSerialize["newStatuses"] = o.NewStatuses
	toSerialize["removedStatuses"] = o.RemovedStatuses
	return toSerialize, nil
}

func (o *PolicyStatusData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policyLocator",
		"newStatuses",
		"removedStatuses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyStatusData := _PolicyStatusData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyStatusData)

	if err != nil {
		return err
	}

	*o = PolicyStatusData(varPolicyStatusData)

	return err
}

type NullablePolicyStatusData struct {
	value *PolicyStatusData
	isSet bool
}

func (v NullablePolicyStatusData) Get() *PolicyStatusData {
	return v.value
}

func (v *NullablePolicyStatusData) Set(val *PolicyStatusData) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyStatusData) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyStatusData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyStatusData(val *PolicyStatusData) *NullablePolicyStatusData {
	return &NullablePolicyStatusData{value: val, isSet: true}
}

func (v NullablePolicyStatusData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyStatusData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
