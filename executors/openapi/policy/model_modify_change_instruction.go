/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ModifyChangeInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyChangeInstruction{}

// ModifyChangeInstruction struct for ModifyChangeInstruction
type ModifyChangeInstruction struct {
	ChangeInstruction
	Locator             string                            `json:"locator"`
	Action              string                            `json:"action"`
	StaticLocator       string                            `json:"staticLocator"`
	SetData             map[string]map[string]interface{} `json:"setData"`
	RemoveData          map[string]map[string]interface{} `json:"removeData"`
	SetCoverageTerms    map[string]map[string]interface{} `json:"setCoverageTerms"`
	RemoveCoverageTerms map[string]map[string]interface{} `json:"removeCoverageTerms"`
}

type _ModifyChangeInstruction ModifyChangeInstruction

// NewModifyChangeInstruction instantiates a new ModifyChangeInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyChangeInstruction(locator string, action string, staticLocator string, setData map[string]map[string]interface{}, removeData map[string]map[string]interface{}, setCoverageTerms map[string]map[string]interface{}, removeCoverageTerms map[string]map[string]interface{}) *ModifyChangeInstruction {
	this := ModifyChangeInstruction{}
	this.Action = action
	this.Locator = locator
	this.StaticLocator = staticLocator
	this.SetData = setData
	this.RemoveData = removeData
	this.SetCoverageTerms = setCoverageTerms
	this.RemoveCoverageTerms = removeCoverageTerms
	return &this
}

// NewModifyChangeInstructionWithDefaults instantiates a new ModifyChangeInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyChangeInstructionWithDefaults() *ModifyChangeInstruction {
	this := ModifyChangeInstruction{}
	return &this
}

// GetLocator returns the Locator field value
func (o *ModifyChangeInstruction) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *ModifyChangeInstruction) SetLocator(v string) {
	o.Locator = v
}

// GetAction returns the Action field value
func (o *ModifyChangeInstruction) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ModifyChangeInstruction) SetAction(v string) {
	o.Action = v
}

// GetStaticLocator returns the StaticLocator field value
func (o *ModifyChangeInstruction) GetStaticLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticLocator
}

// GetStaticLocatorOk returns a tuple with the StaticLocator field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetStaticLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticLocator, true
}

// SetStaticLocator sets field value
func (o *ModifyChangeInstruction) SetStaticLocator(v string) {
	o.StaticLocator = v
}

// GetSetData returns the SetData field value
func (o *ModifyChangeInstruction) GetSetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SetData
}

// GetSetDataOk returns a tuple with the SetData field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetSetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SetData, true
}

// SetSetData sets field value
func (o *ModifyChangeInstruction) SetSetData(v map[string]map[string]interface{}) {
	o.SetData = v
}

// GetRemoveData returns the RemoveData field value
func (o *ModifyChangeInstruction) GetRemoveData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RemoveData
}

// GetRemoveDataOk returns a tuple with the RemoveData field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetRemoveDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RemoveData, true
}

// SetRemoveData sets field value
func (o *ModifyChangeInstruction) SetRemoveData(v map[string]map[string]interface{}) {
	o.RemoveData = v
}

// GetSetCoverageTerms returns the SetCoverageTerms field value
func (o *ModifyChangeInstruction) GetSetCoverageTerms() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SetCoverageTerms
}

// GetSetCoverageTermsOk returns a tuple with the SetCoverageTerms field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetSetCoverageTermsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SetCoverageTerms, true
}

// SetSetCoverageTerms sets field value
func (o *ModifyChangeInstruction) SetSetCoverageTerms(v map[string]map[string]interface{}) {
	o.SetCoverageTerms = v
}

// GetRemoveCoverageTerms returns the RemoveCoverageTerms field value
func (o *ModifyChangeInstruction) GetRemoveCoverageTerms() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RemoveCoverageTerms
}

// GetRemoveCoverageTermsOk returns a tuple with the RemoveCoverageTerms field value
// and a boolean to check if the value has been set.
func (o *ModifyChangeInstruction) GetRemoveCoverageTermsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RemoveCoverageTerms, true
}

// SetRemoveCoverageTerms sets field value
func (o *ModifyChangeInstruction) SetRemoveCoverageTerms(v map[string]map[string]interface{}) {
	o.RemoveCoverageTerms = v
}

func (o ModifyChangeInstruction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyChangeInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["action"] = o.Action
	toSerialize["staticLocator"] = o.StaticLocator
	toSerialize["setData"] = o.SetData
	toSerialize["removeData"] = o.RemoveData
	toSerialize["setCoverageTerms"] = o.SetCoverageTerms
	toSerialize["removeCoverageTerms"] = o.RemoveCoverageTerms
	return toSerialize, nil
}

func (o *ModifyChangeInstruction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"action",
		"staticLocator",
		"setData",
		"removeData",
		"setCoverageTerms",
		"removeCoverageTerms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyChangeInstruction := _ModifyChangeInstruction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyChangeInstruction)

	if err != nil {
		return err
	}

	*o = ModifyChangeInstruction(varModifyChangeInstruction)

	return err
}

type NullableModifyChangeInstruction struct {
	value *ModifyChangeInstruction
	isSet bool
}

func (v NullableModifyChangeInstruction) Get() *ModifyChangeInstruction {
	return v.value
}

func (v *NullableModifyChangeInstruction) Set(val *ModifyChangeInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyChangeInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyChangeInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyChangeInstruction(val *ModifyChangeInstruction) *NullableModifyChangeInstruction {
	return &NullableModifyChangeInstruction{value: val, isSet: true}
}

func (v NullableModifyChangeInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyChangeInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
