/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Element type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Element{}

// Element struct for Element
type Element struct {
	Type                  string                            `json:"type"`
	Locator               string                            `json:"locator"`
	ParentLocator         string                            `json:"parentLocator"`
	Elements              []Element                         `json:"elements"`
	CoverageTerms         map[string]map[string]interface{} `json:"coverageTerms"`
	Data                  map[string]map[string]interface{} `json:"data"`
	StaticLocator         string                            `json:"staticLocator"`
	OriginalEffectiveTime *time.Time                        `json:"originalEffectiveTime,omitempty"`
	Category              *string                           `json:"category,omitempty"`
}

type _Element Element

// NewElement instantiates a new Element object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElement(type_ string, locator string, parentLocator string, elements []Element, coverageTerms map[string]map[string]interface{}, data map[string]map[string]interface{}, staticLocator string) *Element {
	this := Element{}
	this.Type = type_
	this.Locator = locator
	this.ParentLocator = parentLocator
	this.Elements = elements
	this.CoverageTerms = coverageTerms
	this.Data = data
	this.StaticLocator = staticLocator
	return &this
}

// NewElementWithDefaults instantiates a new Element object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementWithDefaults() *Element {
	this := Element{}
	return &this
}

// GetType returns the Type field value
func (o *Element) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Element) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Element) SetType(v string) {
	o.Type = v
}

// GetLocator returns the Locator field value
func (o *Element) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Element) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Element) SetLocator(v string) {
	o.Locator = v
}

// GetParentLocator returns the ParentLocator field value
func (o *Element) GetParentLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentLocator
}

// GetParentLocatorOk returns a tuple with the ParentLocator field value
// and a boolean to check if the value has been set.
func (o *Element) GetParentLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentLocator, true
}

// SetParentLocator sets field value
func (o *Element) SetParentLocator(v string) {
	o.ParentLocator = v
}

// GetElements returns the Elements field value
func (o *Element) GetElements() []Element {
	if o == nil {
		var ret []Element
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *Element) GetElementsOk() ([]Element, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *Element) SetElements(v []Element) {
	o.Elements = v
}

// GetCoverageTerms returns the CoverageTerms field value
func (o *Element) GetCoverageTerms() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.CoverageTerms
}

// GetCoverageTermsOk returns a tuple with the CoverageTerms field value
// and a boolean to check if the value has been set.
func (o *Element) GetCoverageTermsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.CoverageTerms, true
}

// SetCoverageTerms sets field value
func (o *Element) SetCoverageTerms(v map[string]map[string]interface{}) {
	o.CoverageTerms = v
}

// GetData returns the Data field value
func (o *Element) GetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Element) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Element) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetStaticLocator returns the StaticLocator field value
func (o *Element) GetStaticLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticLocator
}

// GetStaticLocatorOk returns a tuple with the StaticLocator field value
// and a boolean to check if the value has been set.
func (o *Element) GetStaticLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticLocator, true
}

// SetStaticLocator sets field value
func (o *Element) SetStaticLocator(v string) {
	o.StaticLocator = v
}

// GetOriginalEffectiveTime returns the OriginalEffectiveTime field value if set, zero value otherwise.
func (o *Element) GetOriginalEffectiveTime() time.Time {
	if o == nil || IsNil(o.OriginalEffectiveTime) {
		var ret time.Time
		return ret
	}
	return *o.OriginalEffectiveTime
}

// GetOriginalEffectiveTimeOk returns a tuple with the OriginalEffectiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Element) GetOriginalEffectiveTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OriginalEffectiveTime) {
		return nil, false
	}
	return o.OriginalEffectiveTime, true
}

// HasOriginalEffectiveTime returns a boolean if a field has been set.
func (o *Element) HasOriginalEffectiveTime() bool {
	if o != nil && !IsNil(o.OriginalEffectiveTime) {
		return true
	}

	return false
}

// SetOriginalEffectiveTime gets a reference to the given time.Time and assigns it to the OriginalEffectiveTime field.
func (o *Element) SetOriginalEffectiveTime(v time.Time) {
	o.OriginalEffectiveTime = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Element) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Element) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Element) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Element) SetCategory(v string) {
	o.Category = &v
}

func (o Element) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Element) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["locator"] = o.Locator
	toSerialize["parentLocator"] = o.ParentLocator
	toSerialize["elements"] = o.Elements
	toSerialize["coverageTerms"] = o.CoverageTerms
	toSerialize["data"] = o.Data
	toSerialize["staticLocator"] = o.StaticLocator
	if !IsNil(o.OriginalEffectiveTime) {
		toSerialize["originalEffectiveTime"] = o.OriginalEffectiveTime
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	return toSerialize, nil
}

func (o *Element) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"locator",
		"parentLocator",
		"elements",
		"coverageTerms",
		"data",
		"staticLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varElement := _Element{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varElement)

	if err != nil {
		return err
	}

	*o = Element(varElement)

	return err
}

type NullableElement struct {
	value *Element
	isSet bool
}

func (v NullableElement) Get() *Element {
	return v.value
}

func (v *NullableElement) Set(val *Element) {
	v.value = val
	v.isSet = true
}

func (v NullableElement) IsSet() bool {
	return v.isSet
}

func (v *NullableElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElement(val *Element) *NullableElement {
	return &NullableElement{value: val, isSet: true}
}

func (v NullableElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
