/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UnderwritingFlagResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnderwritingFlagResponse{}

// UnderwritingFlagResponse struct for UnderwritingFlagResponse
type UnderwritingFlagResponse struct {
	Locator          string    `json:"locator"`
	Level            string    `json:"level"`
	ReferenceType    string    `json:"referenceType"`
	ReferenceLocator string    `json:"referenceLocator"`
	Note             string    `json:"note"`
	Tag              string    `json:"tag"`
	ElementLocator   string    `json:"elementLocator"`
	CreatedBy        string    `json:"createdBy"`
	CreatedTime      time.Time `json:"createdTime"`
	ClearedBy        string    `json:"clearedBy"`
	ClearedTime      time.Time `json:"clearedTime"`
}

type _UnderwritingFlagResponse UnderwritingFlagResponse

// NewUnderwritingFlagResponse instantiates a new UnderwritingFlagResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnderwritingFlagResponse(locator string, level string, referenceType string, referenceLocator string, note string, tag string, elementLocator string, createdBy string, createdTime time.Time, clearedBy string, clearedTime time.Time) *UnderwritingFlagResponse {
	this := UnderwritingFlagResponse{}
	this.Locator = locator
	this.Level = level
	this.ReferenceType = referenceType
	this.ReferenceLocator = referenceLocator
	this.Note = note
	this.Tag = tag
	this.ElementLocator = elementLocator
	this.CreatedBy = createdBy
	this.CreatedTime = createdTime
	this.ClearedBy = clearedBy
	this.ClearedTime = clearedTime
	return &this
}

// NewUnderwritingFlagResponseWithDefaults instantiates a new UnderwritingFlagResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnderwritingFlagResponseWithDefaults() *UnderwritingFlagResponse {
	this := UnderwritingFlagResponse{}
	return &this
}

// GetLocator returns the Locator field value
func (o *UnderwritingFlagResponse) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *UnderwritingFlagResponse) SetLocator(v string) {
	o.Locator = v
}

// GetLevel returns the Level field value
func (o *UnderwritingFlagResponse) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *UnderwritingFlagResponse) SetLevel(v string) {
	o.Level = v
}

// GetReferenceType returns the ReferenceType field value
func (o *UnderwritingFlagResponse) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *UnderwritingFlagResponse) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *UnderwritingFlagResponse) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *UnderwritingFlagResponse) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

// GetNote returns the Note field value
func (o *UnderwritingFlagResponse) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *UnderwritingFlagResponse) SetNote(v string) {
	o.Note = v
}

// GetTag returns the Tag field value
func (o *UnderwritingFlagResponse) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *UnderwritingFlagResponse) SetTag(v string) {
	o.Tag = v
}

// GetElementLocator returns the ElementLocator field value
func (o *UnderwritingFlagResponse) GetElementLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementLocator
}

// GetElementLocatorOk returns a tuple with the ElementLocator field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetElementLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementLocator, true
}

// SetElementLocator sets field value
func (o *UnderwritingFlagResponse) SetElementLocator(v string) {
	o.ElementLocator = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *UnderwritingFlagResponse) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *UnderwritingFlagResponse) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *UnderwritingFlagResponse) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *UnderwritingFlagResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetClearedBy returns the ClearedBy field value
func (o *UnderwritingFlagResponse) GetClearedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClearedBy
}

// GetClearedByOk returns a tuple with the ClearedBy field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetClearedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClearedBy, true
}

// SetClearedBy sets field value
func (o *UnderwritingFlagResponse) SetClearedBy(v string) {
	o.ClearedBy = v
}

// GetClearedTime returns the ClearedTime field value
func (o *UnderwritingFlagResponse) GetClearedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ClearedTime
}

// GetClearedTimeOk returns a tuple with the ClearedTime field value
// and a boolean to check if the value has been set.
func (o *UnderwritingFlagResponse) GetClearedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClearedTime, true
}

// SetClearedTime sets field value
func (o *UnderwritingFlagResponse) SetClearedTime(v time.Time) {
	o.ClearedTime = v
}

func (o UnderwritingFlagResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnderwritingFlagResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["level"] = o.Level
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["referenceLocator"] = o.ReferenceLocator
	toSerialize["note"] = o.Note
	toSerialize["tag"] = o.Tag
	toSerialize["elementLocator"] = o.ElementLocator
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdTime"] = o.CreatedTime
	toSerialize["clearedBy"] = o.ClearedBy
	toSerialize["clearedTime"] = o.ClearedTime
	return toSerialize, nil
}

func (o *UnderwritingFlagResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"level",
		"referenceType",
		"referenceLocator",
		"note",
		"tag",
		"elementLocator",
		"createdBy",
		"createdTime",
		"clearedBy",
		"clearedTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnderwritingFlagResponse := _UnderwritingFlagResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnderwritingFlagResponse)

	if err != nil {
		return err
	}

	*o = UnderwritingFlagResponse(varUnderwritingFlagResponse)

	return err
}

type NullableUnderwritingFlagResponse struct {
	value *UnderwritingFlagResponse
	isSet bool
}

func (v NullableUnderwritingFlagResponse) Get() *UnderwritingFlagResponse {
	return v.value
}

func (v *NullableUnderwritingFlagResponse) Set(val *UnderwritingFlagResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUnderwritingFlagResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUnderwritingFlagResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnderwritingFlagResponse(val *UnderwritingFlagResponse) *NullableUnderwritingFlagResponse {
	return &NullableUnderwritingFlagResponse{value: val, isSet: true}
}

func (v NullableUnderwritingFlagResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnderwritingFlagResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
