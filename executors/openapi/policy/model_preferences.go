/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"encoding/json"
)

// checks if the Preferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Preferences{}

// Preferences struct for Preferences
type Preferences struct {
	InstallmentPreferences *InstallmentPreferences `json:"installmentPreferences,omitempty"`
	// Deprecated
	BillingPreferences *BillingPreferences `json:"billingPreferences,omitempty"`
}

// NewPreferences instantiates a new Preferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferences() *Preferences {
	this := Preferences{}
	return &this
}

// NewPreferencesWithDefaults instantiates a new Preferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferencesWithDefaults() *Preferences {
	this := Preferences{}
	return &this
}

// GetInstallmentPreferences returns the InstallmentPreferences field value if set, zero value otherwise.
func (o *Preferences) GetInstallmentPreferences() InstallmentPreferences {
	if o == nil || IsNil(o.InstallmentPreferences) {
		var ret InstallmentPreferences
		return ret
	}
	return *o.InstallmentPreferences
}

// GetInstallmentPreferencesOk returns a tuple with the InstallmentPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetInstallmentPreferencesOk() (*InstallmentPreferences, bool) {
	if o == nil || IsNil(o.InstallmentPreferences) {
		return nil, false
	}
	return o.InstallmentPreferences, true
}

// HasInstallmentPreferences returns a boolean if a field has been set.
func (o *Preferences) HasInstallmentPreferences() bool {
	if o != nil && !IsNil(o.InstallmentPreferences) {
		return true
	}

	return false
}

// SetInstallmentPreferences gets a reference to the given InstallmentPreferences and assigns it to the InstallmentPreferences field.
func (o *Preferences) SetInstallmentPreferences(v InstallmentPreferences) {
	o.InstallmentPreferences = &v
}

// GetBillingPreferences returns the BillingPreferences field value if set, zero value otherwise.
// Deprecated
func (o *Preferences) GetBillingPreferences() BillingPreferences {
	if o == nil || IsNil(o.BillingPreferences) {
		var ret BillingPreferences
		return ret
	}
	return *o.BillingPreferences
}

// GetBillingPreferencesOk returns a tuple with the BillingPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Preferences) GetBillingPreferencesOk() (*BillingPreferences, bool) {
	if o == nil || IsNil(o.BillingPreferences) {
		return nil, false
	}
	return o.BillingPreferences, true
}

// HasBillingPreferences returns a boolean if a field has been set.
func (o *Preferences) HasBillingPreferences() bool {
	if o != nil && !IsNil(o.BillingPreferences) {
		return true
	}

	return false
}

// SetBillingPreferences gets a reference to the given BillingPreferences and assigns it to the BillingPreferences field.
// Deprecated
func (o *Preferences) SetBillingPreferences(v BillingPreferences) {
	o.BillingPreferences = &v
}

func (o Preferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Preferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstallmentPreferences) {
		toSerialize["installmentPreferences"] = o.InstallmentPreferences
	}
	if !IsNil(o.BillingPreferences) {
		toSerialize["billingPreferences"] = o.BillingPreferences
	}
	return toSerialize, nil
}

type NullablePreferences struct {
	value *Preferences
	isSet bool
}

func (v NullablePreferences) Get() *Preferences {
	return v.value
}

func (v *NullablePreferences) Set(val *Preferences) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferences) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferences(val *Preferences) *NullablePreferences {
	return &NullablePreferences{value: val, isSet: true}
}

func (v NullablePreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
