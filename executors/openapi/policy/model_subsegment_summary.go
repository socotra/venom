/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SubsegmentSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubsegmentSummary{}

// SubsegmentSummary struct for SubsegmentSummary
type SubsegmentSummary struct {
	Locator         string            `json:"locator"`
	Type            string            `json:"type"`
	BasedOn         string            `json:"basedOn"`
	StartTime       time.Time         `json:"startTime"`
	EndTime         time.Time         `json:"endTime"`
	Duration        float32           `json:"duration"`
	Elements        []ElementSummary  `json:"elements"`
	DocumentSummary []DocumentSummary `json:"documentSummary"`
}

type _SubsegmentSummary SubsegmentSummary

// NewSubsegmentSummary instantiates a new SubsegmentSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubsegmentSummary(locator string, type_ string, basedOn string, startTime time.Time, endTime time.Time, duration float32, elements []ElementSummary, documentSummary []DocumentSummary) *SubsegmentSummary {
	this := SubsegmentSummary{}
	this.Locator = locator
	this.Type = type_
	this.BasedOn = basedOn
	this.StartTime = startTime
	this.EndTime = endTime
	this.Duration = duration
	this.Elements = elements
	this.DocumentSummary = documentSummary
	return &this
}

// NewSubsegmentSummaryWithDefaults instantiates a new SubsegmentSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubsegmentSummaryWithDefaults() *SubsegmentSummary {
	this := SubsegmentSummary{}
	return &this
}

// GetLocator returns the Locator field value
func (o *SubsegmentSummary) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *SubsegmentSummary) SetLocator(v string) {
	o.Locator = v
}

// GetType returns the Type field value
func (o *SubsegmentSummary) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SubsegmentSummary) SetType(v string) {
	o.Type = v
}

// GetBasedOn returns the BasedOn field value
func (o *SubsegmentSummary) GetBasedOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetBasedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasedOn, true
}

// SetBasedOn sets field value
func (o *SubsegmentSummary) SetBasedOn(v string) {
	o.BasedOn = v
}

// GetStartTime returns the StartTime field value
func (o *SubsegmentSummary) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *SubsegmentSummary) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *SubsegmentSummary) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *SubsegmentSummary) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetDuration returns the Duration field value
func (o *SubsegmentSummary) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SubsegmentSummary) SetDuration(v float32) {
	o.Duration = v
}

// GetElements returns the Elements field value
func (o *SubsegmentSummary) GetElements() []ElementSummary {
	if o == nil {
		var ret []ElementSummary
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetElementsOk() ([]ElementSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *SubsegmentSummary) SetElements(v []ElementSummary) {
	o.Elements = v
}

// GetDocumentSummary returns the DocumentSummary field value
func (o *SubsegmentSummary) GetDocumentSummary() []DocumentSummary {
	if o == nil {
		var ret []DocumentSummary
		return ret
	}

	return o.DocumentSummary
}

// GetDocumentSummaryOk returns a tuple with the DocumentSummary field value
// and a boolean to check if the value has been set.
func (o *SubsegmentSummary) GetDocumentSummaryOk() ([]DocumentSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentSummary, true
}

// SetDocumentSummary sets field value
func (o *SubsegmentSummary) SetDocumentSummary(v []DocumentSummary) {
	o.DocumentSummary = v
}

func (o SubsegmentSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubsegmentSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["type"] = o.Type
	toSerialize["basedOn"] = o.BasedOn
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["duration"] = o.Duration
	toSerialize["elements"] = o.Elements
	toSerialize["documentSummary"] = o.DocumentSummary
	return toSerialize, nil
}

func (o *SubsegmentSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"type",
		"basedOn",
		"startTime",
		"endTime",
		"duration",
		"elements",
		"documentSummary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubsegmentSummary := _SubsegmentSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubsegmentSummary)

	if err != nil {
		return err
	}

	*o = SubsegmentSummary(varSubsegmentSummary)

	return err
}

type NullableSubsegmentSummary struct {
	value *SubsegmentSummary
	isSet bool
}

func (v NullableSubsegmentSummary) Get() *SubsegmentSummary {
	return v.value
}

func (v *NullableSubsegmentSummary) Set(val *SubsegmentSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSubsegmentSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSubsegmentSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubsegmentSummary(val *SubsegmentSummary) *NullableSubsegmentSummary {
	return &NullableSubsegmentSummary{value: val, isSet: true}
}

func (v NullableSubsegmentSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubsegmentSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
