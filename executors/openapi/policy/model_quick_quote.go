/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the QuickQuote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickQuote{}

// QuickQuote struct for QuickQuote
type QuickQuote struct {
	Locator          string            `json:"locator"`
	QuickQuoteState  string            `json:"quickQuoteState"`
	ProductName      string            `json:"productName"`
	AccountLocator   *string           `json:"accountLocator,omitempty"`
	StartTime        *time.Time        `json:"startTime,omitempty"`
	EndTime          *time.Time        `json:"endTime,omitempty"`
	Duration         *float32          `json:"duration,omitempty"`
	ExpirationTime   *time.Time        `json:"expirationTime,omitempty"`
	Timezone         *string           `json:"timezone,omitempty"`
	Currency         *string           `json:"currency,omitempty"`
	DurationBasis    *string           `json:"durationBasis,omitempty"`
	GroupLocator     string            `json:"groupLocator"`
	Element          Element           `json:"element"`
	ValidationResult *ValidationResult `json:"validationResult,omitempty"`
	Contacts         []ContactRoles    `json:"contacts"`
}

type _QuickQuote QuickQuote

// NewQuickQuote instantiates a new QuickQuote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickQuote(locator string, quickQuoteState string, productName string, groupLocator string, element Element, contacts []ContactRoles) *QuickQuote {
	this := QuickQuote{}
	this.Locator = locator
	this.QuickQuoteState = quickQuoteState
	this.ProductName = productName
	this.GroupLocator = groupLocator
	this.Element = element
	this.Contacts = contacts
	return &this
}

// NewQuickQuoteWithDefaults instantiates a new QuickQuote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickQuoteWithDefaults() *QuickQuote {
	this := QuickQuote{}
	return &this
}

// GetLocator returns the Locator field value
func (o *QuickQuote) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *QuickQuote) SetLocator(v string) {
	o.Locator = v
}

// GetQuickQuoteState returns the QuickQuoteState field value
func (o *QuickQuote) GetQuickQuoteState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuickQuoteState
}

// GetQuickQuoteStateOk returns a tuple with the QuickQuoteState field value
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetQuickQuoteStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuickQuoteState, true
}

// SetQuickQuoteState sets field value
func (o *QuickQuote) SetQuickQuoteState(v string) {
	o.QuickQuoteState = v
}

// GetProductName returns the ProductName field value
func (o *QuickQuote) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *QuickQuote) SetProductName(v string) {
	o.ProductName = v
}

// GetAccountLocator returns the AccountLocator field value if set, zero value otherwise.
func (o *QuickQuote) GetAccountLocator() string {
	if o == nil || IsNil(o.AccountLocator) {
		var ret string
		return ret
	}
	return *o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetAccountLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AccountLocator) {
		return nil, false
	}
	return o.AccountLocator, true
}

// HasAccountLocator returns a boolean if a field has been set.
func (o *QuickQuote) HasAccountLocator() bool {
	if o != nil && !IsNil(o.AccountLocator) {
		return true
	}

	return false
}

// SetAccountLocator gets a reference to the given string and assigns it to the AccountLocator field.
func (o *QuickQuote) SetAccountLocator(v string) {
	o.AccountLocator = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *QuickQuote) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *QuickQuote) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *QuickQuote) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *QuickQuote) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *QuickQuote) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *QuickQuote) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *QuickQuote) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *QuickQuote) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *QuickQuote) SetDuration(v float32) {
	o.Duration = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *QuickQuote) GetExpirationTime() time.Time {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetExpirationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *QuickQuote) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given time.Time and assigns it to the ExpirationTime field.
func (o *QuickQuote) SetExpirationTime(v time.Time) {
	o.ExpirationTime = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *QuickQuote) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *QuickQuote) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *QuickQuote) SetTimezone(v string) {
	o.Timezone = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *QuickQuote) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *QuickQuote) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *QuickQuote) SetCurrency(v string) {
	o.Currency = &v
}

// GetDurationBasis returns the DurationBasis field value if set, zero value otherwise.
func (o *QuickQuote) GetDurationBasis() string {
	if o == nil || IsNil(o.DurationBasis) {
		var ret string
		return ret
	}
	return *o.DurationBasis
}

// GetDurationBasisOk returns a tuple with the DurationBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetDurationBasisOk() (*string, bool) {
	if o == nil || IsNil(o.DurationBasis) {
		return nil, false
	}
	return o.DurationBasis, true
}

// HasDurationBasis returns a boolean if a field has been set.
func (o *QuickQuote) HasDurationBasis() bool {
	if o != nil && !IsNil(o.DurationBasis) {
		return true
	}

	return false
}

// SetDurationBasis gets a reference to the given string and assigns it to the DurationBasis field.
func (o *QuickQuote) SetDurationBasis(v string) {
	o.DurationBasis = &v
}

// GetGroupLocator returns the GroupLocator field value
func (o *QuickQuote) GetGroupLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupLocator
}

// GetGroupLocatorOk returns a tuple with the GroupLocator field value
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetGroupLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupLocator, true
}

// SetGroupLocator sets field value
func (o *QuickQuote) SetGroupLocator(v string) {
	o.GroupLocator = v
}

// GetElement returns the Element field value
func (o *QuickQuote) GetElement() Element {
	if o == nil {
		var ret Element
		return ret
	}

	return o.Element
}

// GetElementOk returns a tuple with the Element field value
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetElementOk() (*Element, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Element, true
}

// SetElement sets field value
func (o *QuickQuote) SetElement(v Element) {
	o.Element = v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *QuickQuote) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *QuickQuote) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *QuickQuote) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

// GetContacts returns the Contacts field value
func (o *QuickQuote) GetContacts() []ContactRoles {
	if o == nil {
		var ret []ContactRoles
		return ret
	}

	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value
// and a boolean to check if the value has been set.
func (o *QuickQuote) GetContactsOk() ([]ContactRoles, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contacts, true
}

// SetContacts sets field value
func (o *QuickQuote) SetContacts(v []ContactRoles) {
	o.Contacts = v
}

func (o QuickQuote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickQuote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["quickQuoteState"] = o.QuickQuoteState
	toSerialize["productName"] = o.ProductName
	if !IsNil(o.AccountLocator) {
		toSerialize["accountLocator"] = o.AccountLocator
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expirationTime"] = o.ExpirationTime
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DurationBasis) {
		toSerialize["durationBasis"] = o.DurationBasis
	}
	toSerialize["groupLocator"] = o.GroupLocator
	toSerialize["element"] = o.Element
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	toSerialize["contacts"] = o.Contacts
	return toSerialize, nil
}

func (o *QuickQuote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"quickQuoteState",
		"productName",
		"groupLocator",
		"element",
		"contacts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickQuote := _QuickQuote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuickQuote)

	if err != nil {
		return err
	}

	*o = QuickQuote(varQuickQuote)

	return err
}

type NullableQuickQuote struct {
	value *QuickQuote
	isSet bool
}

func (v NullableQuickQuote) Get() *QuickQuote {
	return v.value
}

func (v *NullableQuickQuote) Set(val *QuickQuote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickQuote(val *QuickQuote) *NullableQuickQuote {
	return &NullableQuickQuote{value: val, isSet: true}
}

func (v NullableQuickQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
