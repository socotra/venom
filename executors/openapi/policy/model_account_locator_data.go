/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccountLocatorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountLocatorData{}

// AccountLocatorData struct for AccountLocatorData
type AccountLocatorData struct {
	AccountLocator string `json:"accountLocator"`
}

type _AccountLocatorData AccountLocatorData

// NewAccountLocatorData instantiates a new AccountLocatorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountLocatorData(accountLocator string) *AccountLocatorData {
	this := AccountLocatorData{}
	this.AccountLocator = accountLocator
	return &this
}

// NewAccountLocatorDataWithDefaults instantiates a new AccountLocatorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountLocatorDataWithDefaults() *AccountLocatorData {
	this := AccountLocatorData{}
	return &this
}

// GetAccountLocator returns the AccountLocator field value
func (o *AccountLocatorData) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *AccountLocatorData) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *AccountLocatorData) SetAccountLocator(v string) {
	o.AccountLocator = v
}

func (o AccountLocatorData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountLocatorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountLocator"] = o.AccountLocator
	return toSerialize, nil
}

func (o *AccountLocatorData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountLocatorData := _AccountLocatorData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountLocatorData)

	if err != nil {
		return err
	}

	*o = AccountLocatorData(varAccountLocatorData)

	return err
}

type NullableAccountLocatorData struct {
	value *AccountLocatorData
	isSet bool
}

func (v NullableAccountLocatorData) Get() *AccountLocatorData {
	return v.value
}

func (v *NullableAccountLocatorData) Set(val *AccountLocatorData) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountLocatorData) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountLocatorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountLocatorData(val *AccountLocatorData) *NullableAccountLocatorData {
	return &NullableAccountLocatorData{value: val, isSet: true}
}

func (v NullableAccountLocatorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountLocatorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
