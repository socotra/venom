/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ElementSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElementSummary{}

// ElementSummary struct for ElementSummary
type ElementSummary struct {
	Locator         string                            `json:"locator"`
	StaticLocator   string                            `json:"staticLocator"`
	Type            string                            `json:"type"`
	Data            map[string]map[string]interface{} `json:"data"`
	ChargeSummaries map[string]float32                `json:"chargeSummaries"`
}

type _ElementSummary ElementSummary

// NewElementSummary instantiates a new ElementSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementSummary(locator string, staticLocator string, type_ string, data map[string]map[string]interface{}, chargeSummaries map[string]float32) *ElementSummary {
	this := ElementSummary{}
	this.Locator = locator
	this.StaticLocator = staticLocator
	this.Type = type_
	this.Data = data
	this.ChargeSummaries = chargeSummaries
	return &this
}

// NewElementSummaryWithDefaults instantiates a new ElementSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementSummaryWithDefaults() *ElementSummary {
	this := ElementSummary{}
	return &this
}

// GetLocator returns the Locator field value
func (o *ElementSummary) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *ElementSummary) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *ElementSummary) SetLocator(v string) {
	o.Locator = v
}

// GetStaticLocator returns the StaticLocator field value
func (o *ElementSummary) GetStaticLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticLocator
}

// GetStaticLocatorOk returns a tuple with the StaticLocator field value
// and a boolean to check if the value has been set.
func (o *ElementSummary) GetStaticLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticLocator, true
}

// SetStaticLocator sets field value
func (o *ElementSummary) SetStaticLocator(v string) {
	o.StaticLocator = v
}

// GetType returns the Type field value
func (o *ElementSummary) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ElementSummary) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ElementSummary) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value
func (o *ElementSummary) GetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ElementSummary) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ElementSummary) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetChargeSummaries returns the ChargeSummaries field value
func (o *ElementSummary) GetChargeSummaries() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.ChargeSummaries
}

// GetChargeSummariesOk returns a tuple with the ChargeSummaries field value
// and a boolean to check if the value has been set.
func (o *ElementSummary) GetChargeSummariesOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeSummaries, true
}

// SetChargeSummaries sets field value
func (o *ElementSummary) SetChargeSummaries(v map[string]float32) {
	o.ChargeSummaries = v
}

func (o ElementSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElementSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["staticLocator"] = o.StaticLocator
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data
	toSerialize["chargeSummaries"] = o.ChargeSummaries
	return toSerialize, nil
}

func (o *ElementSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"staticLocator",
		"type",
		"data",
		"chargeSummaries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varElementSummary := _ElementSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varElementSummary)

	if err != nil {
		return err
	}

	*o = ElementSummary(varElementSummary)

	return err
}

type NullableElementSummary struct {
	value *ElementSummary
	isSet bool
}

func (v NullableElementSummary) Get() *ElementSummary {
	return v.value
}

func (v *NullableElementSummary) Set(val *ElementSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableElementSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableElementSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementSummary(val *ElementSummary) *NullableElementSummary {
	return &NullableElementSummary{value: val, isSet: true}
}

func (v NullableElementSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
