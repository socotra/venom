/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the QuoteUnderwritingData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteUnderwritingData{}

// QuoteUnderwritingData struct for QuoteUnderwritingData
type QuoteUnderwritingData struct {
	QuoteLocator       string `json:"quoteLocator"`
	UnderwritingStatus string `json:"underwritingStatus"`
}

type _QuoteUnderwritingData QuoteUnderwritingData

// NewQuoteUnderwritingData instantiates a new QuoteUnderwritingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteUnderwritingData(quoteLocator string, underwritingStatus string) *QuoteUnderwritingData {
	this := QuoteUnderwritingData{}
	this.QuoteLocator = quoteLocator
	this.UnderwritingStatus = underwritingStatus
	return &this
}

// NewQuoteUnderwritingDataWithDefaults instantiates a new QuoteUnderwritingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteUnderwritingDataWithDefaults() *QuoteUnderwritingData {
	this := QuoteUnderwritingData{}
	return &this
}

// GetQuoteLocator returns the QuoteLocator field value
func (o *QuoteUnderwritingData) GetQuoteLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteLocator
}

// GetQuoteLocatorOk returns a tuple with the QuoteLocator field value
// and a boolean to check if the value has been set.
func (o *QuoteUnderwritingData) GetQuoteLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteLocator, true
}

// SetQuoteLocator sets field value
func (o *QuoteUnderwritingData) SetQuoteLocator(v string) {
	o.QuoteLocator = v
}

// GetUnderwritingStatus returns the UnderwritingStatus field value
func (o *QuoteUnderwritingData) GetUnderwritingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnderwritingStatus
}

// GetUnderwritingStatusOk returns a tuple with the UnderwritingStatus field value
// and a boolean to check if the value has been set.
func (o *QuoteUnderwritingData) GetUnderwritingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnderwritingStatus, true
}

// SetUnderwritingStatus sets field value
func (o *QuoteUnderwritingData) SetUnderwritingStatus(v string) {
	o.UnderwritingStatus = v
}

func (o QuoteUnderwritingData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteUnderwritingData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quoteLocator"] = o.QuoteLocator
	toSerialize["underwritingStatus"] = o.UnderwritingStatus
	return toSerialize, nil
}

func (o *QuoteUnderwritingData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quoteLocator",
		"underwritingStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteUnderwritingData := _QuoteUnderwritingData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuoteUnderwritingData)

	if err != nil {
		return err
	}

	*o = QuoteUnderwritingData(varQuoteUnderwritingData)

	return err
}

type NullableQuoteUnderwritingData struct {
	value *QuoteUnderwritingData
	isSet bool
}

func (v NullableQuoteUnderwritingData) Get() *QuoteUnderwritingData {
	return v.value
}

func (v *NullableQuoteUnderwritingData) Set(val *QuoteUnderwritingData) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteUnderwritingData) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteUnderwritingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteUnderwritingData(val *QuoteUnderwritingData) *NullableQuoteUnderwritingData {
	return &NullableQuoteUnderwritingData{value: val, isSet: true}
}

func (v NullableQuoteUnderwritingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteUnderwritingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
