/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"encoding/json"
)

// checks if the AccountEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountEvents{}

// AccountEvents struct for AccountEvents
type AccountEvents struct {
	PolicyAccountAnonymize *AccountLocatorData `json:"policy.account.anonymize,omitempty"`
	PolicyAccountUpdate    *AccountLocatorData `json:"policy.account.update,omitempty"`
	PolicyAccountValidate  *AccountLocatorData `json:"policy.account.validate,omitempty"`
	PolicyAccountDiscard   *AccountLocatorData `json:"policy.account.discard,omitempty"`
	PolicyAccountCreate    *AccountLocatorData `json:"policy.account.create,omitempty"`
}

// NewAccountEvents instantiates a new AccountEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountEvents() *AccountEvents {
	this := AccountEvents{}
	return &this
}

// NewAccountEventsWithDefaults instantiates a new AccountEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountEventsWithDefaults() *AccountEvents {
	this := AccountEvents{}
	return &this
}

// GetPolicyAccountAnonymize returns the PolicyAccountAnonymize field value if set, zero value otherwise.
func (o *AccountEvents) GetPolicyAccountAnonymize() AccountLocatorData {
	if o == nil || IsNil(o.PolicyAccountAnonymize) {
		var ret AccountLocatorData
		return ret
	}
	return *o.PolicyAccountAnonymize
}

// GetPolicyAccountAnonymizeOk returns a tuple with the PolicyAccountAnonymize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetPolicyAccountAnonymizeOk() (*AccountLocatorData, bool) {
	if o == nil || IsNil(o.PolicyAccountAnonymize) {
		return nil, false
	}
	return o.PolicyAccountAnonymize, true
}

// HasPolicyAccountAnonymize returns a boolean if a field has been set.
func (o *AccountEvents) HasPolicyAccountAnonymize() bool {
	if o != nil && !IsNil(o.PolicyAccountAnonymize) {
		return true
	}

	return false
}

// SetPolicyAccountAnonymize gets a reference to the given AccountLocatorData and assigns it to the PolicyAccountAnonymize field.
func (o *AccountEvents) SetPolicyAccountAnonymize(v AccountLocatorData) {
	o.PolicyAccountAnonymize = &v
}

// GetPolicyAccountUpdate returns the PolicyAccountUpdate field value if set, zero value otherwise.
func (o *AccountEvents) GetPolicyAccountUpdate() AccountLocatorData {
	if o == nil || IsNil(o.PolicyAccountUpdate) {
		var ret AccountLocatorData
		return ret
	}
	return *o.PolicyAccountUpdate
}

// GetPolicyAccountUpdateOk returns a tuple with the PolicyAccountUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetPolicyAccountUpdateOk() (*AccountLocatorData, bool) {
	if o == nil || IsNil(o.PolicyAccountUpdate) {
		return nil, false
	}
	return o.PolicyAccountUpdate, true
}

// HasPolicyAccountUpdate returns a boolean if a field has been set.
func (o *AccountEvents) HasPolicyAccountUpdate() bool {
	if o != nil && !IsNil(o.PolicyAccountUpdate) {
		return true
	}

	return false
}

// SetPolicyAccountUpdate gets a reference to the given AccountLocatorData and assigns it to the PolicyAccountUpdate field.
func (o *AccountEvents) SetPolicyAccountUpdate(v AccountLocatorData) {
	o.PolicyAccountUpdate = &v
}

// GetPolicyAccountValidate returns the PolicyAccountValidate field value if set, zero value otherwise.
func (o *AccountEvents) GetPolicyAccountValidate() AccountLocatorData {
	if o == nil || IsNil(o.PolicyAccountValidate) {
		var ret AccountLocatorData
		return ret
	}
	return *o.PolicyAccountValidate
}

// GetPolicyAccountValidateOk returns a tuple with the PolicyAccountValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetPolicyAccountValidateOk() (*AccountLocatorData, bool) {
	if o == nil || IsNil(o.PolicyAccountValidate) {
		return nil, false
	}
	return o.PolicyAccountValidate, true
}

// HasPolicyAccountValidate returns a boolean if a field has been set.
func (o *AccountEvents) HasPolicyAccountValidate() bool {
	if o != nil && !IsNil(o.PolicyAccountValidate) {
		return true
	}

	return false
}

// SetPolicyAccountValidate gets a reference to the given AccountLocatorData and assigns it to the PolicyAccountValidate field.
func (o *AccountEvents) SetPolicyAccountValidate(v AccountLocatorData) {
	o.PolicyAccountValidate = &v
}

// GetPolicyAccountDiscard returns the PolicyAccountDiscard field value if set, zero value otherwise.
func (o *AccountEvents) GetPolicyAccountDiscard() AccountLocatorData {
	if o == nil || IsNil(o.PolicyAccountDiscard) {
		var ret AccountLocatorData
		return ret
	}
	return *o.PolicyAccountDiscard
}

// GetPolicyAccountDiscardOk returns a tuple with the PolicyAccountDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetPolicyAccountDiscardOk() (*AccountLocatorData, bool) {
	if o == nil || IsNil(o.PolicyAccountDiscard) {
		return nil, false
	}
	return o.PolicyAccountDiscard, true
}

// HasPolicyAccountDiscard returns a boolean if a field has been set.
func (o *AccountEvents) HasPolicyAccountDiscard() bool {
	if o != nil && !IsNil(o.PolicyAccountDiscard) {
		return true
	}

	return false
}

// SetPolicyAccountDiscard gets a reference to the given AccountLocatorData and assigns it to the PolicyAccountDiscard field.
func (o *AccountEvents) SetPolicyAccountDiscard(v AccountLocatorData) {
	o.PolicyAccountDiscard = &v
}

// GetPolicyAccountCreate returns the PolicyAccountCreate field value if set, zero value otherwise.
func (o *AccountEvents) GetPolicyAccountCreate() AccountLocatorData {
	if o == nil || IsNil(o.PolicyAccountCreate) {
		var ret AccountLocatorData
		return ret
	}
	return *o.PolicyAccountCreate
}

// GetPolicyAccountCreateOk returns a tuple with the PolicyAccountCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEvents) GetPolicyAccountCreateOk() (*AccountLocatorData, bool) {
	if o == nil || IsNil(o.PolicyAccountCreate) {
		return nil, false
	}
	return o.PolicyAccountCreate, true
}

// HasPolicyAccountCreate returns a boolean if a field has been set.
func (o *AccountEvents) HasPolicyAccountCreate() bool {
	if o != nil && !IsNil(o.PolicyAccountCreate) {
		return true
	}

	return false
}

// SetPolicyAccountCreate gets a reference to the given AccountLocatorData and assigns it to the PolicyAccountCreate field.
func (o *AccountEvents) SetPolicyAccountCreate(v AccountLocatorData) {
	o.PolicyAccountCreate = &v
}

func (o AccountEvents) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyAccountAnonymize) {
		toSerialize["policy.account.anonymize"] = o.PolicyAccountAnonymize
	}
	if !IsNil(o.PolicyAccountUpdate) {
		toSerialize["policy.account.update"] = o.PolicyAccountUpdate
	}
	if !IsNil(o.PolicyAccountValidate) {
		toSerialize["policy.account.validate"] = o.PolicyAccountValidate
	}
	if !IsNil(o.PolicyAccountDiscard) {
		toSerialize["policy.account.discard"] = o.PolicyAccountDiscard
	}
	if !IsNil(o.PolicyAccountCreate) {
		toSerialize["policy.account.create"] = o.PolicyAccountCreate
	}
	return toSerialize, nil
}

type NullableAccountEvents struct {
	value *AccountEvents
	isSet bool
}

func (v NullableAccountEvents) Get() *AccountEvents {
	return v.value
}

func (v *NullableAccountEvents) Set(val *AccountEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountEvents(val *AccountEvents) *NullableAccountEvents {
	return &NullableAccountEvents{value: val, isSet: true}
}

func (v NullableAccountEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
