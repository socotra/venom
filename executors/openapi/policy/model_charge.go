/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Charge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Charge{}

// Charge struct for Charge
type Charge struct {
	Locator              string   `json:"locator"`
	ElementLocator       string   `json:"elementLocator"`
	ChargeType           string   `json:"chargeType"`
	ChargeCategory       string   `json:"chargeCategory"`
	Amount               float32  `json:"amount"`
	Rate                 float32  `json:"rate"`
	ReferenceRate        float32  `json:"referenceRate"`
	Tag                  *string  `json:"tag,omitempty"`
	RateDifference       *float32 `json:"rateDifference,omitempty"`
	ElementStaticLocator string   `json:"elementStaticLocator"`
	ReversalOfLocator    *string  `json:"reversalOfLocator,omitempty"`
	Handling             string   `json:"handling"`
	Invoicing            string   `json:"invoicing"`
}

type _Charge Charge

// NewCharge instantiates a new Charge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharge(locator string, elementLocator string, chargeType string, chargeCategory string, amount float32, rate float32, referenceRate float32, elementStaticLocator string, handling string, invoicing string) *Charge {
	this := Charge{}
	this.Locator = locator
	this.ElementLocator = elementLocator
	this.ChargeType = chargeType
	this.ChargeCategory = chargeCategory
	this.Amount = amount
	this.Rate = rate
	this.ReferenceRate = referenceRate
	this.ElementStaticLocator = elementStaticLocator
	this.Handling = handling
	this.Invoicing = invoicing
	return &this
}

// NewChargeWithDefaults instantiates a new Charge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeWithDefaults() *Charge {
	this := Charge{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Charge) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Charge) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Charge) SetLocator(v string) {
	o.Locator = v
}

// GetElementLocator returns the ElementLocator field value
func (o *Charge) GetElementLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementLocator
}

// GetElementLocatorOk returns a tuple with the ElementLocator field value
// and a boolean to check if the value has been set.
func (o *Charge) GetElementLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementLocator, true
}

// SetElementLocator sets field value
func (o *Charge) SetElementLocator(v string) {
	o.ElementLocator = v
}

// GetChargeType returns the ChargeType field value
func (o *Charge) GetChargeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value
// and a boolean to check if the value has been set.
func (o *Charge) GetChargeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeType, true
}

// SetChargeType sets field value
func (o *Charge) SetChargeType(v string) {
	o.ChargeType = v
}

// GetChargeCategory returns the ChargeCategory field value
func (o *Charge) GetChargeCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeCategory
}

// GetChargeCategoryOk returns a tuple with the ChargeCategory field value
// and a boolean to check if the value has been set.
func (o *Charge) GetChargeCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeCategory, true
}

// SetChargeCategory sets field value
func (o *Charge) SetChargeCategory(v string) {
	o.ChargeCategory = v
}

// GetAmount returns the Amount field value
func (o *Charge) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Charge) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Charge) SetAmount(v float32) {
	o.Amount = v
}

// GetRate returns the Rate field value
func (o *Charge) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *Charge) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *Charge) SetRate(v float32) {
	o.Rate = v
}

// GetReferenceRate returns the ReferenceRate field value
func (o *Charge) GetReferenceRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ReferenceRate
}

// GetReferenceRateOk returns a tuple with the ReferenceRate field value
// and a boolean to check if the value has been set.
func (o *Charge) GetReferenceRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceRate, true
}

// SetReferenceRate sets field value
func (o *Charge) SetReferenceRate(v float32) {
	o.ReferenceRate = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Charge) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charge) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Charge) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *Charge) SetTag(v string) {
	o.Tag = &v
}

// GetRateDifference returns the RateDifference field value if set, zero value otherwise.
func (o *Charge) GetRateDifference() float32 {
	if o == nil || IsNil(o.RateDifference) {
		var ret float32
		return ret
	}
	return *o.RateDifference
}

// GetRateDifferenceOk returns a tuple with the RateDifference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charge) GetRateDifferenceOk() (*float32, bool) {
	if o == nil || IsNil(o.RateDifference) {
		return nil, false
	}
	return o.RateDifference, true
}

// HasRateDifference returns a boolean if a field has been set.
func (o *Charge) HasRateDifference() bool {
	if o != nil && !IsNil(o.RateDifference) {
		return true
	}

	return false
}

// SetRateDifference gets a reference to the given float32 and assigns it to the RateDifference field.
func (o *Charge) SetRateDifference(v float32) {
	o.RateDifference = &v
}

// GetElementStaticLocator returns the ElementStaticLocator field value
func (o *Charge) GetElementStaticLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementStaticLocator
}

// GetElementStaticLocatorOk returns a tuple with the ElementStaticLocator field value
// and a boolean to check if the value has been set.
func (o *Charge) GetElementStaticLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementStaticLocator, true
}

// SetElementStaticLocator sets field value
func (o *Charge) SetElementStaticLocator(v string) {
	o.ElementStaticLocator = v
}

// GetReversalOfLocator returns the ReversalOfLocator field value if set, zero value otherwise.
func (o *Charge) GetReversalOfLocator() string {
	if o == nil || IsNil(o.ReversalOfLocator) {
		var ret string
		return ret
	}
	return *o.ReversalOfLocator
}

// GetReversalOfLocatorOk returns a tuple with the ReversalOfLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charge) GetReversalOfLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ReversalOfLocator) {
		return nil, false
	}
	return o.ReversalOfLocator, true
}

// HasReversalOfLocator returns a boolean if a field has been set.
func (o *Charge) HasReversalOfLocator() bool {
	if o != nil && !IsNil(o.ReversalOfLocator) {
		return true
	}

	return false
}

// SetReversalOfLocator gets a reference to the given string and assigns it to the ReversalOfLocator field.
func (o *Charge) SetReversalOfLocator(v string) {
	o.ReversalOfLocator = &v
}

// GetHandling returns the Handling field value
func (o *Charge) GetHandling() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handling
}

// GetHandlingOk returns a tuple with the Handling field value
// and a boolean to check if the value has been set.
func (o *Charge) GetHandlingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handling, true
}

// SetHandling sets field value
func (o *Charge) SetHandling(v string) {
	o.Handling = v
}

// GetInvoicing returns the Invoicing field value
func (o *Charge) GetInvoicing() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Invoicing
}

// GetInvoicingOk returns a tuple with the Invoicing field value
// and a boolean to check if the value has been set.
func (o *Charge) GetInvoicingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Invoicing, true
}

// SetInvoicing sets field value
func (o *Charge) SetInvoicing(v string) {
	o.Invoicing = v
}

func (o Charge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Charge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["elementLocator"] = o.ElementLocator
	toSerialize["chargeType"] = o.ChargeType
	toSerialize["chargeCategory"] = o.ChargeCategory
	toSerialize["amount"] = o.Amount
	toSerialize["rate"] = o.Rate
	toSerialize["referenceRate"] = o.ReferenceRate
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.RateDifference) {
		toSerialize["rateDifference"] = o.RateDifference
	}
	toSerialize["elementStaticLocator"] = o.ElementStaticLocator
	if !IsNil(o.ReversalOfLocator) {
		toSerialize["reversalOfLocator"] = o.ReversalOfLocator
	}
	toSerialize["handling"] = o.Handling
	toSerialize["invoicing"] = o.Invoicing
	return toSerialize, nil
}

func (o *Charge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"elementLocator",
		"chargeType",
		"chargeCategory",
		"amount",
		"rate",
		"referenceRate",
		"elementStaticLocator",
		"handling",
		"invoicing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCharge := _Charge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCharge)

	if err != nil {
		return err
	}

	*o = Charge(varCharge)

	return err
}

type NullableCharge struct {
	value *Charge
	isSet bool
}

func (v NullableCharge) Get() *Charge {
	return v.value
}

func (v *NullableCharge) Set(val *Charge) {
	v.value = val
	v.isSet = true
}

func (v NullableCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharge(val *Charge) *NullableCharge {
	return &NullableCharge{value: val, isSet: true}
}

func (v NullableCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
