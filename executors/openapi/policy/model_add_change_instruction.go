/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddChangeInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddChangeInstruction{}

// AddChangeInstruction struct for AddChangeInstruction
type AddChangeInstruction struct {
	ChangeInstruction
	Locator  string    `json:"locator"`
	Action   string    `json:"action"`
	Elements []Element `json:"elements"`
}

type _AddChangeInstruction AddChangeInstruction

// NewAddChangeInstruction instantiates a new AddChangeInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddChangeInstruction(locator string, action string, elements []Element) *AddChangeInstruction {
	this := AddChangeInstruction{}
	this.Action = action
	this.Locator = locator
	this.Elements = elements
	return &this
}

// NewAddChangeInstructionWithDefaults instantiates a new AddChangeInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddChangeInstructionWithDefaults() *AddChangeInstruction {
	this := AddChangeInstruction{}
	return &this
}

// GetLocator returns the Locator field value
func (o *AddChangeInstruction) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *AddChangeInstruction) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *AddChangeInstruction) SetLocator(v string) {
	o.Locator = v
}

// GetAction returns the Action field value
func (o *AddChangeInstruction) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AddChangeInstruction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *AddChangeInstruction) SetAction(v string) {
	o.Action = v
}

// GetElements returns the Elements field value
func (o *AddChangeInstruction) GetElements() []Element {
	if o == nil {
		var ret []Element
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *AddChangeInstruction) GetElementsOk() ([]Element, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *AddChangeInstruction) SetElements(v []Element) {
	o.Elements = v
}

func (o AddChangeInstruction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddChangeInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["action"] = o.Action
	toSerialize["elements"] = o.Elements
	return toSerialize, nil
}

func (o *AddChangeInstruction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"action",
		"elements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddChangeInstruction := _AddChangeInstruction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddChangeInstruction)

	if err != nil {
		return err
	}

	*o = AddChangeInstruction(varAddChangeInstruction)

	return err
}

type NullableAddChangeInstruction struct {
	value *AddChangeInstruction
	isSet bool
}

func (v NullableAddChangeInstruction) Get() *AddChangeInstruction {
	return v.value
}

func (v *NullableAddChangeInstruction) Set(val *AddChangeInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableAddChangeInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableAddChangeInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddChangeInstruction(val *AddChangeInstruction) *NullableAddChangeInstruction {
	return &NullableAddChangeInstruction{value: val, isSet: true}
}

func (v NullableAddChangeInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddChangeInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
