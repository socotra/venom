/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TransactionPriceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionPriceResponse{}

// TransactionPriceResponse struct for TransactionPriceResponse
type TransactionPriceResponse struct {
	Locator                string                     `json:"locator"`
	PolicyLocator          string                     `json:"policyLocator"`
	TransactionCategory    string                     `json:"transactionCategory"`
	TransactionState       string                     `json:"transactionState"`
	EffectiveTime          time.Time                  `json:"effectiveTime"`
	Charges                []Charge                   `json:"charges"`
	AggregatedTransactions []TransactionPriceResponse `json:"aggregatedTransactions"`
	ValidationResult       *ValidationResult          `json:"validationResult,omitempty"`
}

type _TransactionPriceResponse TransactionPriceResponse

// NewTransactionPriceResponse instantiates a new TransactionPriceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionPriceResponse(locator string, policyLocator string, transactionCategory string, transactionState string, effectiveTime time.Time, charges []Charge, aggregatedTransactions []TransactionPriceResponse) *TransactionPriceResponse {
	this := TransactionPriceResponse{}
	this.Locator = locator
	this.PolicyLocator = policyLocator
	this.TransactionCategory = transactionCategory
	this.TransactionState = transactionState
	this.EffectiveTime = effectiveTime
	this.Charges = charges
	this.AggregatedTransactions = aggregatedTransactions
	return &this
}

// NewTransactionPriceResponseWithDefaults instantiates a new TransactionPriceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionPriceResponseWithDefaults() *TransactionPriceResponse {
	this := TransactionPriceResponse{}
	return &this
}

// GetLocator returns the Locator field value
func (o *TransactionPriceResponse) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *TransactionPriceResponse) SetLocator(v string) {
	o.Locator = v
}

// GetPolicyLocator returns the PolicyLocator field value
func (o *TransactionPriceResponse) GetPolicyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetPolicyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocator, true
}

// SetPolicyLocator sets field value
func (o *TransactionPriceResponse) SetPolicyLocator(v string) {
	o.PolicyLocator = v
}

// GetTransactionCategory returns the TransactionCategory field value
func (o *TransactionPriceResponse) GetTransactionCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionCategory
}

// GetTransactionCategoryOk returns a tuple with the TransactionCategory field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetTransactionCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionCategory, true
}

// SetTransactionCategory sets field value
func (o *TransactionPriceResponse) SetTransactionCategory(v string) {
	o.TransactionCategory = v
}

// GetTransactionState returns the TransactionState field value
func (o *TransactionPriceResponse) GetTransactionState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionState
}

// GetTransactionStateOk returns a tuple with the TransactionState field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetTransactionStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionState, true
}

// SetTransactionState sets field value
func (o *TransactionPriceResponse) SetTransactionState(v string) {
	o.TransactionState = v
}

// GetEffectiveTime returns the EffectiveTime field value
func (o *TransactionPriceResponse) GetEffectiveTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveTime
}

// GetEffectiveTimeOk returns a tuple with the EffectiveTime field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetEffectiveTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveTime, true
}

// SetEffectiveTime sets field value
func (o *TransactionPriceResponse) SetEffectiveTime(v time.Time) {
	o.EffectiveTime = v
}

// GetCharges returns the Charges field value
func (o *TransactionPriceResponse) GetCharges() []Charge {
	if o == nil {
		var ret []Charge
		return ret
	}

	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetChargesOk() ([]Charge, bool) {
	if o == nil {
		return nil, false
	}
	return o.Charges, true
}

// SetCharges sets field value
func (o *TransactionPriceResponse) SetCharges(v []Charge) {
	o.Charges = v
}

// GetAggregatedTransactions returns the AggregatedTransactions field value
func (o *TransactionPriceResponse) GetAggregatedTransactions() []TransactionPriceResponse {
	if o == nil {
		var ret []TransactionPriceResponse
		return ret
	}

	return o.AggregatedTransactions
}

// GetAggregatedTransactionsOk returns a tuple with the AggregatedTransactions field value
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetAggregatedTransactionsOk() ([]TransactionPriceResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggregatedTransactions, true
}

// SetAggregatedTransactions sets field value
func (o *TransactionPriceResponse) SetAggregatedTransactions(v []TransactionPriceResponse) {
	o.AggregatedTransactions = v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *TransactionPriceResponse) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionPriceResponse) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *TransactionPriceResponse) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *TransactionPriceResponse) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

func (o TransactionPriceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionPriceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["policyLocator"] = o.PolicyLocator
	toSerialize["transactionCategory"] = o.TransactionCategory
	toSerialize["transactionState"] = o.TransactionState
	toSerialize["effectiveTime"] = o.EffectiveTime
	toSerialize["charges"] = o.Charges
	toSerialize["aggregatedTransactions"] = o.AggregatedTransactions
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	return toSerialize, nil
}

func (o *TransactionPriceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"policyLocator",
		"transactionCategory",
		"transactionState",
		"effectiveTime",
		"charges",
		"aggregatedTransactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionPriceResponse := _TransactionPriceResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionPriceResponse)

	if err != nil {
		return err
	}

	*o = TransactionPriceResponse(varTransactionPriceResponse)

	return err
}

type NullableTransactionPriceResponse struct {
	value *TransactionPriceResponse
	isSet bool
}

func (v NullableTransactionPriceResponse) Get() *TransactionPriceResponse {
	return v.value
}

func (v *NullableTransactionPriceResponse) Set(val *TransactionPriceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionPriceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionPriceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionPriceResponse(val *TransactionPriceResponse) *NullableTransactionPriceResponse {
	return &NullableTransactionPriceResponse{value: val, isSet: true}
}

func (v NullableTransactionPriceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionPriceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
