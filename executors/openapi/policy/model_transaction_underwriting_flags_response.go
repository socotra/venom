/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionUnderwritingFlagsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionUnderwritingFlagsResponse{}

// TransactionUnderwritingFlagsResponse struct for TransactionUnderwritingFlagsResponse
type TransactionUnderwritingFlagsResponse struct {
	TransactionLocator string                     `json:"transactionLocator"`
	Flags              []UnderwritingFlagResponse `json:"flags"`
	ClearedFlags       []UnderwritingFlagResponse `json:"clearedFlags"`
}

type _TransactionUnderwritingFlagsResponse TransactionUnderwritingFlagsResponse

// NewTransactionUnderwritingFlagsResponse instantiates a new TransactionUnderwritingFlagsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionUnderwritingFlagsResponse(transactionLocator string, flags []UnderwritingFlagResponse, clearedFlags []UnderwritingFlagResponse) *TransactionUnderwritingFlagsResponse {
	this := TransactionUnderwritingFlagsResponse{}
	this.TransactionLocator = transactionLocator
	this.Flags = flags
	this.ClearedFlags = clearedFlags
	return &this
}

// NewTransactionUnderwritingFlagsResponseWithDefaults instantiates a new TransactionUnderwritingFlagsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionUnderwritingFlagsResponseWithDefaults() *TransactionUnderwritingFlagsResponse {
	this := TransactionUnderwritingFlagsResponse{}
	return &this
}

// GetTransactionLocator returns the TransactionLocator field value
func (o *TransactionUnderwritingFlagsResponse) GetTransactionLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value
// and a boolean to check if the value has been set.
func (o *TransactionUnderwritingFlagsResponse) GetTransactionLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionLocator, true
}

// SetTransactionLocator sets field value
func (o *TransactionUnderwritingFlagsResponse) SetTransactionLocator(v string) {
	o.TransactionLocator = v
}

// GetFlags returns the Flags field value
func (o *TransactionUnderwritingFlagsResponse) GetFlags() []UnderwritingFlagResponse {
	if o == nil {
		var ret []UnderwritingFlagResponse
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *TransactionUnderwritingFlagsResponse) GetFlagsOk() ([]UnderwritingFlagResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flags, true
}

// SetFlags sets field value
func (o *TransactionUnderwritingFlagsResponse) SetFlags(v []UnderwritingFlagResponse) {
	o.Flags = v
}

// GetClearedFlags returns the ClearedFlags field value
func (o *TransactionUnderwritingFlagsResponse) GetClearedFlags() []UnderwritingFlagResponse {
	if o == nil {
		var ret []UnderwritingFlagResponse
		return ret
	}

	return o.ClearedFlags
}

// GetClearedFlagsOk returns a tuple with the ClearedFlags field value
// and a boolean to check if the value has been set.
func (o *TransactionUnderwritingFlagsResponse) GetClearedFlagsOk() ([]UnderwritingFlagResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClearedFlags, true
}

// SetClearedFlags sets field value
func (o *TransactionUnderwritingFlagsResponse) SetClearedFlags(v []UnderwritingFlagResponse) {
	o.ClearedFlags = v
}

func (o TransactionUnderwritingFlagsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionUnderwritingFlagsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionLocator"] = o.TransactionLocator
	toSerialize["flags"] = o.Flags
	toSerialize["clearedFlags"] = o.ClearedFlags
	return toSerialize, nil
}

func (o *TransactionUnderwritingFlagsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transactionLocator",
		"flags",
		"clearedFlags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionUnderwritingFlagsResponse := _TransactionUnderwritingFlagsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionUnderwritingFlagsResponse)

	if err != nil {
		return err
	}

	*o = TransactionUnderwritingFlagsResponse(varTransactionUnderwritingFlagsResponse)

	return err
}

type NullableTransactionUnderwritingFlagsResponse struct {
	value *TransactionUnderwritingFlagsResponse
	isSet bool
}

func (v NullableTransactionUnderwritingFlagsResponse) Get() *TransactionUnderwritingFlagsResponse {
	return v.value
}

func (v *NullableTransactionUnderwritingFlagsResponse) Set(val *TransactionUnderwritingFlagsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionUnderwritingFlagsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionUnderwritingFlagsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionUnderwritingFlagsResponse(val *TransactionUnderwritingFlagsResponse) *NullableTransactionUnderwritingFlagsResponse {
	return &NullableTransactionUnderwritingFlagsResponse{value: val, isSet: true}
}

func (v NullableTransactionUnderwritingFlagsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionUnderwritingFlagsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
