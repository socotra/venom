/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"encoding/json"
)

// checks if the TransactionEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionEvents{}

// TransactionEvents struct for TransactionEvents
type TransactionEvents struct {
	PolicyRenewalAccept                 *TransactionLocatorData          `json:"policy.renewal.accept,omitempty"`
	PolicyCancellationReset             *TransactionLocatorData          `json:"policy.cancellation.reset,omitempty"`
	PolicyCancellationIssue             *TransactionLocatorData          `json:"policy.cancellation.issue,omitempty"`
	PolicyReversalAccept                *TransactionLocatorData          `json:"policy.reversal.accept,omitempty"`
	PolicyCancellationAccept            *TransactionLocatorData          `json:"policy.cancellation.accept,omitempty"`
	PolicyChangeDiscard                 *TransactionLocatorData          `json:"policy.change.discard,omitempty"`
	PolicyChangeIssue                   *TransactionLocatorData          `json:"policy.change.issue,omitempty"`
	PolicyCancellationValidate          *TransactionLocatorData          `json:"policy.cancellation.validate,omitempty"`
	PolicyReversalUnderwrite            *TransactionUnderwriteData       `json:"policy.reversal.underwrite,omitempty"`
	PolicyCancellationPrice             *TransactionLocatorData          `json:"policy.cancellation.price,omitempty"`
	PolicyReversalUpdate                *TransactionLocatorData          `json:"policy.reversal.update,omitempty"`
	PolicyCancellationRefuse            *TransactionLocatorData          `json:"policy.cancellation.refuse,omitempty"`
	PolicyChangeAccept                  *TransactionLocatorData          `json:"policy.change.accept,omitempty"`
	PolicyRenewalRefuse                 *TransactionLocatorData          `json:"policy.renewal.refuse,omitempty"`
	PolicyReinstatementCreate           *TransactionLocatorData          `json:"policy.reinstatement.create,omitempty"`
	PolicyReinstatementReset            *TransactionLocatorData          `json:"policy.reinstatement.reset,omitempty"`
	PolicyRenewalUnderwrite             *TransactionUnderwriteData       `json:"policy.renewal.underwrite,omitempty"`
	PolicyReversalReset                 *TransactionLocatorData          `json:"policy.reversal.reset,omitempty"`
	PolicyChangeUpdate                  *TransactionLocatorData          `json:"policy.change.update,omitempty"`
	PolicyReversalValidate              *TransactionLocatorData          `json:"policy.reversal.validate,omitempty"`
	PolicyChangeRefuse                  *TransactionLocatorData          `json:"policy.change.refuse,omitempty"`
	PolicyReversalIssue                 *TransactionLocatorData          `json:"policy.reversal.issue,omitempty"`
	PolicyCancellationUpdate            *TransactionLocatorData          `json:"policy.cancellation.update,omitempty"`
	PolicyChangeManualUnderwrite        *TransactionManualUnderwriteData `json:"policy.change.manualUnderwrite,omitempty"`
	PolicyChangeCreate                  *TransactionLocatorData          `json:"policy.change.create,omitempty"`
	PolicyReinstatementUpdate           *TransactionLocatorData          `json:"policy.reinstatement.update,omitempty"`
	PolicyRenewalManualUnderwrite       *TransactionManualUnderwriteData `json:"policy.renewal.manualUnderwrite,omitempty"`
	PolicyReinstatementDiscard          *TransactionLocatorData          `json:"policy.reinstatement.discard,omitempty"`
	PolicyRenewalPrice                  *TransactionLocatorData          `json:"policy.renewal.price,omitempty"`
	PolicyReversalDiscard               *TransactionLocatorData          `json:"policy.reversal.discard,omitempty"`
	PolicyReinstatementPrice            *TransactionLocatorData          `json:"policy.reinstatement.price,omitempty"`
	PolicyChangeValidate                *TransactionLocatorData          `json:"policy.change.validate,omitempty"`
	PolicyCancellationUnderwrite        *TransactionUnderwriteData       `json:"policy.cancellation.underwrite,omitempty"`
	PolicyChangeUnderwrite              *TransactionUnderwriteData       `json:"policy.change.underwrite,omitempty"`
	PolicyRenewalValidate               *TransactionLocatorData          `json:"policy.renewal.validate,omitempty"`
	PolicyReinstatementAccept           *TransactionLocatorData          `json:"policy.reinstatement.accept,omitempty"`
	PolicyReversalPrice                 *TransactionLocatorData          `json:"policy.reversal.price,omitempty"`
	PolicyCancellationCreate            *TransactionLocatorData          `json:"policy.cancellation.create,omitempty"`
	PolicyReinstatementRefuse           *TransactionLocatorData          `json:"policy.reinstatement.refuse,omitempty"`
	PolicyRenewalCreate                 *TransactionLocatorData          `json:"policy.renewal.create,omitempty"`
	PolicyRenewalReset                  *TransactionLocatorData          `json:"policy.renewal.reset,omitempty"`
	PolicyCancellationManualUnderwrite  *TransactionManualUnderwriteData `json:"policy.cancellation.manualUnderwrite,omitempty"`
	PolicyChangePrice                   *TransactionLocatorData          `json:"policy.change.price,omitempty"`
	PolicyCancellationDiscard           *TransactionLocatorData          `json:"policy.cancellation.discard,omitempty"`
	PolicyRenewalUpdate                 *TransactionLocatorData          `json:"policy.renewal.update,omitempty"`
	PolicyRenewalIssue                  *TransactionLocatorData          `json:"policy.renewal.issue,omitempty"`
	PolicyReinstatementIssue            *TransactionLocatorData          `json:"policy.reinstatement.issue,omitempty"`
	PolicyChangeReset                   *TransactionLocatorData          `json:"policy.change.reset,omitempty"`
	PolicyReversalManualUnderwrite      *TransactionManualUnderwriteData `json:"policy.reversal.manualUnderwrite,omitempty"`
	PolicyReinstatementUnderwrite       *TransactionUnderwriteData       `json:"policy.reinstatement.underwrite,omitempty"`
	PolicyReinstatementValidate         *TransactionLocatorData          `json:"policy.reinstatement.validate,omitempty"`
	PolicyReinstatementManualUnderwrite *TransactionManualUnderwriteData `json:"policy.reinstatement.manualUnderwrite,omitempty"`
	PolicyReversalRefuse                *TransactionLocatorData          `json:"policy.reversal.refuse,omitempty"`
	PolicyRenewalDiscard                *TransactionLocatorData          `json:"policy.renewal.discard,omitempty"`
	PolicyReversalCreate                *TransactionLocatorData          `json:"policy.reversal.create,omitempty"`
}

// NewTransactionEvents instantiates a new TransactionEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEvents() *TransactionEvents {
	this := TransactionEvents{}
	return &this
}

// NewTransactionEventsWithDefaults instantiates a new TransactionEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEventsWithDefaults() *TransactionEvents {
	this := TransactionEvents{}
	return &this
}

// GetPolicyRenewalAccept returns the PolicyRenewalAccept field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalAccept() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalAccept) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalAccept
}

// GetPolicyRenewalAcceptOk returns a tuple with the PolicyRenewalAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalAcceptOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalAccept) {
		return nil, false
	}
	return o.PolicyRenewalAccept, true
}

// HasPolicyRenewalAccept returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalAccept() bool {
	if o != nil && !IsNil(o.PolicyRenewalAccept) {
		return true
	}

	return false
}

// SetPolicyRenewalAccept gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalAccept field.
func (o *TransactionEvents) SetPolicyRenewalAccept(v TransactionLocatorData) {
	o.PolicyRenewalAccept = &v
}

// GetPolicyCancellationReset returns the PolicyCancellationReset field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationReset() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationReset) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationReset
}

// GetPolicyCancellationResetOk returns a tuple with the PolicyCancellationReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationResetOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationReset) {
		return nil, false
	}
	return o.PolicyCancellationReset, true
}

// HasPolicyCancellationReset returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationReset() bool {
	if o != nil && !IsNil(o.PolicyCancellationReset) {
		return true
	}

	return false
}

// SetPolicyCancellationReset gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationReset field.
func (o *TransactionEvents) SetPolicyCancellationReset(v TransactionLocatorData) {
	o.PolicyCancellationReset = &v
}

// GetPolicyCancellationIssue returns the PolicyCancellationIssue field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationIssue() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationIssue) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationIssue
}

// GetPolicyCancellationIssueOk returns a tuple with the PolicyCancellationIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationIssueOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationIssue) {
		return nil, false
	}
	return o.PolicyCancellationIssue, true
}

// HasPolicyCancellationIssue returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationIssue() bool {
	if o != nil && !IsNil(o.PolicyCancellationIssue) {
		return true
	}

	return false
}

// SetPolicyCancellationIssue gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationIssue field.
func (o *TransactionEvents) SetPolicyCancellationIssue(v TransactionLocatorData) {
	o.PolicyCancellationIssue = &v
}

// GetPolicyReversalAccept returns the PolicyReversalAccept field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalAccept() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalAccept) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalAccept
}

// GetPolicyReversalAcceptOk returns a tuple with the PolicyReversalAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalAcceptOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalAccept) {
		return nil, false
	}
	return o.PolicyReversalAccept, true
}

// HasPolicyReversalAccept returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalAccept() bool {
	if o != nil && !IsNil(o.PolicyReversalAccept) {
		return true
	}

	return false
}

// SetPolicyReversalAccept gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalAccept field.
func (o *TransactionEvents) SetPolicyReversalAccept(v TransactionLocatorData) {
	o.PolicyReversalAccept = &v
}

// GetPolicyCancellationAccept returns the PolicyCancellationAccept field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationAccept() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationAccept) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationAccept
}

// GetPolicyCancellationAcceptOk returns a tuple with the PolicyCancellationAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationAcceptOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationAccept) {
		return nil, false
	}
	return o.PolicyCancellationAccept, true
}

// HasPolicyCancellationAccept returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationAccept() bool {
	if o != nil && !IsNil(o.PolicyCancellationAccept) {
		return true
	}

	return false
}

// SetPolicyCancellationAccept gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationAccept field.
func (o *TransactionEvents) SetPolicyCancellationAccept(v TransactionLocatorData) {
	o.PolicyCancellationAccept = &v
}

// GetPolicyChangeDiscard returns the PolicyChangeDiscard field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeDiscard() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeDiscard) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeDiscard
}

// GetPolicyChangeDiscardOk returns a tuple with the PolicyChangeDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeDiscardOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeDiscard) {
		return nil, false
	}
	return o.PolicyChangeDiscard, true
}

// HasPolicyChangeDiscard returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeDiscard() bool {
	if o != nil && !IsNil(o.PolicyChangeDiscard) {
		return true
	}

	return false
}

// SetPolicyChangeDiscard gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeDiscard field.
func (o *TransactionEvents) SetPolicyChangeDiscard(v TransactionLocatorData) {
	o.PolicyChangeDiscard = &v
}

// GetPolicyChangeIssue returns the PolicyChangeIssue field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeIssue() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeIssue) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeIssue
}

// GetPolicyChangeIssueOk returns a tuple with the PolicyChangeIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeIssueOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeIssue) {
		return nil, false
	}
	return o.PolicyChangeIssue, true
}

// HasPolicyChangeIssue returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeIssue() bool {
	if o != nil && !IsNil(o.PolicyChangeIssue) {
		return true
	}

	return false
}

// SetPolicyChangeIssue gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeIssue field.
func (o *TransactionEvents) SetPolicyChangeIssue(v TransactionLocatorData) {
	o.PolicyChangeIssue = &v
}

// GetPolicyCancellationValidate returns the PolicyCancellationValidate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationValidate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationValidate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationValidate
}

// GetPolicyCancellationValidateOk returns a tuple with the PolicyCancellationValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationValidateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationValidate) {
		return nil, false
	}
	return o.PolicyCancellationValidate, true
}

// HasPolicyCancellationValidate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationValidate() bool {
	if o != nil && !IsNil(o.PolicyCancellationValidate) {
		return true
	}

	return false
}

// SetPolicyCancellationValidate gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationValidate field.
func (o *TransactionEvents) SetPolicyCancellationValidate(v TransactionLocatorData) {
	o.PolicyCancellationValidate = &v
}

// GetPolicyReversalUnderwrite returns the PolicyReversalUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalUnderwrite() TransactionUnderwriteData {
	if o == nil || IsNil(o.PolicyReversalUnderwrite) {
		var ret TransactionUnderwriteData
		return ret
	}
	return *o.PolicyReversalUnderwrite
}

// GetPolicyReversalUnderwriteOk returns a tuple with the PolicyReversalUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalUnderwriteOk() (*TransactionUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyReversalUnderwrite) {
		return nil, false
	}
	return o.PolicyReversalUnderwrite, true
}

// HasPolicyReversalUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyReversalUnderwrite) {
		return true
	}

	return false
}

// SetPolicyReversalUnderwrite gets a reference to the given TransactionUnderwriteData and assigns it to the PolicyReversalUnderwrite field.
func (o *TransactionEvents) SetPolicyReversalUnderwrite(v TransactionUnderwriteData) {
	o.PolicyReversalUnderwrite = &v
}

// GetPolicyCancellationPrice returns the PolicyCancellationPrice field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationPrice() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationPrice) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationPrice
}

// GetPolicyCancellationPriceOk returns a tuple with the PolicyCancellationPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationPriceOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationPrice) {
		return nil, false
	}
	return o.PolicyCancellationPrice, true
}

// HasPolicyCancellationPrice returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationPrice() bool {
	if o != nil && !IsNil(o.PolicyCancellationPrice) {
		return true
	}

	return false
}

// SetPolicyCancellationPrice gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationPrice field.
func (o *TransactionEvents) SetPolicyCancellationPrice(v TransactionLocatorData) {
	o.PolicyCancellationPrice = &v
}

// GetPolicyReversalUpdate returns the PolicyReversalUpdate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalUpdate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalUpdate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalUpdate
}

// GetPolicyReversalUpdateOk returns a tuple with the PolicyReversalUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalUpdateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalUpdate) {
		return nil, false
	}
	return o.PolicyReversalUpdate, true
}

// HasPolicyReversalUpdate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalUpdate() bool {
	if o != nil && !IsNil(o.PolicyReversalUpdate) {
		return true
	}

	return false
}

// SetPolicyReversalUpdate gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalUpdate field.
func (o *TransactionEvents) SetPolicyReversalUpdate(v TransactionLocatorData) {
	o.PolicyReversalUpdate = &v
}

// GetPolicyCancellationRefuse returns the PolicyCancellationRefuse field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationRefuse() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationRefuse) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationRefuse
}

// GetPolicyCancellationRefuseOk returns a tuple with the PolicyCancellationRefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationRefuseOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationRefuse) {
		return nil, false
	}
	return o.PolicyCancellationRefuse, true
}

// HasPolicyCancellationRefuse returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationRefuse() bool {
	if o != nil && !IsNil(o.PolicyCancellationRefuse) {
		return true
	}

	return false
}

// SetPolicyCancellationRefuse gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationRefuse field.
func (o *TransactionEvents) SetPolicyCancellationRefuse(v TransactionLocatorData) {
	o.PolicyCancellationRefuse = &v
}

// GetPolicyChangeAccept returns the PolicyChangeAccept field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeAccept() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeAccept) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeAccept
}

// GetPolicyChangeAcceptOk returns a tuple with the PolicyChangeAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeAcceptOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeAccept) {
		return nil, false
	}
	return o.PolicyChangeAccept, true
}

// HasPolicyChangeAccept returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeAccept() bool {
	if o != nil && !IsNil(o.PolicyChangeAccept) {
		return true
	}

	return false
}

// SetPolicyChangeAccept gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeAccept field.
func (o *TransactionEvents) SetPolicyChangeAccept(v TransactionLocatorData) {
	o.PolicyChangeAccept = &v
}

// GetPolicyRenewalRefuse returns the PolicyRenewalRefuse field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalRefuse() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalRefuse) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalRefuse
}

// GetPolicyRenewalRefuseOk returns a tuple with the PolicyRenewalRefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalRefuseOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalRefuse) {
		return nil, false
	}
	return o.PolicyRenewalRefuse, true
}

// HasPolicyRenewalRefuse returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalRefuse() bool {
	if o != nil && !IsNil(o.PolicyRenewalRefuse) {
		return true
	}

	return false
}

// SetPolicyRenewalRefuse gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalRefuse field.
func (o *TransactionEvents) SetPolicyRenewalRefuse(v TransactionLocatorData) {
	o.PolicyRenewalRefuse = &v
}

// GetPolicyReinstatementCreate returns the PolicyReinstatementCreate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementCreate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementCreate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementCreate
}

// GetPolicyReinstatementCreateOk returns a tuple with the PolicyReinstatementCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementCreateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementCreate) {
		return nil, false
	}
	return o.PolicyReinstatementCreate, true
}

// HasPolicyReinstatementCreate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementCreate() bool {
	if o != nil && !IsNil(o.PolicyReinstatementCreate) {
		return true
	}

	return false
}

// SetPolicyReinstatementCreate gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementCreate field.
func (o *TransactionEvents) SetPolicyReinstatementCreate(v TransactionLocatorData) {
	o.PolicyReinstatementCreate = &v
}

// GetPolicyReinstatementReset returns the PolicyReinstatementReset field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementReset() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementReset) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementReset
}

// GetPolicyReinstatementResetOk returns a tuple with the PolicyReinstatementReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementResetOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementReset) {
		return nil, false
	}
	return o.PolicyReinstatementReset, true
}

// HasPolicyReinstatementReset returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementReset() bool {
	if o != nil && !IsNil(o.PolicyReinstatementReset) {
		return true
	}

	return false
}

// SetPolicyReinstatementReset gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementReset field.
func (o *TransactionEvents) SetPolicyReinstatementReset(v TransactionLocatorData) {
	o.PolicyReinstatementReset = &v
}

// GetPolicyRenewalUnderwrite returns the PolicyRenewalUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalUnderwrite() TransactionUnderwriteData {
	if o == nil || IsNil(o.PolicyRenewalUnderwrite) {
		var ret TransactionUnderwriteData
		return ret
	}
	return *o.PolicyRenewalUnderwrite
}

// GetPolicyRenewalUnderwriteOk returns a tuple with the PolicyRenewalUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalUnderwriteOk() (*TransactionUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyRenewalUnderwrite) {
		return nil, false
	}
	return o.PolicyRenewalUnderwrite, true
}

// HasPolicyRenewalUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyRenewalUnderwrite) {
		return true
	}

	return false
}

// SetPolicyRenewalUnderwrite gets a reference to the given TransactionUnderwriteData and assigns it to the PolicyRenewalUnderwrite field.
func (o *TransactionEvents) SetPolicyRenewalUnderwrite(v TransactionUnderwriteData) {
	o.PolicyRenewalUnderwrite = &v
}

// GetPolicyReversalReset returns the PolicyReversalReset field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalReset() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalReset) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalReset
}

// GetPolicyReversalResetOk returns a tuple with the PolicyReversalReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalResetOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalReset) {
		return nil, false
	}
	return o.PolicyReversalReset, true
}

// HasPolicyReversalReset returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalReset() bool {
	if o != nil && !IsNil(o.PolicyReversalReset) {
		return true
	}

	return false
}

// SetPolicyReversalReset gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalReset field.
func (o *TransactionEvents) SetPolicyReversalReset(v TransactionLocatorData) {
	o.PolicyReversalReset = &v
}

// GetPolicyChangeUpdate returns the PolicyChangeUpdate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeUpdate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeUpdate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeUpdate
}

// GetPolicyChangeUpdateOk returns a tuple with the PolicyChangeUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeUpdateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeUpdate) {
		return nil, false
	}
	return o.PolicyChangeUpdate, true
}

// HasPolicyChangeUpdate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeUpdate() bool {
	if o != nil && !IsNil(o.PolicyChangeUpdate) {
		return true
	}

	return false
}

// SetPolicyChangeUpdate gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeUpdate field.
func (o *TransactionEvents) SetPolicyChangeUpdate(v TransactionLocatorData) {
	o.PolicyChangeUpdate = &v
}

// GetPolicyReversalValidate returns the PolicyReversalValidate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalValidate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalValidate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalValidate
}

// GetPolicyReversalValidateOk returns a tuple with the PolicyReversalValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalValidateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalValidate) {
		return nil, false
	}
	return o.PolicyReversalValidate, true
}

// HasPolicyReversalValidate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalValidate() bool {
	if o != nil && !IsNil(o.PolicyReversalValidate) {
		return true
	}

	return false
}

// SetPolicyReversalValidate gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalValidate field.
func (o *TransactionEvents) SetPolicyReversalValidate(v TransactionLocatorData) {
	o.PolicyReversalValidate = &v
}

// GetPolicyChangeRefuse returns the PolicyChangeRefuse field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeRefuse() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeRefuse) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeRefuse
}

// GetPolicyChangeRefuseOk returns a tuple with the PolicyChangeRefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeRefuseOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeRefuse) {
		return nil, false
	}
	return o.PolicyChangeRefuse, true
}

// HasPolicyChangeRefuse returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeRefuse() bool {
	if o != nil && !IsNil(o.PolicyChangeRefuse) {
		return true
	}

	return false
}

// SetPolicyChangeRefuse gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeRefuse field.
func (o *TransactionEvents) SetPolicyChangeRefuse(v TransactionLocatorData) {
	o.PolicyChangeRefuse = &v
}

// GetPolicyReversalIssue returns the PolicyReversalIssue field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalIssue() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalIssue) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalIssue
}

// GetPolicyReversalIssueOk returns a tuple with the PolicyReversalIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalIssueOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalIssue) {
		return nil, false
	}
	return o.PolicyReversalIssue, true
}

// HasPolicyReversalIssue returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalIssue() bool {
	if o != nil && !IsNil(o.PolicyReversalIssue) {
		return true
	}

	return false
}

// SetPolicyReversalIssue gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalIssue field.
func (o *TransactionEvents) SetPolicyReversalIssue(v TransactionLocatorData) {
	o.PolicyReversalIssue = &v
}

// GetPolicyCancellationUpdate returns the PolicyCancellationUpdate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationUpdate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationUpdate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationUpdate
}

// GetPolicyCancellationUpdateOk returns a tuple with the PolicyCancellationUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationUpdateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationUpdate) {
		return nil, false
	}
	return o.PolicyCancellationUpdate, true
}

// HasPolicyCancellationUpdate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationUpdate() bool {
	if o != nil && !IsNil(o.PolicyCancellationUpdate) {
		return true
	}

	return false
}

// SetPolicyCancellationUpdate gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationUpdate field.
func (o *TransactionEvents) SetPolicyCancellationUpdate(v TransactionLocatorData) {
	o.PolicyCancellationUpdate = &v
}

// GetPolicyChangeManualUnderwrite returns the PolicyChangeManualUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeManualUnderwrite() TransactionManualUnderwriteData {
	if o == nil || IsNil(o.PolicyChangeManualUnderwrite) {
		var ret TransactionManualUnderwriteData
		return ret
	}
	return *o.PolicyChangeManualUnderwrite
}

// GetPolicyChangeManualUnderwriteOk returns a tuple with the PolicyChangeManualUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeManualUnderwriteOk() (*TransactionManualUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyChangeManualUnderwrite) {
		return nil, false
	}
	return o.PolicyChangeManualUnderwrite, true
}

// HasPolicyChangeManualUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeManualUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyChangeManualUnderwrite) {
		return true
	}

	return false
}

// SetPolicyChangeManualUnderwrite gets a reference to the given TransactionManualUnderwriteData and assigns it to the PolicyChangeManualUnderwrite field.
func (o *TransactionEvents) SetPolicyChangeManualUnderwrite(v TransactionManualUnderwriteData) {
	o.PolicyChangeManualUnderwrite = &v
}

// GetPolicyChangeCreate returns the PolicyChangeCreate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeCreate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeCreate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeCreate
}

// GetPolicyChangeCreateOk returns a tuple with the PolicyChangeCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeCreateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeCreate) {
		return nil, false
	}
	return o.PolicyChangeCreate, true
}

// HasPolicyChangeCreate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeCreate() bool {
	if o != nil && !IsNil(o.PolicyChangeCreate) {
		return true
	}

	return false
}

// SetPolicyChangeCreate gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeCreate field.
func (o *TransactionEvents) SetPolicyChangeCreate(v TransactionLocatorData) {
	o.PolicyChangeCreate = &v
}

// GetPolicyReinstatementUpdate returns the PolicyReinstatementUpdate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementUpdate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementUpdate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementUpdate
}

// GetPolicyReinstatementUpdateOk returns a tuple with the PolicyReinstatementUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementUpdateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementUpdate) {
		return nil, false
	}
	return o.PolicyReinstatementUpdate, true
}

// HasPolicyReinstatementUpdate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementUpdate() bool {
	if o != nil && !IsNil(o.PolicyReinstatementUpdate) {
		return true
	}

	return false
}

// SetPolicyReinstatementUpdate gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementUpdate field.
func (o *TransactionEvents) SetPolicyReinstatementUpdate(v TransactionLocatorData) {
	o.PolicyReinstatementUpdate = &v
}

// GetPolicyRenewalManualUnderwrite returns the PolicyRenewalManualUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalManualUnderwrite() TransactionManualUnderwriteData {
	if o == nil || IsNil(o.PolicyRenewalManualUnderwrite) {
		var ret TransactionManualUnderwriteData
		return ret
	}
	return *o.PolicyRenewalManualUnderwrite
}

// GetPolicyRenewalManualUnderwriteOk returns a tuple with the PolicyRenewalManualUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalManualUnderwriteOk() (*TransactionManualUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyRenewalManualUnderwrite) {
		return nil, false
	}
	return o.PolicyRenewalManualUnderwrite, true
}

// HasPolicyRenewalManualUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalManualUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyRenewalManualUnderwrite) {
		return true
	}

	return false
}

// SetPolicyRenewalManualUnderwrite gets a reference to the given TransactionManualUnderwriteData and assigns it to the PolicyRenewalManualUnderwrite field.
func (o *TransactionEvents) SetPolicyRenewalManualUnderwrite(v TransactionManualUnderwriteData) {
	o.PolicyRenewalManualUnderwrite = &v
}

// GetPolicyReinstatementDiscard returns the PolicyReinstatementDiscard field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementDiscard() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementDiscard) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementDiscard
}

// GetPolicyReinstatementDiscardOk returns a tuple with the PolicyReinstatementDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementDiscardOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementDiscard) {
		return nil, false
	}
	return o.PolicyReinstatementDiscard, true
}

// HasPolicyReinstatementDiscard returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementDiscard() bool {
	if o != nil && !IsNil(o.PolicyReinstatementDiscard) {
		return true
	}

	return false
}

// SetPolicyReinstatementDiscard gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementDiscard field.
func (o *TransactionEvents) SetPolicyReinstatementDiscard(v TransactionLocatorData) {
	o.PolicyReinstatementDiscard = &v
}

// GetPolicyRenewalPrice returns the PolicyRenewalPrice field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalPrice() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalPrice) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalPrice
}

// GetPolicyRenewalPriceOk returns a tuple with the PolicyRenewalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalPriceOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalPrice) {
		return nil, false
	}
	return o.PolicyRenewalPrice, true
}

// HasPolicyRenewalPrice returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalPrice() bool {
	if o != nil && !IsNil(o.PolicyRenewalPrice) {
		return true
	}

	return false
}

// SetPolicyRenewalPrice gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalPrice field.
func (o *TransactionEvents) SetPolicyRenewalPrice(v TransactionLocatorData) {
	o.PolicyRenewalPrice = &v
}

// GetPolicyReversalDiscard returns the PolicyReversalDiscard field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalDiscard() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalDiscard) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalDiscard
}

// GetPolicyReversalDiscardOk returns a tuple with the PolicyReversalDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalDiscardOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalDiscard) {
		return nil, false
	}
	return o.PolicyReversalDiscard, true
}

// HasPolicyReversalDiscard returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalDiscard() bool {
	if o != nil && !IsNil(o.PolicyReversalDiscard) {
		return true
	}

	return false
}

// SetPolicyReversalDiscard gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalDiscard field.
func (o *TransactionEvents) SetPolicyReversalDiscard(v TransactionLocatorData) {
	o.PolicyReversalDiscard = &v
}

// GetPolicyReinstatementPrice returns the PolicyReinstatementPrice field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementPrice() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementPrice) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementPrice
}

// GetPolicyReinstatementPriceOk returns a tuple with the PolicyReinstatementPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementPriceOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementPrice) {
		return nil, false
	}
	return o.PolicyReinstatementPrice, true
}

// HasPolicyReinstatementPrice returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementPrice() bool {
	if o != nil && !IsNil(o.PolicyReinstatementPrice) {
		return true
	}

	return false
}

// SetPolicyReinstatementPrice gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementPrice field.
func (o *TransactionEvents) SetPolicyReinstatementPrice(v TransactionLocatorData) {
	o.PolicyReinstatementPrice = &v
}

// GetPolicyChangeValidate returns the PolicyChangeValidate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeValidate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeValidate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeValidate
}

// GetPolicyChangeValidateOk returns a tuple with the PolicyChangeValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeValidateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeValidate) {
		return nil, false
	}
	return o.PolicyChangeValidate, true
}

// HasPolicyChangeValidate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeValidate() bool {
	if o != nil && !IsNil(o.PolicyChangeValidate) {
		return true
	}

	return false
}

// SetPolicyChangeValidate gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeValidate field.
func (o *TransactionEvents) SetPolicyChangeValidate(v TransactionLocatorData) {
	o.PolicyChangeValidate = &v
}

// GetPolicyCancellationUnderwrite returns the PolicyCancellationUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationUnderwrite() TransactionUnderwriteData {
	if o == nil || IsNil(o.PolicyCancellationUnderwrite) {
		var ret TransactionUnderwriteData
		return ret
	}
	return *o.PolicyCancellationUnderwrite
}

// GetPolicyCancellationUnderwriteOk returns a tuple with the PolicyCancellationUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationUnderwriteOk() (*TransactionUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyCancellationUnderwrite) {
		return nil, false
	}
	return o.PolicyCancellationUnderwrite, true
}

// HasPolicyCancellationUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyCancellationUnderwrite) {
		return true
	}

	return false
}

// SetPolicyCancellationUnderwrite gets a reference to the given TransactionUnderwriteData and assigns it to the PolicyCancellationUnderwrite field.
func (o *TransactionEvents) SetPolicyCancellationUnderwrite(v TransactionUnderwriteData) {
	o.PolicyCancellationUnderwrite = &v
}

// GetPolicyChangeUnderwrite returns the PolicyChangeUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeUnderwrite() TransactionUnderwriteData {
	if o == nil || IsNil(o.PolicyChangeUnderwrite) {
		var ret TransactionUnderwriteData
		return ret
	}
	return *o.PolicyChangeUnderwrite
}

// GetPolicyChangeUnderwriteOk returns a tuple with the PolicyChangeUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeUnderwriteOk() (*TransactionUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyChangeUnderwrite) {
		return nil, false
	}
	return o.PolicyChangeUnderwrite, true
}

// HasPolicyChangeUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyChangeUnderwrite) {
		return true
	}

	return false
}

// SetPolicyChangeUnderwrite gets a reference to the given TransactionUnderwriteData and assigns it to the PolicyChangeUnderwrite field.
func (o *TransactionEvents) SetPolicyChangeUnderwrite(v TransactionUnderwriteData) {
	o.PolicyChangeUnderwrite = &v
}

// GetPolicyRenewalValidate returns the PolicyRenewalValidate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalValidate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalValidate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalValidate
}

// GetPolicyRenewalValidateOk returns a tuple with the PolicyRenewalValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalValidateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalValidate) {
		return nil, false
	}
	return o.PolicyRenewalValidate, true
}

// HasPolicyRenewalValidate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalValidate() bool {
	if o != nil && !IsNil(o.PolicyRenewalValidate) {
		return true
	}

	return false
}

// SetPolicyRenewalValidate gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalValidate field.
func (o *TransactionEvents) SetPolicyRenewalValidate(v TransactionLocatorData) {
	o.PolicyRenewalValidate = &v
}

// GetPolicyReinstatementAccept returns the PolicyReinstatementAccept field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementAccept() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementAccept) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementAccept
}

// GetPolicyReinstatementAcceptOk returns a tuple with the PolicyReinstatementAccept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementAcceptOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementAccept) {
		return nil, false
	}
	return o.PolicyReinstatementAccept, true
}

// HasPolicyReinstatementAccept returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementAccept() bool {
	if o != nil && !IsNil(o.PolicyReinstatementAccept) {
		return true
	}

	return false
}

// SetPolicyReinstatementAccept gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementAccept field.
func (o *TransactionEvents) SetPolicyReinstatementAccept(v TransactionLocatorData) {
	o.PolicyReinstatementAccept = &v
}

// GetPolicyReversalPrice returns the PolicyReversalPrice field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalPrice() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalPrice) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalPrice
}

// GetPolicyReversalPriceOk returns a tuple with the PolicyReversalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalPriceOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalPrice) {
		return nil, false
	}
	return o.PolicyReversalPrice, true
}

// HasPolicyReversalPrice returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalPrice() bool {
	if o != nil && !IsNil(o.PolicyReversalPrice) {
		return true
	}

	return false
}

// SetPolicyReversalPrice gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalPrice field.
func (o *TransactionEvents) SetPolicyReversalPrice(v TransactionLocatorData) {
	o.PolicyReversalPrice = &v
}

// GetPolicyCancellationCreate returns the PolicyCancellationCreate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationCreate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationCreate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationCreate
}

// GetPolicyCancellationCreateOk returns a tuple with the PolicyCancellationCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationCreateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationCreate) {
		return nil, false
	}
	return o.PolicyCancellationCreate, true
}

// HasPolicyCancellationCreate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationCreate() bool {
	if o != nil && !IsNil(o.PolicyCancellationCreate) {
		return true
	}

	return false
}

// SetPolicyCancellationCreate gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationCreate field.
func (o *TransactionEvents) SetPolicyCancellationCreate(v TransactionLocatorData) {
	o.PolicyCancellationCreate = &v
}

// GetPolicyReinstatementRefuse returns the PolicyReinstatementRefuse field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementRefuse() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementRefuse) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementRefuse
}

// GetPolicyReinstatementRefuseOk returns a tuple with the PolicyReinstatementRefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementRefuseOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementRefuse) {
		return nil, false
	}
	return o.PolicyReinstatementRefuse, true
}

// HasPolicyReinstatementRefuse returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementRefuse() bool {
	if o != nil && !IsNil(o.PolicyReinstatementRefuse) {
		return true
	}

	return false
}

// SetPolicyReinstatementRefuse gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementRefuse field.
func (o *TransactionEvents) SetPolicyReinstatementRefuse(v TransactionLocatorData) {
	o.PolicyReinstatementRefuse = &v
}

// GetPolicyRenewalCreate returns the PolicyRenewalCreate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalCreate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalCreate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalCreate
}

// GetPolicyRenewalCreateOk returns a tuple with the PolicyRenewalCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalCreateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalCreate) {
		return nil, false
	}
	return o.PolicyRenewalCreate, true
}

// HasPolicyRenewalCreate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalCreate() bool {
	if o != nil && !IsNil(o.PolicyRenewalCreate) {
		return true
	}

	return false
}

// SetPolicyRenewalCreate gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalCreate field.
func (o *TransactionEvents) SetPolicyRenewalCreate(v TransactionLocatorData) {
	o.PolicyRenewalCreate = &v
}

// GetPolicyRenewalReset returns the PolicyRenewalReset field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalReset() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalReset) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalReset
}

// GetPolicyRenewalResetOk returns a tuple with the PolicyRenewalReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalResetOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalReset) {
		return nil, false
	}
	return o.PolicyRenewalReset, true
}

// HasPolicyRenewalReset returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalReset() bool {
	if o != nil && !IsNil(o.PolicyRenewalReset) {
		return true
	}

	return false
}

// SetPolicyRenewalReset gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalReset field.
func (o *TransactionEvents) SetPolicyRenewalReset(v TransactionLocatorData) {
	o.PolicyRenewalReset = &v
}

// GetPolicyCancellationManualUnderwrite returns the PolicyCancellationManualUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationManualUnderwrite() TransactionManualUnderwriteData {
	if o == nil || IsNil(o.PolicyCancellationManualUnderwrite) {
		var ret TransactionManualUnderwriteData
		return ret
	}
	return *o.PolicyCancellationManualUnderwrite
}

// GetPolicyCancellationManualUnderwriteOk returns a tuple with the PolicyCancellationManualUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationManualUnderwriteOk() (*TransactionManualUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyCancellationManualUnderwrite) {
		return nil, false
	}
	return o.PolicyCancellationManualUnderwrite, true
}

// HasPolicyCancellationManualUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationManualUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyCancellationManualUnderwrite) {
		return true
	}

	return false
}

// SetPolicyCancellationManualUnderwrite gets a reference to the given TransactionManualUnderwriteData and assigns it to the PolicyCancellationManualUnderwrite field.
func (o *TransactionEvents) SetPolicyCancellationManualUnderwrite(v TransactionManualUnderwriteData) {
	o.PolicyCancellationManualUnderwrite = &v
}

// GetPolicyChangePrice returns the PolicyChangePrice field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangePrice() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangePrice) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangePrice
}

// GetPolicyChangePriceOk returns a tuple with the PolicyChangePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangePriceOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangePrice) {
		return nil, false
	}
	return o.PolicyChangePrice, true
}

// HasPolicyChangePrice returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangePrice() bool {
	if o != nil && !IsNil(o.PolicyChangePrice) {
		return true
	}

	return false
}

// SetPolicyChangePrice gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangePrice field.
func (o *TransactionEvents) SetPolicyChangePrice(v TransactionLocatorData) {
	o.PolicyChangePrice = &v
}

// GetPolicyCancellationDiscard returns the PolicyCancellationDiscard field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyCancellationDiscard() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyCancellationDiscard) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyCancellationDiscard
}

// GetPolicyCancellationDiscardOk returns a tuple with the PolicyCancellationDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyCancellationDiscardOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyCancellationDiscard) {
		return nil, false
	}
	return o.PolicyCancellationDiscard, true
}

// HasPolicyCancellationDiscard returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyCancellationDiscard() bool {
	if o != nil && !IsNil(o.PolicyCancellationDiscard) {
		return true
	}

	return false
}

// SetPolicyCancellationDiscard gets a reference to the given TransactionLocatorData and assigns it to the PolicyCancellationDiscard field.
func (o *TransactionEvents) SetPolicyCancellationDiscard(v TransactionLocatorData) {
	o.PolicyCancellationDiscard = &v
}

// GetPolicyRenewalUpdate returns the PolicyRenewalUpdate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalUpdate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalUpdate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalUpdate
}

// GetPolicyRenewalUpdateOk returns a tuple with the PolicyRenewalUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalUpdateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalUpdate) {
		return nil, false
	}
	return o.PolicyRenewalUpdate, true
}

// HasPolicyRenewalUpdate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalUpdate() bool {
	if o != nil && !IsNil(o.PolicyRenewalUpdate) {
		return true
	}

	return false
}

// SetPolicyRenewalUpdate gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalUpdate field.
func (o *TransactionEvents) SetPolicyRenewalUpdate(v TransactionLocatorData) {
	o.PolicyRenewalUpdate = &v
}

// GetPolicyRenewalIssue returns the PolicyRenewalIssue field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalIssue() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalIssue) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalIssue
}

// GetPolicyRenewalIssueOk returns a tuple with the PolicyRenewalIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalIssueOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalIssue) {
		return nil, false
	}
	return o.PolicyRenewalIssue, true
}

// HasPolicyRenewalIssue returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalIssue() bool {
	if o != nil && !IsNil(o.PolicyRenewalIssue) {
		return true
	}

	return false
}

// SetPolicyRenewalIssue gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalIssue field.
func (o *TransactionEvents) SetPolicyRenewalIssue(v TransactionLocatorData) {
	o.PolicyRenewalIssue = &v
}

// GetPolicyReinstatementIssue returns the PolicyReinstatementIssue field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementIssue() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementIssue) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementIssue
}

// GetPolicyReinstatementIssueOk returns a tuple with the PolicyReinstatementIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementIssueOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementIssue) {
		return nil, false
	}
	return o.PolicyReinstatementIssue, true
}

// HasPolicyReinstatementIssue returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementIssue() bool {
	if o != nil && !IsNil(o.PolicyReinstatementIssue) {
		return true
	}

	return false
}

// SetPolicyReinstatementIssue gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementIssue field.
func (o *TransactionEvents) SetPolicyReinstatementIssue(v TransactionLocatorData) {
	o.PolicyReinstatementIssue = &v
}

// GetPolicyChangeReset returns the PolicyChangeReset field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyChangeReset() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyChangeReset) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyChangeReset
}

// GetPolicyChangeResetOk returns a tuple with the PolicyChangeReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyChangeResetOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyChangeReset) {
		return nil, false
	}
	return o.PolicyChangeReset, true
}

// HasPolicyChangeReset returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyChangeReset() bool {
	if o != nil && !IsNil(o.PolicyChangeReset) {
		return true
	}

	return false
}

// SetPolicyChangeReset gets a reference to the given TransactionLocatorData and assigns it to the PolicyChangeReset field.
func (o *TransactionEvents) SetPolicyChangeReset(v TransactionLocatorData) {
	o.PolicyChangeReset = &v
}

// GetPolicyReversalManualUnderwrite returns the PolicyReversalManualUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalManualUnderwrite() TransactionManualUnderwriteData {
	if o == nil || IsNil(o.PolicyReversalManualUnderwrite) {
		var ret TransactionManualUnderwriteData
		return ret
	}
	return *o.PolicyReversalManualUnderwrite
}

// GetPolicyReversalManualUnderwriteOk returns a tuple with the PolicyReversalManualUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalManualUnderwriteOk() (*TransactionManualUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyReversalManualUnderwrite) {
		return nil, false
	}
	return o.PolicyReversalManualUnderwrite, true
}

// HasPolicyReversalManualUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalManualUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyReversalManualUnderwrite) {
		return true
	}

	return false
}

// SetPolicyReversalManualUnderwrite gets a reference to the given TransactionManualUnderwriteData and assigns it to the PolicyReversalManualUnderwrite field.
func (o *TransactionEvents) SetPolicyReversalManualUnderwrite(v TransactionManualUnderwriteData) {
	o.PolicyReversalManualUnderwrite = &v
}

// GetPolicyReinstatementUnderwrite returns the PolicyReinstatementUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementUnderwrite() TransactionUnderwriteData {
	if o == nil || IsNil(o.PolicyReinstatementUnderwrite) {
		var ret TransactionUnderwriteData
		return ret
	}
	return *o.PolicyReinstatementUnderwrite
}

// GetPolicyReinstatementUnderwriteOk returns a tuple with the PolicyReinstatementUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementUnderwriteOk() (*TransactionUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementUnderwrite) {
		return nil, false
	}
	return o.PolicyReinstatementUnderwrite, true
}

// HasPolicyReinstatementUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyReinstatementUnderwrite) {
		return true
	}

	return false
}

// SetPolicyReinstatementUnderwrite gets a reference to the given TransactionUnderwriteData and assigns it to the PolicyReinstatementUnderwrite field.
func (o *TransactionEvents) SetPolicyReinstatementUnderwrite(v TransactionUnderwriteData) {
	o.PolicyReinstatementUnderwrite = &v
}

// GetPolicyReinstatementValidate returns the PolicyReinstatementValidate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementValidate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReinstatementValidate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReinstatementValidate
}

// GetPolicyReinstatementValidateOk returns a tuple with the PolicyReinstatementValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementValidateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementValidate) {
		return nil, false
	}
	return o.PolicyReinstatementValidate, true
}

// HasPolicyReinstatementValidate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementValidate() bool {
	if o != nil && !IsNil(o.PolicyReinstatementValidate) {
		return true
	}

	return false
}

// SetPolicyReinstatementValidate gets a reference to the given TransactionLocatorData and assigns it to the PolicyReinstatementValidate field.
func (o *TransactionEvents) SetPolicyReinstatementValidate(v TransactionLocatorData) {
	o.PolicyReinstatementValidate = &v
}

// GetPolicyReinstatementManualUnderwrite returns the PolicyReinstatementManualUnderwrite field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReinstatementManualUnderwrite() TransactionManualUnderwriteData {
	if o == nil || IsNil(o.PolicyReinstatementManualUnderwrite) {
		var ret TransactionManualUnderwriteData
		return ret
	}
	return *o.PolicyReinstatementManualUnderwrite
}

// GetPolicyReinstatementManualUnderwriteOk returns a tuple with the PolicyReinstatementManualUnderwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReinstatementManualUnderwriteOk() (*TransactionManualUnderwriteData, bool) {
	if o == nil || IsNil(o.PolicyReinstatementManualUnderwrite) {
		return nil, false
	}
	return o.PolicyReinstatementManualUnderwrite, true
}

// HasPolicyReinstatementManualUnderwrite returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReinstatementManualUnderwrite() bool {
	if o != nil && !IsNil(o.PolicyReinstatementManualUnderwrite) {
		return true
	}

	return false
}

// SetPolicyReinstatementManualUnderwrite gets a reference to the given TransactionManualUnderwriteData and assigns it to the PolicyReinstatementManualUnderwrite field.
func (o *TransactionEvents) SetPolicyReinstatementManualUnderwrite(v TransactionManualUnderwriteData) {
	o.PolicyReinstatementManualUnderwrite = &v
}

// GetPolicyReversalRefuse returns the PolicyReversalRefuse field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalRefuse() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalRefuse) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalRefuse
}

// GetPolicyReversalRefuseOk returns a tuple with the PolicyReversalRefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalRefuseOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalRefuse) {
		return nil, false
	}
	return o.PolicyReversalRefuse, true
}

// HasPolicyReversalRefuse returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalRefuse() bool {
	if o != nil && !IsNil(o.PolicyReversalRefuse) {
		return true
	}

	return false
}

// SetPolicyReversalRefuse gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalRefuse field.
func (o *TransactionEvents) SetPolicyReversalRefuse(v TransactionLocatorData) {
	o.PolicyReversalRefuse = &v
}

// GetPolicyRenewalDiscard returns the PolicyRenewalDiscard field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyRenewalDiscard() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyRenewalDiscard) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyRenewalDiscard
}

// GetPolicyRenewalDiscardOk returns a tuple with the PolicyRenewalDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyRenewalDiscardOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyRenewalDiscard) {
		return nil, false
	}
	return o.PolicyRenewalDiscard, true
}

// HasPolicyRenewalDiscard returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyRenewalDiscard() bool {
	if o != nil && !IsNil(o.PolicyRenewalDiscard) {
		return true
	}

	return false
}

// SetPolicyRenewalDiscard gets a reference to the given TransactionLocatorData and assigns it to the PolicyRenewalDiscard field.
func (o *TransactionEvents) SetPolicyRenewalDiscard(v TransactionLocatorData) {
	o.PolicyRenewalDiscard = &v
}

// GetPolicyReversalCreate returns the PolicyReversalCreate field value if set, zero value otherwise.
func (o *TransactionEvents) GetPolicyReversalCreate() TransactionLocatorData {
	if o == nil || IsNil(o.PolicyReversalCreate) {
		var ret TransactionLocatorData
		return ret
	}
	return *o.PolicyReversalCreate
}

// GetPolicyReversalCreateOk returns a tuple with the PolicyReversalCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionEvents) GetPolicyReversalCreateOk() (*TransactionLocatorData, bool) {
	if o == nil || IsNil(o.PolicyReversalCreate) {
		return nil, false
	}
	return o.PolicyReversalCreate, true
}

// HasPolicyReversalCreate returns a boolean if a field has been set.
func (o *TransactionEvents) HasPolicyReversalCreate() bool {
	if o != nil && !IsNil(o.PolicyReversalCreate) {
		return true
	}

	return false
}

// SetPolicyReversalCreate gets a reference to the given TransactionLocatorData and assigns it to the PolicyReversalCreate field.
func (o *TransactionEvents) SetPolicyReversalCreate(v TransactionLocatorData) {
	o.PolicyReversalCreate = &v
}

func (o TransactionEvents) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyRenewalAccept) {
		toSerialize["policy.renewal.accept"] = o.PolicyRenewalAccept
	}
	if !IsNil(o.PolicyCancellationReset) {
		toSerialize["policy.cancellation.reset"] = o.PolicyCancellationReset
	}
	if !IsNil(o.PolicyCancellationIssue) {
		toSerialize["policy.cancellation.issue"] = o.PolicyCancellationIssue
	}
	if !IsNil(o.PolicyReversalAccept) {
		toSerialize["policy.reversal.accept"] = o.PolicyReversalAccept
	}
	if !IsNil(o.PolicyCancellationAccept) {
		toSerialize["policy.cancellation.accept"] = o.PolicyCancellationAccept
	}
	if !IsNil(o.PolicyChangeDiscard) {
		toSerialize["policy.change.discard"] = o.PolicyChangeDiscard
	}
	if !IsNil(o.PolicyChangeIssue) {
		toSerialize["policy.change.issue"] = o.PolicyChangeIssue
	}
	if !IsNil(o.PolicyCancellationValidate) {
		toSerialize["policy.cancellation.validate"] = o.PolicyCancellationValidate
	}
	if !IsNil(o.PolicyReversalUnderwrite) {
		toSerialize["policy.reversal.underwrite"] = o.PolicyReversalUnderwrite
	}
	if !IsNil(o.PolicyCancellationPrice) {
		toSerialize["policy.cancellation.price"] = o.PolicyCancellationPrice
	}
	if !IsNil(o.PolicyReversalUpdate) {
		toSerialize["policy.reversal.update"] = o.PolicyReversalUpdate
	}
	if !IsNil(o.PolicyCancellationRefuse) {
		toSerialize["policy.cancellation.refuse"] = o.PolicyCancellationRefuse
	}
	if !IsNil(o.PolicyChangeAccept) {
		toSerialize["policy.change.accept"] = o.PolicyChangeAccept
	}
	if !IsNil(o.PolicyRenewalRefuse) {
		toSerialize["policy.renewal.refuse"] = o.PolicyRenewalRefuse
	}
	if !IsNil(o.PolicyReinstatementCreate) {
		toSerialize["policy.reinstatement.create"] = o.PolicyReinstatementCreate
	}
	if !IsNil(o.PolicyReinstatementReset) {
		toSerialize["policy.reinstatement.reset"] = o.PolicyReinstatementReset
	}
	if !IsNil(o.PolicyRenewalUnderwrite) {
		toSerialize["policy.renewal.underwrite"] = o.PolicyRenewalUnderwrite
	}
	if !IsNil(o.PolicyReversalReset) {
		toSerialize["policy.reversal.reset"] = o.PolicyReversalReset
	}
	if !IsNil(o.PolicyChangeUpdate) {
		toSerialize["policy.change.update"] = o.PolicyChangeUpdate
	}
	if !IsNil(o.PolicyReversalValidate) {
		toSerialize["policy.reversal.validate"] = o.PolicyReversalValidate
	}
	if !IsNil(o.PolicyChangeRefuse) {
		toSerialize["policy.change.refuse"] = o.PolicyChangeRefuse
	}
	if !IsNil(o.PolicyReversalIssue) {
		toSerialize["policy.reversal.issue"] = o.PolicyReversalIssue
	}
	if !IsNil(o.PolicyCancellationUpdate) {
		toSerialize["policy.cancellation.update"] = o.PolicyCancellationUpdate
	}
	if !IsNil(o.PolicyChangeManualUnderwrite) {
		toSerialize["policy.change.manualUnderwrite"] = o.PolicyChangeManualUnderwrite
	}
	if !IsNil(o.PolicyChangeCreate) {
		toSerialize["policy.change.create"] = o.PolicyChangeCreate
	}
	if !IsNil(o.PolicyReinstatementUpdate) {
		toSerialize["policy.reinstatement.update"] = o.PolicyReinstatementUpdate
	}
	if !IsNil(o.PolicyRenewalManualUnderwrite) {
		toSerialize["policy.renewal.manualUnderwrite"] = o.PolicyRenewalManualUnderwrite
	}
	if !IsNil(o.PolicyReinstatementDiscard) {
		toSerialize["policy.reinstatement.discard"] = o.PolicyReinstatementDiscard
	}
	if !IsNil(o.PolicyRenewalPrice) {
		toSerialize["policy.renewal.price"] = o.PolicyRenewalPrice
	}
	if !IsNil(o.PolicyReversalDiscard) {
		toSerialize["policy.reversal.discard"] = o.PolicyReversalDiscard
	}
	if !IsNil(o.PolicyReinstatementPrice) {
		toSerialize["policy.reinstatement.price"] = o.PolicyReinstatementPrice
	}
	if !IsNil(o.PolicyChangeValidate) {
		toSerialize["policy.change.validate"] = o.PolicyChangeValidate
	}
	if !IsNil(o.PolicyCancellationUnderwrite) {
		toSerialize["policy.cancellation.underwrite"] = o.PolicyCancellationUnderwrite
	}
	if !IsNil(o.PolicyChangeUnderwrite) {
		toSerialize["policy.change.underwrite"] = o.PolicyChangeUnderwrite
	}
	if !IsNil(o.PolicyRenewalValidate) {
		toSerialize["policy.renewal.validate"] = o.PolicyRenewalValidate
	}
	if !IsNil(o.PolicyReinstatementAccept) {
		toSerialize["policy.reinstatement.accept"] = o.PolicyReinstatementAccept
	}
	if !IsNil(o.PolicyReversalPrice) {
		toSerialize["policy.reversal.price"] = o.PolicyReversalPrice
	}
	if !IsNil(o.PolicyCancellationCreate) {
		toSerialize["policy.cancellation.create"] = o.PolicyCancellationCreate
	}
	if !IsNil(o.PolicyReinstatementRefuse) {
		toSerialize["policy.reinstatement.refuse"] = o.PolicyReinstatementRefuse
	}
	if !IsNil(o.PolicyRenewalCreate) {
		toSerialize["policy.renewal.create"] = o.PolicyRenewalCreate
	}
	if !IsNil(o.PolicyRenewalReset) {
		toSerialize["policy.renewal.reset"] = o.PolicyRenewalReset
	}
	if !IsNil(o.PolicyCancellationManualUnderwrite) {
		toSerialize["policy.cancellation.manualUnderwrite"] = o.PolicyCancellationManualUnderwrite
	}
	if !IsNil(o.PolicyChangePrice) {
		toSerialize["policy.change.price"] = o.PolicyChangePrice
	}
	if !IsNil(o.PolicyCancellationDiscard) {
		toSerialize["policy.cancellation.discard"] = o.PolicyCancellationDiscard
	}
	if !IsNil(o.PolicyRenewalUpdate) {
		toSerialize["policy.renewal.update"] = o.PolicyRenewalUpdate
	}
	if !IsNil(o.PolicyRenewalIssue) {
		toSerialize["policy.renewal.issue"] = o.PolicyRenewalIssue
	}
	if !IsNil(o.PolicyReinstatementIssue) {
		toSerialize["policy.reinstatement.issue"] = o.PolicyReinstatementIssue
	}
	if !IsNil(o.PolicyChangeReset) {
		toSerialize["policy.change.reset"] = o.PolicyChangeReset
	}
	if !IsNil(o.PolicyReversalManualUnderwrite) {
		toSerialize["policy.reversal.manualUnderwrite"] = o.PolicyReversalManualUnderwrite
	}
	if !IsNil(o.PolicyReinstatementUnderwrite) {
		toSerialize["policy.reinstatement.underwrite"] = o.PolicyReinstatementUnderwrite
	}
	if !IsNil(o.PolicyReinstatementValidate) {
		toSerialize["policy.reinstatement.validate"] = o.PolicyReinstatementValidate
	}
	if !IsNil(o.PolicyReinstatementManualUnderwrite) {
		toSerialize["policy.reinstatement.manualUnderwrite"] = o.PolicyReinstatementManualUnderwrite
	}
	if !IsNil(o.PolicyReversalRefuse) {
		toSerialize["policy.reversal.refuse"] = o.PolicyReversalRefuse
	}
	if !IsNil(o.PolicyRenewalDiscard) {
		toSerialize["policy.renewal.discard"] = o.PolicyRenewalDiscard
	}
	if !IsNil(o.PolicyReversalCreate) {
		toSerialize["policy.reversal.create"] = o.PolicyReversalCreate
	}
	return toSerialize, nil
}

type NullableTransactionEvents struct {
	value *TransactionEvents
	isSet bool
}

func (v NullableTransactionEvents) Get() *TransactionEvents {
	return v.value
}

func (v *NullableTransactionEvents) Set(val *TransactionEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEvents(val *TransactionEvents) *NullableTransactionEvents {
	return &NullableTransactionEvents{value: val, isSet: true}
}

func (v NullableTransactionEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
