/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ValidationItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationItem{}

// ValidationItem struct for ValidationItem
type ValidationItem struct {
	ElementType string   `json:"elementType"`
	Locator     *string  `json:"locator,omitempty"`
	Errors      []string `json:"errors"`
}

type _ValidationItem ValidationItem

// NewValidationItem instantiates a new ValidationItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationItem(elementType string, errors []string) *ValidationItem {
	this := ValidationItem{}
	this.ElementType = elementType
	this.Errors = errors
	return &this
}

// NewValidationItemWithDefaults instantiates a new ValidationItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationItemWithDefaults() *ValidationItem {
	this := ValidationItem{}
	return &this
}

// GetElementType returns the ElementType field value
func (o *ValidationItem) GetElementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value
// and a boolean to check if the value has been set.
func (o *ValidationItem) GetElementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementType, true
}

// SetElementType sets field value
func (o *ValidationItem) SetElementType(v string) {
	o.ElementType = v
}

// GetLocator returns the Locator field value if set, zero value otherwise.
func (o *ValidationItem) GetLocator() string {
	if o == nil || IsNil(o.Locator) {
		var ret string
		return ret
	}
	return *o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationItem) GetLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.Locator) {
		return nil, false
	}
	return o.Locator, true
}

// HasLocator returns a boolean if a field has been set.
func (o *ValidationItem) HasLocator() bool {
	if o != nil && !IsNil(o.Locator) {
		return true
	}

	return false
}

// SetLocator gets a reference to the given string and assigns it to the Locator field.
func (o *ValidationItem) SetLocator(v string) {
	o.Locator = &v
}

// GetErrors returns the Errors field value
func (o *ValidationItem) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ValidationItem) GetErrorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ValidationItem) SetErrors(v []string) {
	o.Errors = v
}

func (o ValidationItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["elementType"] = o.ElementType
	if !IsNil(o.Locator) {
		toSerialize["locator"] = o.Locator
	}
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *ValidationItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"elementType",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidationItem := _ValidationItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidationItem)

	if err != nil {
		return err
	}

	*o = ValidationItem(varValidationItem)

	return err
}

type NullableValidationItem struct {
	value *ValidationItem
	isSet bool
}

func (v NullableValidationItem) Get() *ValidationItem {
	return v.value
}

func (v *NullableValidationItem) Set(val *ValidationItem) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationItem) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationItem(val *ValidationItem) *NullableValidationItem {
	return &NullableValidationItem{value: val, isSet: true}
}

func (v NullableValidationItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
