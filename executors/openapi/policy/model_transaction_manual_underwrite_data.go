/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package policy

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionManualUnderwriteData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionManualUnderwriteData{}

// TransactionManualUnderwriteData struct for TransactionManualUnderwriteData
type TransactionManualUnderwriteData struct {
	PolicyLocator      string `json:"policyLocator"`
	TransactionLocator string `json:"transactionLocator"`
}

type _TransactionManualUnderwriteData TransactionManualUnderwriteData

// NewTransactionManualUnderwriteData instantiates a new TransactionManualUnderwriteData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionManualUnderwriteData(policyLocator string, transactionLocator string) *TransactionManualUnderwriteData {
	this := TransactionManualUnderwriteData{}
	this.PolicyLocator = policyLocator
	this.TransactionLocator = transactionLocator
	return &this
}

// NewTransactionManualUnderwriteDataWithDefaults instantiates a new TransactionManualUnderwriteData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionManualUnderwriteDataWithDefaults() *TransactionManualUnderwriteData {
	this := TransactionManualUnderwriteData{}
	return &this
}

// GetPolicyLocator returns the PolicyLocator field value
func (o *TransactionManualUnderwriteData) GetPolicyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value
// and a boolean to check if the value has been set.
func (o *TransactionManualUnderwriteData) GetPolicyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocator, true
}

// SetPolicyLocator sets field value
func (o *TransactionManualUnderwriteData) SetPolicyLocator(v string) {
	o.PolicyLocator = v
}

// GetTransactionLocator returns the TransactionLocator field value
func (o *TransactionManualUnderwriteData) GetTransactionLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value
// and a boolean to check if the value has been set.
func (o *TransactionManualUnderwriteData) GetTransactionLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionLocator, true
}

// SetTransactionLocator sets field value
func (o *TransactionManualUnderwriteData) SetTransactionLocator(v string) {
	o.TransactionLocator = v
}

func (o TransactionManualUnderwriteData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionManualUnderwriteData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policyLocator"] = o.PolicyLocator
	toSerialize["transactionLocator"] = o.TransactionLocator
	return toSerialize, nil
}

func (o *TransactionManualUnderwriteData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policyLocator",
		"transactionLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionManualUnderwriteData := _TransactionManualUnderwriteData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionManualUnderwriteData)

	if err != nil {
		return err
	}

	*o = TransactionManualUnderwriteData(varTransactionManualUnderwriteData)

	return err
}

type NullableTransactionManualUnderwriteData struct {
	value *TransactionManualUnderwriteData
	isSet bool
}

func (v NullableTransactionManualUnderwriteData) Get() *TransactionManualUnderwriteData {
	return v.value
}

func (v *NullableTransactionManualUnderwriteData) Set(val *TransactionManualUnderwriteData) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionManualUnderwriteData) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionManualUnderwriteData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionManualUnderwriteData(val *TransactionManualUnderwriteData) *NullableTransactionManualUnderwriteData {
	return &NullableTransactionManualUnderwriteData{value: val, isSet: true}
}

func (v NullableTransactionManualUnderwriteData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionManualUnderwriteData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
