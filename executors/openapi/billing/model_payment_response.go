/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PaymentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentResponse{}

// PaymentResponse struct for PaymentResponse
type PaymentResponse struct {
	Locator                        string                            `json:"locator"`
	PaymentState                   string                            `json:"paymentState"`
	Type                           string                            `json:"type"`
	Currency                       string                            `json:"currency"`
	Amount                         float32                           `json:"amount"`
	RemainingAmount                *float32                          `json:"remainingAmount,omitempty"`
	Data                           map[string]map[string]interface{} `json:"data,omitempty"`
	CreatedAt                      time.Time                         `json:"createdAt"`
	CreatedBy                      string                            `json:"createdBy"`
	AccountLocator                 *string                           `json:"accountLocator,omitempty"`
	Targets                        []CreditItem                      `json:"targets"`
	ExternalCashTransactionLocator *string                           `json:"externalCashTransactionLocator,omitempty"`
	ValidationResult               *ValidationResult                 `json:"validationResult,omitempty"`
	PostedAt                       *time.Time                        `json:"postedAt,omitempty"`
	ReversalReason                 *string                           `json:"reversalReason,omitempty"`
	ReversedAt                     *time.Time                        `json:"reversedAt,omitempty"`
	ReversedBy                     *string                           `json:"reversedBy,omitempty"`
	ShortfallCreditLocators        []string                          `json:"shortfallCreditLocators"`
	Subpayments                    []Subpayment                      `json:"subpayments"`
	PaymentMode                    *string                           `json:"paymentMode,omitempty"`
	AggregatePaymentLocator        *string                           `json:"aggregatePaymentLocator,omitempty"`
}

type _PaymentResponse PaymentResponse

// NewPaymentResponse instantiates a new PaymentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentResponse(locator string, paymentState string, type_ string, currency string, amount float32, createdAt time.Time, createdBy string, targets []CreditItem, shortfallCreditLocators []string, subpayments []Subpayment) *PaymentResponse {
	this := PaymentResponse{}
	this.Locator = locator
	this.PaymentState = paymentState
	this.Type = type_
	this.Currency = currency
	this.Amount = amount
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Targets = targets
	this.ShortfallCreditLocators = shortfallCreditLocators
	this.Subpayments = subpayments
	return &this
}

// NewPaymentResponseWithDefaults instantiates a new PaymentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentResponseWithDefaults() *PaymentResponse {
	this := PaymentResponse{}
	return &this
}

// GetLocator returns the Locator field value
func (o *PaymentResponse) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *PaymentResponse) SetLocator(v string) {
	o.Locator = v
}

// GetPaymentState returns the PaymentState field value
func (o *PaymentResponse) GetPaymentState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentState
}

// GetPaymentStateOk returns a tuple with the PaymentState field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPaymentStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentState, true
}

// SetPaymentState sets field value
func (o *PaymentResponse) SetPaymentState(v string) {
	o.PaymentState = v
}

// GetType returns the Type field value
func (o *PaymentResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentResponse) SetType(v string) {
	o.Type = v
}

// GetCurrency returns the Currency field value
func (o *PaymentResponse) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PaymentResponse) SetCurrency(v string) {
	o.Currency = v
}

// GetAmount returns the Amount field value
func (o *PaymentResponse) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentResponse) SetAmount(v float32) {
	o.Amount = v
}

// GetRemainingAmount returns the RemainingAmount field value if set, zero value otherwise.
func (o *PaymentResponse) GetRemainingAmount() float32 {
	if o == nil || IsNil(o.RemainingAmount) {
		var ret float32
		return ret
	}
	return *o.RemainingAmount
}

// GetRemainingAmountOk returns a tuple with the RemainingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetRemainingAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.RemainingAmount) {
		return nil, false
	}
	return o.RemainingAmount, true
}

// HasRemainingAmount returns a boolean if a field has been set.
func (o *PaymentResponse) HasRemainingAmount() bool {
	if o != nil && !IsNil(o.RemainingAmount) {
		return true
	}

	return false
}

// SetRemainingAmount gets a reference to the given float32 and assigns it to the RemainingAmount field.
func (o *PaymentResponse) SetRemainingAmount(v float32) {
	o.RemainingAmount = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PaymentResponse) GetData() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PaymentResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]map[string]interface{} and assigns it to the Data field.
func (o *PaymentResponse) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PaymentResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PaymentResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *PaymentResponse) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *PaymentResponse) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetAccountLocator returns the AccountLocator field value if set, zero value otherwise.
func (o *PaymentResponse) GetAccountLocator() string {
	if o == nil || IsNil(o.AccountLocator) {
		var ret string
		return ret
	}
	return *o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetAccountLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AccountLocator) {
		return nil, false
	}
	return o.AccountLocator, true
}

// HasAccountLocator returns a boolean if a field has been set.
func (o *PaymentResponse) HasAccountLocator() bool {
	if o != nil && !IsNil(o.AccountLocator) {
		return true
	}

	return false
}

// SetAccountLocator gets a reference to the given string and assigns it to the AccountLocator field.
func (o *PaymentResponse) SetAccountLocator(v string) {
	o.AccountLocator = &v
}

// GetTargets returns the Targets field value
func (o *PaymentResponse) GetTargets() []CreditItem {
	if o == nil {
		var ret []CreditItem
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetTargetsOk() ([]CreditItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Targets, true
}

// SetTargets sets field value
func (o *PaymentResponse) SetTargets(v []CreditItem) {
	o.Targets = v
}

// GetExternalCashTransactionLocator returns the ExternalCashTransactionLocator field value if set, zero value otherwise.
func (o *PaymentResponse) GetExternalCashTransactionLocator() string {
	if o == nil || IsNil(o.ExternalCashTransactionLocator) {
		var ret string
		return ret
	}
	return *o.ExternalCashTransactionLocator
}

// GetExternalCashTransactionLocatorOk returns a tuple with the ExternalCashTransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetExternalCashTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCashTransactionLocator) {
		return nil, false
	}
	return o.ExternalCashTransactionLocator, true
}

// HasExternalCashTransactionLocator returns a boolean if a field has been set.
func (o *PaymentResponse) HasExternalCashTransactionLocator() bool {
	if o != nil && !IsNil(o.ExternalCashTransactionLocator) {
		return true
	}

	return false
}

// SetExternalCashTransactionLocator gets a reference to the given string and assigns it to the ExternalCashTransactionLocator field.
func (o *PaymentResponse) SetExternalCashTransactionLocator(v string) {
	o.ExternalCashTransactionLocator = &v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *PaymentResponse) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *PaymentResponse) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *PaymentResponse) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

// GetPostedAt returns the PostedAt field value if set, zero value otherwise.
func (o *PaymentResponse) GetPostedAt() time.Time {
	if o == nil || IsNil(o.PostedAt) {
		var ret time.Time
		return ret
	}
	return *o.PostedAt
}

// GetPostedAtOk returns a tuple with the PostedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPostedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PostedAt) {
		return nil, false
	}
	return o.PostedAt, true
}

// HasPostedAt returns a boolean if a field has been set.
func (o *PaymentResponse) HasPostedAt() bool {
	if o != nil && !IsNil(o.PostedAt) {
		return true
	}

	return false
}

// SetPostedAt gets a reference to the given time.Time and assigns it to the PostedAt field.
func (o *PaymentResponse) SetPostedAt(v time.Time) {
	o.PostedAt = &v
}

// GetReversalReason returns the ReversalReason field value if set, zero value otherwise.
func (o *PaymentResponse) GetReversalReason() string {
	if o == nil || IsNil(o.ReversalReason) {
		var ret string
		return ret
	}
	return *o.ReversalReason
}

// GetReversalReasonOk returns a tuple with the ReversalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetReversalReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ReversalReason) {
		return nil, false
	}
	return o.ReversalReason, true
}

// HasReversalReason returns a boolean if a field has been set.
func (o *PaymentResponse) HasReversalReason() bool {
	if o != nil && !IsNil(o.ReversalReason) {
		return true
	}

	return false
}

// SetReversalReason gets a reference to the given string and assigns it to the ReversalReason field.
func (o *PaymentResponse) SetReversalReason(v string) {
	o.ReversalReason = &v
}

// GetReversedAt returns the ReversedAt field value if set, zero value otherwise.
func (o *PaymentResponse) GetReversedAt() time.Time {
	if o == nil || IsNil(o.ReversedAt) {
		var ret time.Time
		return ret
	}
	return *o.ReversedAt
}

// GetReversedAtOk returns a tuple with the ReversedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetReversedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReversedAt) {
		return nil, false
	}
	return o.ReversedAt, true
}

// HasReversedAt returns a boolean if a field has been set.
func (o *PaymentResponse) HasReversedAt() bool {
	if o != nil && !IsNil(o.ReversedAt) {
		return true
	}

	return false
}

// SetReversedAt gets a reference to the given time.Time and assigns it to the ReversedAt field.
func (o *PaymentResponse) SetReversedAt(v time.Time) {
	o.ReversedAt = &v
}

// GetReversedBy returns the ReversedBy field value if set, zero value otherwise.
func (o *PaymentResponse) GetReversedBy() string {
	if o == nil || IsNil(o.ReversedBy) {
		var ret string
		return ret
	}
	return *o.ReversedBy
}

// GetReversedByOk returns a tuple with the ReversedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetReversedByOk() (*string, bool) {
	if o == nil || IsNil(o.ReversedBy) {
		return nil, false
	}
	return o.ReversedBy, true
}

// HasReversedBy returns a boolean if a field has been set.
func (o *PaymentResponse) HasReversedBy() bool {
	if o != nil && !IsNil(o.ReversedBy) {
		return true
	}

	return false
}

// SetReversedBy gets a reference to the given string and assigns it to the ReversedBy field.
func (o *PaymentResponse) SetReversedBy(v string) {
	o.ReversedBy = &v
}

// GetShortfallCreditLocators returns the ShortfallCreditLocators field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *PaymentResponse) GetShortfallCreditLocators() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ShortfallCreditLocators
}

// GetShortfallCreditLocatorsOk returns a tuple with the ShortfallCreditLocators field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentResponse) GetShortfallCreditLocatorsOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortfallCreditLocators) {
		return nil, false
	}
	return o.ShortfallCreditLocators, true
}

// SetShortfallCreditLocators sets field value
func (o *PaymentResponse) SetShortfallCreditLocators(v []string) {
	o.ShortfallCreditLocators = v
}

// GetSubpayments returns the Subpayments field value
func (o *PaymentResponse) GetSubpayments() []Subpayment {
	if o == nil {
		var ret []Subpayment
		return ret
	}

	return o.Subpayments
}

// GetSubpaymentsOk returns a tuple with the Subpayments field value
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetSubpaymentsOk() ([]Subpayment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subpayments, true
}

// SetSubpayments sets field value
func (o *PaymentResponse) SetSubpayments(v []Subpayment) {
	o.Subpayments = v
}

// GetPaymentMode returns the PaymentMode field value if set, zero value otherwise.
func (o *PaymentResponse) GetPaymentMode() string {
	if o == nil || IsNil(o.PaymentMode) {
		var ret string
		return ret
	}
	return *o.PaymentMode
}

// GetPaymentModeOk returns a tuple with the PaymentMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetPaymentModeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMode) {
		return nil, false
	}
	return o.PaymentMode, true
}

// HasPaymentMode returns a boolean if a field has been set.
func (o *PaymentResponse) HasPaymentMode() bool {
	if o != nil && !IsNil(o.PaymentMode) {
		return true
	}

	return false
}

// SetPaymentMode gets a reference to the given string and assigns it to the PaymentMode field.
func (o *PaymentResponse) SetPaymentMode(v string) {
	o.PaymentMode = &v
}

// GetAggregatePaymentLocator returns the AggregatePaymentLocator field value if set, zero value otherwise.
func (o *PaymentResponse) GetAggregatePaymentLocator() string {
	if o == nil || IsNil(o.AggregatePaymentLocator) {
		var ret string
		return ret
	}
	return *o.AggregatePaymentLocator
}

// GetAggregatePaymentLocatorOk returns a tuple with the AggregatePaymentLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse) GetAggregatePaymentLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AggregatePaymentLocator) {
		return nil, false
	}
	return o.AggregatePaymentLocator, true
}

// HasAggregatePaymentLocator returns a boolean if a field has been set.
func (o *PaymentResponse) HasAggregatePaymentLocator() bool {
	if o != nil && !IsNil(o.AggregatePaymentLocator) {
		return true
	}

	return false
}

// SetAggregatePaymentLocator gets a reference to the given string and assigns it to the AggregatePaymentLocator field.
func (o *PaymentResponse) SetAggregatePaymentLocator(v string) {
	o.AggregatePaymentLocator = &v
}

func (o PaymentResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["paymentState"] = o.PaymentState
	toSerialize["type"] = o.Type
	toSerialize["currency"] = o.Currency
	toSerialize["amount"] = o.Amount
	if !IsNil(o.RemainingAmount) {
		toSerialize["remainingAmount"] = o.RemainingAmount
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.AccountLocator) {
		toSerialize["accountLocator"] = o.AccountLocator
	}
	toSerialize["targets"] = o.Targets
	if !IsNil(o.ExternalCashTransactionLocator) {
		toSerialize["externalCashTransactionLocator"] = o.ExternalCashTransactionLocator
	}
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	if !IsNil(o.PostedAt) {
		toSerialize["postedAt"] = o.PostedAt
	}
	if !IsNil(o.ReversalReason) {
		toSerialize["reversalReason"] = o.ReversalReason
	}
	if !IsNil(o.ReversedAt) {
		toSerialize["reversedAt"] = o.ReversedAt
	}
	if !IsNil(o.ReversedBy) {
		toSerialize["reversedBy"] = o.ReversedBy
	}
	if o.ShortfallCreditLocators != nil {
		toSerialize["shortfallCreditLocators"] = o.ShortfallCreditLocators
	}
	toSerialize["subpayments"] = o.Subpayments
	if !IsNil(o.PaymentMode) {
		toSerialize["paymentMode"] = o.PaymentMode
	}
	if !IsNil(o.AggregatePaymentLocator) {
		toSerialize["aggregatePaymentLocator"] = o.AggregatePaymentLocator
	}
	return toSerialize, nil
}

func (o *PaymentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"paymentState",
		"type",
		"currency",
		"amount",
		"createdAt",
		"createdBy",
		"targets",
		"shortfallCreditLocators",
		"subpayments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentResponse := _PaymentResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentResponse)

	if err != nil {
		return err
	}

	*o = PaymentResponse(varPaymentResponse)

	return err
}

type NullablePaymentResponse struct {
	value *PaymentResponse
	isSet bool
}

func (v NullablePaymentResponse) Get() *PaymentResponse {
	return v.value
}

func (v *NullablePaymentResponse) Set(val *PaymentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentResponse(val *PaymentResponse) *NullablePaymentResponse {
	return &NullablePaymentResponse{value: val, isSet: true}
}

func (v NullablePaymentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
