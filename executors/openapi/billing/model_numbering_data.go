/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NumberingData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberingData{}

// NumberingData struct for NumberingData
type NumberingData struct {
	EntityLocator string `json:"entityLocator"`
}

type _NumberingData NumberingData

// NewNumberingData instantiates a new NumberingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberingData(entityLocator string) *NumberingData {
	this := NumberingData{}
	this.EntityLocator = entityLocator
	return &this
}

// NewNumberingDataWithDefaults instantiates a new NumberingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberingDataWithDefaults() *NumberingData {
	this := NumberingData{}
	return &this
}

// GetEntityLocator returns the EntityLocator field value
func (o *NumberingData) GetEntityLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityLocator
}

// GetEntityLocatorOk returns a tuple with the EntityLocator field value
// and a boolean to check if the value has been set.
func (o *NumberingData) GetEntityLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityLocator, true
}

// SetEntityLocator sets field value
func (o *NumberingData) SetEntityLocator(v string) {
	o.EntityLocator = v
}

func (o NumberingData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberingData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityLocator"] = o.EntityLocator
	return toSerialize, nil
}

func (o *NumberingData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNumberingData := _NumberingData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNumberingData)

	if err != nil {
		return err
	}

	*o = NumberingData(varNumberingData)

	return err
}

type NullableNumberingData struct {
	value *NumberingData
	isSet bool
}

func (v NullableNumberingData) Get() *NumberingData {
	return v.value
}

func (v *NullableNumberingData) Set(val *NumberingData) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberingData) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberingData(val *NumberingData) *NullableNumberingData {
	return &NullableNumberingData{value: val, isSet: true}
}

func (v NullableNumberingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
