/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// InvoicesControllerAPIService InvoicesControllerAPI service
type InvoicesControllerAPIService service

type ApiFetchInvoiceWithNumberRequest struct {
	ctx           context.Context
	ApiService    *InvoicesControllerAPIService
	invoiceNumber string
}

func (r ApiFetchInvoiceWithNumberRequest) Execute() ([]Invoice, *http.Response, error) {
	return r.ApiService.FetchInvoiceWithNumberExecute(r)
}

/*
FetchInvoiceWithNumber Method for FetchInvoiceWithNumber

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param invoiceNumber
	@return ApiFetchInvoiceWithNumberRequest
*/
func (a *InvoicesControllerAPIService) FetchInvoiceWithNumber(ctx context.Context, invoiceNumber string) ApiFetchInvoiceWithNumberRequest {
	return ApiFetchInvoiceWithNumberRequest{
		ApiService:    a,
		ctx:           ctx,
		invoiceNumber: invoiceNumber,
	}
}

// Execute executes the request
//
//	@return []Invoice
func (a *InvoicesControllerAPIService) FetchInvoiceWithNumberExecute(r ApiFetchInvoiceWithNumberRequest) ([]Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.FetchInvoiceWithNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/numbers/{invoiceNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"invoiceNumber"+"}", url.PathEscape(parameterValueToString(r.invoiceNumber, "invoiceNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenerateInvoiceNumberRequest struct {
	ctx        context.Context
	ApiService *InvoicesControllerAPIService
	locator    string
}

func (r ApiGenerateInvoiceNumberRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.GenerateInvoiceNumberExecute(r)
}

/*
GenerateInvoiceNumber Method for GenerateInvoiceNumber

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiGenerateInvoiceNumberRequest
*/
func (a *InvoicesControllerAPIService) GenerateInvoiceNumber(ctx context.Context, locator string) ApiGenerateInvoiceNumberRequest {
	return ApiGenerateInvoiceNumberRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesControllerAPIService) GenerateInvoiceNumberExecute(r ApiGenerateInvoiceNumberRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.GenerateInvoiceNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/number/generate"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInvoiceDetailsRequest struct {
	ctx        context.Context
	ApiService *InvoicesControllerAPIService
	locator    string
}

func (r ApiGetInvoiceDetailsRequest) Execute() (*InvoiceDetails, *http.Response, error) {
	return r.ApiService.GetInvoiceDetailsExecute(r)
}

/*
GetInvoiceDetails Method for GetInvoiceDetails

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiGetInvoiceDetailsRequest
*/
func (a *InvoicesControllerAPIService) GetInvoiceDetails(ctx context.Context, locator string) ApiGetInvoiceDetailsRequest {
	return ApiGetInvoiceDetailsRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return InvoiceDetails
func (a *InvoicesControllerAPIService) GetInvoiceDetailsExecute(r ApiGetInvoiceDetailsRequest) (*InvoiceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.GetInvoiceDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInvoiceWithItemsRequest struct {
	ctx        context.Context
	ApiService *InvoicesControllerAPIService
	locator    string
}

func (r ApiGetInvoiceWithItemsRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.GetInvoiceWithItemsExecute(r)
}

/*
GetInvoiceWithItems Method for GetInvoiceWithItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiGetInvoiceWithItemsRequest
*/
func (a *InvoicesControllerAPIService) GetInvoiceWithItems(ctx context.Context, locator string) ApiGetInvoiceWithItemsRequest {
	return ApiGetInvoiceWithItemsRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesControllerAPIService) GetInvoiceWithItemsExecute(r ApiGetInvoiceWithItemsRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.GetInvoiceWithItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInitiateEarlyInvoicingRequest struct {
	ctx                   context.Context
	ApiService            *InvoicesControllerAPIService
	earlyInvoicingRequest *EarlyInvoicingRequest
}

func (r ApiInitiateEarlyInvoicingRequest) EarlyInvoicingRequest(earlyInvoicingRequest EarlyInvoicingRequest) ApiInitiateEarlyInvoicingRequest {
	r.earlyInvoicingRequest = &earlyInvoicingRequest
	return r
}

func (r ApiInitiateEarlyInvoicingRequest) Execute() (*EarlyInvoicingResponse, *http.Response, error) {
	return r.ApiService.InitiateEarlyInvoicingExecute(r)
}

/*
InitiateEarlyInvoicing Method for InitiateEarlyInvoicing

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInitiateEarlyInvoicingRequest
*/
func (a *InvoicesControllerAPIService) InitiateEarlyInvoicing(ctx context.Context) ApiInitiateEarlyInvoicingRequest {
	return ApiInitiateEarlyInvoicingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EarlyInvoicingResponse
func (a *InvoicesControllerAPIService) InitiateEarlyInvoicingExecute(r ApiInitiateEarlyInvoicingRequest) (*EarlyInvoicingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EarlyInvoicingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.InitiateEarlyInvoicing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/earlyInvoicing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.earlyInvoicingRequest == nil {
		return localVarReturnValue, nil, reportError("earlyInvoicingRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.earlyInvoicingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCreditDistributionsForInvoiceRequest struct {
	ctx             context.Context
	ApiService      *InvoicesControllerAPIService
	locator         string
	includeReversed *bool
	offset          *int32
	count           *int32
	extended        *bool
}

func (r ApiListCreditDistributionsForInvoiceRequest) IncludeReversed(includeReversed bool) ApiListCreditDistributionsForInvoiceRequest {
	r.includeReversed = &includeReversed
	return r
}

func (r ApiListCreditDistributionsForInvoiceRequest) Offset(offset int32) ApiListCreditDistributionsForInvoiceRequest {
	r.offset = &offset
	return r
}

func (r ApiListCreditDistributionsForInvoiceRequest) Count(count int32) ApiListCreditDistributionsForInvoiceRequest {
	r.count = &count
	return r
}

func (r ApiListCreditDistributionsForInvoiceRequest) Extended(extended bool) ApiListCreditDistributionsForInvoiceRequest {
	r.extended = &extended
	return r
}

func (r ApiListCreditDistributionsForInvoiceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListCreditDistributionsForInvoiceExecute(r)
}

/*
ListCreditDistributionsForInvoice Method for ListCreditDistributionsForInvoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiListCreditDistributionsForInvoiceRequest
*/
func (a *InvoicesControllerAPIService) ListCreditDistributionsForInvoice(ctx context.Context, locator string) ApiListCreditDistributionsForInvoiceRequest {
	return ApiListCreditDistributionsForInvoiceRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InvoicesControllerAPIService) ListCreditDistributionsForInvoiceExecute(r ApiListCreditDistributionsForInvoiceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.ListCreditDistributionsForInvoice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/creditDistributions/list"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeReversed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReversed", r.includeReversed, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCreditsForInvoiceRequest struct {
	ctx             context.Context
	ApiService      *InvoicesControllerAPIService
	locator         string
	includeReversed *bool
	offset          *int32
	count           *int32
	extended        *bool
}

func (r ApiListCreditsForInvoiceRequest) IncludeReversed(includeReversed bool) ApiListCreditsForInvoiceRequest {
	r.includeReversed = &includeReversed
	return r
}

func (r ApiListCreditsForInvoiceRequest) Offset(offset int32) ApiListCreditsForInvoiceRequest {
	r.offset = &offset
	return r
}

func (r ApiListCreditsForInvoiceRequest) Count(count int32) ApiListCreditsForInvoiceRequest {
	r.count = &count
	return r
}

func (r ApiListCreditsForInvoiceRequest) Extended(extended bool) ApiListCreditsForInvoiceRequest {
	r.extended = &extended
	return r
}

func (r ApiListCreditsForInvoiceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListCreditsForInvoiceExecute(r)
}

/*
ListCreditsForInvoice Method for ListCreditsForInvoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiListCreditsForInvoiceRequest
*/
func (a *InvoicesControllerAPIService) ListCreditsForInvoice(ctx context.Context, locator string) ApiListCreditsForInvoiceRequest {
	return ApiListCreditsForInvoiceRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InvoicesControllerAPIService) ListCreditsForInvoiceExecute(r ApiListCreditsForInvoiceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.ListCreditsForInvoice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/credits/list"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeReversed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReversed", r.includeReversed, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInvoicesForAccountRequest struct {
	ctx                       context.Context
	ApiService                *InvoicesControllerAPIService
	accountLocator            string
	includeZeroAmountInvoices *bool
	offset                    *int32
	count                     *int32
	extended                  *bool
}

func (r ApiListInvoicesForAccountRequest) IncludeZeroAmountInvoices(includeZeroAmountInvoices bool) ApiListInvoicesForAccountRequest {
	r.includeZeroAmountInvoices = &includeZeroAmountInvoices
	return r
}

func (r ApiListInvoicesForAccountRequest) Offset(offset int32) ApiListInvoicesForAccountRequest {
	r.offset = &offset
	return r
}

func (r ApiListInvoicesForAccountRequest) Count(count int32) ApiListInvoicesForAccountRequest {
	r.count = &count
	return r
}

func (r ApiListInvoicesForAccountRequest) Extended(extended bool) ApiListInvoicesForAccountRequest {
	r.extended = &extended
	return r
}

func (r ApiListInvoicesForAccountRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListInvoicesForAccountExecute(r)
}

/*
ListInvoicesForAccount Method for ListInvoicesForAccount

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountLocator
	@return ApiListInvoicesForAccountRequest
*/
func (a *InvoicesControllerAPIService) ListInvoicesForAccount(ctx context.Context, accountLocator string) ApiListInvoicesForAccountRequest {
	return ApiListInvoicesForAccountRequest{
		ApiService:     a,
		ctx:            ctx,
		accountLocator: accountLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InvoicesControllerAPIService) ListInvoicesForAccountExecute(r ApiListInvoicesForAccountRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.ListInvoicesForAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/accounts/{accountLocator}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeZeroAmountInvoices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroAmountInvoices", r.includeZeroAmountInvoices, "form", "")
	} else {
		var defaultValue bool = false
		r.includeZeroAmountInvoices = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInvoicesForPolicyRequest struct {
	ctx                       context.Context
	ApiService                *InvoicesControllerAPIService
	policyLocator             string
	includeZeroAmountInvoices *bool
	offset                    *int32
	count                     *int32
	extended                  *bool
}

func (r ApiListInvoicesForPolicyRequest) IncludeZeroAmountInvoices(includeZeroAmountInvoices bool) ApiListInvoicesForPolicyRequest {
	r.includeZeroAmountInvoices = &includeZeroAmountInvoices
	return r
}

func (r ApiListInvoicesForPolicyRequest) Offset(offset int32) ApiListInvoicesForPolicyRequest {
	r.offset = &offset
	return r
}

func (r ApiListInvoicesForPolicyRequest) Count(count int32) ApiListInvoicesForPolicyRequest {
	r.count = &count
	return r
}

func (r ApiListInvoicesForPolicyRequest) Extended(extended bool) ApiListInvoicesForPolicyRequest {
	r.extended = &extended
	return r
}

func (r ApiListInvoicesForPolicyRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListInvoicesForPolicyExecute(r)
}

/*
ListInvoicesForPolicy Method for ListInvoicesForPolicy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyLocator
	@return ApiListInvoicesForPolicyRequest
*/
func (a *InvoicesControllerAPIService) ListInvoicesForPolicy(ctx context.Context, policyLocator string) ApiListInvoicesForPolicyRequest {
	return ApiListInvoicesForPolicyRequest{
		ApiService:    a,
		ctx:           ctx,
		policyLocator: policyLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InvoicesControllerAPIService) ListInvoicesForPolicyExecute(r ApiListInvoicesForPolicyRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.ListInvoicesForPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/policies/{policyLocator}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"policyLocator"+"}", url.PathEscape(parameterValueToString(r.policyLocator, "policyLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeZeroAmountInvoices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroAmountInvoices", r.includeZeroAmountInvoices, "form", "")
	} else {
		var defaultValue bool = false
		r.includeZeroAmountInvoices = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInvoicesForQuoteRequest struct {
	ctx                       context.Context
	ApiService                *InvoicesControllerAPIService
	quoteLocator              string
	includeZeroAmountInvoices *bool
	offset                    *int32
	count                     *int32
	extended                  *bool
}

func (r ApiListInvoicesForQuoteRequest) IncludeZeroAmountInvoices(includeZeroAmountInvoices bool) ApiListInvoicesForQuoteRequest {
	r.includeZeroAmountInvoices = &includeZeroAmountInvoices
	return r
}

func (r ApiListInvoicesForQuoteRequest) Offset(offset int32) ApiListInvoicesForQuoteRequest {
	r.offset = &offset
	return r
}

func (r ApiListInvoicesForQuoteRequest) Count(count int32) ApiListInvoicesForQuoteRequest {
	r.count = &count
	return r
}

func (r ApiListInvoicesForQuoteRequest) Extended(extended bool) ApiListInvoicesForQuoteRequest {
	r.extended = &extended
	return r
}

func (r ApiListInvoicesForQuoteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListInvoicesForQuoteExecute(r)
}

/*
ListInvoicesForQuote Method for ListInvoicesForQuote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param quoteLocator
	@return ApiListInvoicesForQuoteRequest
*/
func (a *InvoicesControllerAPIService) ListInvoicesForQuote(ctx context.Context, quoteLocator string) ApiListInvoicesForQuoteRequest {
	return ApiListInvoicesForQuoteRequest{
		ApiService:   a,
		ctx:          ctx,
		quoteLocator: quoteLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InvoicesControllerAPIService) ListInvoicesForQuoteExecute(r ApiListInvoicesForQuoteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.ListInvoicesForQuote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/quotes/{quoteLocator}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"quoteLocator"+"}", url.PathEscape(parameterValueToString(r.quoteLocator, "quoteLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeZeroAmountInvoices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroAmountInvoices", r.includeZeroAmountInvoices, "form", "")
	} else {
		var defaultValue bool = false
		r.includeZeroAmountInvoices = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPaymentsForInvoiceRequest struct {
	ctx             context.Context
	ApiService      *InvoicesControllerAPIService
	locator         string
	includeReversed *bool
	offset          *int32
	count           *int32
	extended        *bool
}

func (r ApiListPaymentsForInvoiceRequest) IncludeReversed(includeReversed bool) ApiListPaymentsForInvoiceRequest {
	r.includeReversed = &includeReversed
	return r
}

func (r ApiListPaymentsForInvoiceRequest) Offset(offset int32) ApiListPaymentsForInvoiceRequest {
	r.offset = &offset
	return r
}

func (r ApiListPaymentsForInvoiceRequest) Count(count int32) ApiListPaymentsForInvoiceRequest {
	r.count = &count
	return r
}

func (r ApiListPaymentsForInvoiceRequest) Extended(extended bool) ApiListPaymentsForInvoiceRequest {
	r.extended = &extended
	return r
}

func (r ApiListPaymentsForInvoiceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListPaymentsForInvoiceExecute(r)
}

/*
ListPaymentsForInvoice Method for ListPaymentsForInvoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiListPaymentsForInvoiceRequest
*/
func (a *InvoicesControllerAPIService) ListPaymentsForInvoice(ctx context.Context, locator string) ApiListPaymentsForInvoiceRequest {
	return ApiListPaymentsForInvoiceRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InvoicesControllerAPIService) ListPaymentsForInvoiceExecute(r ApiListPaymentsForInvoiceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.ListPaymentsForInvoice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/payments/list"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeReversed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReversed", r.includeReversed, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreviewInvoicesForQuoteRequest struct {
	ctx                       context.Context
	ApiService                *InvoicesControllerAPIService
	locator                   string
	includeZeroAmountInvoices *bool
}

func (r ApiPreviewInvoicesForQuoteRequest) IncludeZeroAmountInvoices(includeZeroAmountInvoices bool) ApiPreviewInvoicesForQuoteRequest {
	r.includeZeroAmountInvoices = &includeZeroAmountInvoices
	return r
}

func (r ApiPreviewInvoicesForQuoteRequest) Execute() ([]InvoicePreview, *http.Response, error) {
	return r.ApiService.PreviewInvoicesForQuoteExecute(r)
}

/*
PreviewInvoicesForQuote Method for PreviewInvoicesForQuote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiPreviewInvoicesForQuoteRequest
*/
func (a *InvoicesControllerAPIService) PreviewInvoicesForQuote(ctx context.Context, locator string) ApiPreviewInvoicesForQuoteRequest {
	return ApiPreviewInvoicesForQuoteRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return []InvoicePreview
func (a *InvoicesControllerAPIService) PreviewInvoicesForQuoteExecute(r ApiPreviewInvoicesForQuoteRequest) ([]InvoicePreview, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InvoicePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.PreviewInvoicesForQuote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/quotes/{locator}/previewInvoices"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeZeroAmountInvoices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroAmountInvoices", r.includeZeroAmountInvoices, "form", "")
	} else {
		var defaultValue bool = false
		r.includeZeroAmountInvoices = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreviewInvoicesForTransactionRequest struct {
	ctx                       context.Context
	ApiService                *InvoicesControllerAPIService
	locator                   string
	includeZeroAmountInvoices *bool
}

func (r ApiPreviewInvoicesForTransactionRequest) IncludeZeroAmountInvoices(includeZeroAmountInvoices bool) ApiPreviewInvoicesForTransactionRequest {
	r.includeZeroAmountInvoices = &includeZeroAmountInvoices
	return r
}

func (r ApiPreviewInvoicesForTransactionRequest) Execute() ([]InvoicePreview, *http.Response, error) {
	return r.ApiService.PreviewInvoicesForTransactionExecute(r)
}

/*
PreviewInvoicesForTransaction Method for PreviewInvoicesForTransaction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiPreviewInvoicesForTransactionRequest
*/
func (a *InvoicesControllerAPIService) PreviewInvoicesForTransaction(ctx context.Context, locator string) ApiPreviewInvoicesForTransactionRequest {
	return ApiPreviewInvoicesForTransactionRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return []InvoicePreview
func (a *InvoicesControllerAPIService) PreviewInvoicesForTransactionExecute(r ApiPreviewInvoicesForTransactionRequest) ([]InvoicePreview, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InvoicePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.PreviewInvoicesForTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/transactions/{locator}/previewInvoices"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeZeroAmountInvoices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeZeroAmountInvoices", r.includeZeroAmountInvoices, "form", "")
	} else {
		var defaultValue bool = false
		r.includeZeroAmountInvoices = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetInvoiceNumberRequest struct {
	ctx           context.Context
	ApiService    *InvoicesControllerAPIService
	locator       string
	invoiceNumber *string
}

func (r ApiSetInvoiceNumberRequest) InvoiceNumber(invoiceNumber string) ApiSetInvoiceNumberRequest {
	r.invoiceNumber = &invoiceNumber
	return r
}

func (r ApiSetInvoiceNumberRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.SetInvoiceNumberExecute(r)
}

/*
SetInvoiceNumber Method for SetInvoiceNumber

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiSetInvoiceNumberRequest
*/
func (a *InvoicesControllerAPIService) SetInvoiceNumber(ctx context.Context, locator string) ApiSetInvoiceNumberRequest {
	return ApiSetInvoiceNumberRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesControllerAPIService) SetInvoiceNumberExecute(r ApiSetInvoiceNumberRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.SetInvoiceNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/number/set"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invoiceNumber == nil {
		return localVarReturnValue, nil, reportError("invoiceNumber is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "invoiceNumber", r.invoiceNumber, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWriteOffRequest struct {
	ctx        context.Context
	ApiService *InvoicesControllerAPIService
	locator    string
}

func (r ApiWriteOffRequest) Execute() (*WriteOffResponse, *http.Response, error) {
	return r.ApiService.WriteOffExecute(r)
}

/*
WriteOff Method for WriteOff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiWriteOffRequest
*/
func (a *InvoicesControllerAPIService) WriteOff(ctx context.Context, locator string) ApiWriteOffRequest {
	return ApiWriteOffRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return WriteOffResponse
func (a *InvoicesControllerAPIService) WriteOffExecute(r ApiWriteOffRequest) (*WriteOffResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WriteOffResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesControllerAPIService.WriteOff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invoices/{locator}/writeOff"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
