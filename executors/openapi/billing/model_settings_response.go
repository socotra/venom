/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SettingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsResponse{}

// SettingsResponse struct for SettingsResponse
type SettingsResponse struct {
	Locator             string              `json:"locator"`
	InstallmentSettings InstallmentSettings `json:"installmentSettings"`
	BillingSettings     BillingSettings     `json:"billingSettings"`
}

type _SettingsResponse SettingsResponse

// NewSettingsResponse instantiates a new SettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsResponse(locator string, installmentSettings InstallmentSettings, billingSettings BillingSettings) *SettingsResponse {
	this := SettingsResponse{}
	this.Locator = locator
	this.InstallmentSettings = installmentSettings
	this.BillingSettings = billingSettings
	return &this
}

// NewSettingsResponseWithDefaults instantiates a new SettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsResponseWithDefaults() *SettingsResponse {
	this := SettingsResponse{}
	return &this
}

// GetLocator returns the Locator field value
func (o *SettingsResponse) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *SettingsResponse) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *SettingsResponse) SetLocator(v string) {
	o.Locator = v
}

// GetInstallmentSettings returns the InstallmentSettings field value
func (o *SettingsResponse) GetInstallmentSettings() InstallmentSettings {
	if o == nil {
		var ret InstallmentSettings
		return ret
	}

	return o.InstallmentSettings
}

// GetInstallmentSettingsOk returns a tuple with the InstallmentSettings field value
// and a boolean to check if the value has been set.
func (o *SettingsResponse) GetInstallmentSettingsOk() (*InstallmentSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallmentSettings, true
}

// SetInstallmentSettings sets field value
func (o *SettingsResponse) SetInstallmentSettings(v InstallmentSettings) {
	o.InstallmentSettings = v
}

// GetBillingSettings returns the BillingSettings field value
func (o *SettingsResponse) GetBillingSettings() BillingSettings {
	if o == nil {
		var ret BillingSettings
		return ret
	}

	return o.BillingSettings
}

// GetBillingSettingsOk returns a tuple with the BillingSettings field value
// and a boolean to check if the value has been set.
func (o *SettingsResponse) GetBillingSettingsOk() (*BillingSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingSettings, true
}

// SetBillingSettings sets field value
func (o *SettingsResponse) SetBillingSettings(v BillingSettings) {
	o.BillingSettings = v
}

func (o SettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["installmentSettings"] = o.InstallmentSettings
	toSerialize["billingSettings"] = o.BillingSettings
	return toSerialize, nil
}

func (o *SettingsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"installmentSettings",
		"billingSettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettingsResponse := _SettingsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettingsResponse)

	if err != nil {
		return err
	}

	*o = SettingsResponse(varSettingsResponse)

	return err
}

type NullableSettingsResponse struct {
	value *SettingsResponse
	isSet bool
}

func (v NullableSettingsResponse) Get() *SettingsResponse {
	return v.value
}

func (v *NullableSettingsResponse) Set(val *SettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsResponse(val *SettingsResponse) *NullableSettingsResponse {
	return &NullableSettingsResponse{value: val, isSet: true}
}

func (v NullableSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
