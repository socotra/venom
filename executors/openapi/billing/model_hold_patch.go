/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
)

// checks if the HoldPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HoldPatch{}

// HoldPatch struct for HoldPatch
type HoldPatch struct {
	AccountLocator *string `json:"accountLocator,omitempty"`
	TargetType     *string `json:"targetType,omitempty"`
}

// NewHoldPatch instantiates a new HoldPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoldPatch() *HoldPatch {
	this := HoldPatch{}
	return &this
}

// NewHoldPatchWithDefaults instantiates a new HoldPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldPatchWithDefaults() *HoldPatch {
	this := HoldPatch{}
	return &this
}

// GetAccountLocator returns the AccountLocator field value if set, zero value otherwise.
func (o *HoldPatch) GetAccountLocator() string {
	if o == nil || IsNil(o.AccountLocator) {
		var ret string
		return ret
	}
	return *o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldPatch) GetAccountLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AccountLocator) {
		return nil, false
	}
	return o.AccountLocator, true
}

// HasAccountLocator returns a boolean if a field has been set.
func (o *HoldPatch) HasAccountLocator() bool {
	if o != nil && !IsNil(o.AccountLocator) {
		return true
	}

	return false
}

// SetAccountLocator gets a reference to the given string and assigns it to the AccountLocator field.
func (o *HoldPatch) SetAccountLocator(v string) {
	o.AccountLocator = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *HoldPatch) GetTargetType() string {
	if o == nil || IsNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldPatch) GetTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *HoldPatch) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *HoldPatch) SetTargetType(v string) {
	o.TargetType = &v
}

func (o HoldPatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HoldPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountLocator) {
		toSerialize["accountLocator"] = o.AccountLocator
	}
	if !IsNil(o.TargetType) {
		toSerialize["targetType"] = o.TargetType
	}
	return toSerialize, nil
}

type NullableHoldPatch struct {
	value *HoldPatch
	isSet bool
}

func (v NullableHoldPatch) Get() *HoldPatch {
	return v.value
}

func (v *NullableHoldPatch) Set(val *HoldPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldPatch(val *HoldPatch) *NullableHoldPatch {
	return &NullableHoldPatch{value: val, isSet: true}
}

func (v NullableHoldPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
