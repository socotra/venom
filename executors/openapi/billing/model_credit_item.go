/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreditItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditItem{}

// CreditItem struct for CreditItem
type CreditItem struct {
	ContainerLocator string   `json:"containerLocator"`
	ContainerType    string   `json:"containerType"`
	Amount           *float32 `json:"amount,omitempty"`
}

type _CreditItem CreditItem

// NewCreditItem instantiates a new CreditItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditItem(containerLocator string, containerType string) *CreditItem {
	this := CreditItem{}
	this.ContainerLocator = containerLocator
	this.ContainerType = containerType
	return &this
}

// NewCreditItemWithDefaults instantiates a new CreditItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditItemWithDefaults() *CreditItem {
	this := CreditItem{}
	return &this
}

// GetContainerLocator returns the ContainerLocator field value
func (o *CreditItem) GetContainerLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerLocator
}

// GetContainerLocatorOk returns a tuple with the ContainerLocator field value
// and a boolean to check if the value has been set.
func (o *CreditItem) GetContainerLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerLocator, true
}

// SetContainerLocator sets field value
func (o *CreditItem) SetContainerLocator(v string) {
	o.ContainerLocator = v
}

// GetContainerType returns the ContainerType field value
func (o *CreditItem) GetContainerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value
// and a boolean to check if the value has been set.
func (o *CreditItem) GetContainerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerType, true
}

// SetContainerType sets field value
func (o *CreditItem) SetContainerType(v string) {
	o.ContainerType = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreditItem) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditItem) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreditItem) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *CreditItem) SetAmount(v float32) {
	o.Amount = &v
}

func (o CreditItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerLocator"] = o.ContainerLocator
	toSerialize["containerType"] = o.ContainerType
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return toSerialize, nil
}

func (o *CreditItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"containerLocator",
		"containerType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditItem := _CreditItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditItem)

	if err != nil {
		return err
	}

	*o = CreditItem(varCreditItem)

	return err
}

type NullableCreditItem struct {
	value *CreditItem
	isSet bool
}

func (v NullableCreditItem) Get() *CreditItem {
	return v.value
}

func (v *NullableCreditItem) Set(val *CreditItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditItem(val *CreditItem) *NullableCreditItem {
	return &NullableCreditItem{value: val, isSet: true}
}

func (v NullableCreditItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
