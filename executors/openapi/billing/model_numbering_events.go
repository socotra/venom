/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
)

// checks if the NumberingEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberingEvents{}

// NumberingEvents struct for NumberingEvents
type NumberingEvents struct {
	DisbursementNumberAssignmentFailed *NumberingData `json:"disbursement.numberAssignmentFailed,omitempty"`
	InvoiceNumberAssignmentFailed      *NumberingData `json:"invoice.numberAssignmentFailed,omitempty"`
}

// NewNumberingEvents instantiates a new NumberingEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberingEvents() *NumberingEvents {
	this := NumberingEvents{}
	return &this
}

// NewNumberingEventsWithDefaults instantiates a new NumberingEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberingEventsWithDefaults() *NumberingEvents {
	this := NumberingEvents{}
	return &this
}

// GetDisbursementNumberAssignmentFailed returns the DisbursementNumberAssignmentFailed field value if set, zero value otherwise.
func (o *NumberingEvents) GetDisbursementNumberAssignmentFailed() NumberingData {
	if o == nil || IsNil(o.DisbursementNumberAssignmentFailed) {
		var ret NumberingData
		return ret
	}
	return *o.DisbursementNumberAssignmentFailed
}

// GetDisbursementNumberAssignmentFailedOk returns a tuple with the DisbursementNumberAssignmentFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberingEvents) GetDisbursementNumberAssignmentFailedOk() (*NumberingData, bool) {
	if o == nil || IsNil(o.DisbursementNumberAssignmentFailed) {
		return nil, false
	}
	return o.DisbursementNumberAssignmentFailed, true
}

// HasDisbursementNumberAssignmentFailed returns a boolean if a field has been set.
func (o *NumberingEvents) HasDisbursementNumberAssignmentFailed() bool {
	if o != nil && !IsNil(o.DisbursementNumberAssignmentFailed) {
		return true
	}

	return false
}

// SetDisbursementNumberAssignmentFailed gets a reference to the given NumberingData and assigns it to the DisbursementNumberAssignmentFailed field.
func (o *NumberingEvents) SetDisbursementNumberAssignmentFailed(v NumberingData) {
	o.DisbursementNumberAssignmentFailed = &v
}

// GetInvoiceNumberAssignmentFailed returns the InvoiceNumberAssignmentFailed field value if set, zero value otherwise.
func (o *NumberingEvents) GetInvoiceNumberAssignmentFailed() NumberingData {
	if o == nil || IsNil(o.InvoiceNumberAssignmentFailed) {
		var ret NumberingData
		return ret
	}
	return *o.InvoiceNumberAssignmentFailed
}

// GetInvoiceNumberAssignmentFailedOk returns a tuple with the InvoiceNumberAssignmentFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberingEvents) GetInvoiceNumberAssignmentFailedOk() (*NumberingData, bool) {
	if o == nil || IsNil(o.InvoiceNumberAssignmentFailed) {
		return nil, false
	}
	return o.InvoiceNumberAssignmentFailed, true
}

// HasInvoiceNumberAssignmentFailed returns a boolean if a field has been set.
func (o *NumberingEvents) HasInvoiceNumberAssignmentFailed() bool {
	if o != nil && !IsNil(o.InvoiceNumberAssignmentFailed) {
		return true
	}

	return false
}

// SetInvoiceNumberAssignmentFailed gets a reference to the given NumberingData and assigns it to the InvoiceNumberAssignmentFailed field.
func (o *NumberingEvents) SetInvoiceNumberAssignmentFailed(v NumberingData) {
	o.InvoiceNumberAssignmentFailed = &v
}

func (o NumberingEvents) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberingEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisbursementNumberAssignmentFailed) {
		toSerialize["disbursement.numberAssignmentFailed"] = o.DisbursementNumberAssignmentFailed
	}
	if !IsNil(o.InvoiceNumberAssignmentFailed) {
		toSerialize["invoice.numberAssignmentFailed"] = o.InvoiceNumberAssignmentFailed
	}
	return toSerialize, nil
}

type NullableNumberingEvents struct {
	value *NumberingEvents
	isSet bool
}

func (v NullableNumberingEvents) Get() *NumberingEvents {
	return v.value
}

func (v *NullableNumberingEvents) Set(val *NumberingEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberingEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberingEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberingEvents(val *NumberingEvents) *NullableNumberingEvents {
	return &NullableNumberingEvents{value: val, isSet: true}
}

func (v NullableNumberingEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberingEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
