/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExcludedDebit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExcludedDebit{}

// ExcludedDebit struct for ExcludedDebit
type ExcludedDebit struct {
	EntityLocator string `json:"entityLocator"`
	Type          string `json:"type"`
}

type _ExcludedDebit ExcludedDebit

// NewExcludedDebit instantiates a new ExcludedDebit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExcludedDebit(entityLocator string, type_ string) *ExcludedDebit {
	this := ExcludedDebit{}
	this.EntityLocator = entityLocator
	this.Type = type_
	return &this
}

// NewExcludedDebitWithDefaults instantiates a new ExcludedDebit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExcludedDebitWithDefaults() *ExcludedDebit {
	this := ExcludedDebit{}
	return &this
}

// GetEntityLocator returns the EntityLocator field value
func (o *ExcludedDebit) GetEntityLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityLocator
}

// GetEntityLocatorOk returns a tuple with the EntityLocator field value
// and a boolean to check if the value has been set.
func (o *ExcludedDebit) GetEntityLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityLocator, true
}

// SetEntityLocator sets field value
func (o *ExcludedDebit) SetEntityLocator(v string) {
	o.EntityLocator = v
}

// GetType returns the Type field value
func (o *ExcludedDebit) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExcludedDebit) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExcludedDebit) SetType(v string) {
	o.Type = v
}

func (o ExcludedDebit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExcludedDebit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityLocator"] = o.EntityLocator
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ExcludedDebit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityLocator",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExcludedDebit := _ExcludedDebit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExcludedDebit)

	if err != nil {
		return err
	}

	*o = ExcludedDebit(varExcludedDebit)

	return err
}

type NullableExcludedDebit struct {
	value *ExcludedDebit
	isSet bool
}

func (v NullableExcludedDebit) Get() *ExcludedDebit {
	return v.value
}

func (v *NullableExcludedDebit) Set(val *ExcludedDebit) {
	v.value = val
	v.isSet = true
}

func (v NullableExcludedDebit) IsSet() bool {
	return v.isSet
}

func (v *NullableExcludedDebit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcludedDebit(val *ExcludedDebit) *NullableExcludedDebit {
	return &NullableExcludedDebit{value: val, isSet: true}
}

func (v NullableExcludedDebit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcludedDebit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
