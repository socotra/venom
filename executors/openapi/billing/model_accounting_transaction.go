/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AccountingTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountingTransaction{}

// AccountingTransaction struct for AccountingTransaction
type AccountingTransaction struct {
	FaTransactionLocator string            `json:"faTransactionLocator"`
	FaTransactionTime    time.Time         `json:"faTransactionTime"`
	FaTransactionNote    string            `json:"faTransactionNote"`
	Currency             string            `json:"currency"`
	AccountLines         []AccountLineItem `json:"accountLines"`
}

type _AccountingTransaction AccountingTransaction

// NewAccountingTransaction instantiates a new AccountingTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountingTransaction(faTransactionLocator string, faTransactionTime time.Time, faTransactionNote string, currency string, accountLines []AccountLineItem) *AccountingTransaction {
	this := AccountingTransaction{}
	this.FaTransactionLocator = faTransactionLocator
	this.FaTransactionTime = faTransactionTime
	this.FaTransactionNote = faTransactionNote
	this.Currency = currency
	this.AccountLines = accountLines
	return &this
}

// NewAccountingTransactionWithDefaults instantiates a new AccountingTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountingTransactionWithDefaults() *AccountingTransaction {
	this := AccountingTransaction{}
	return &this
}

// GetFaTransactionLocator returns the FaTransactionLocator field value
func (o *AccountingTransaction) GetFaTransactionLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FaTransactionLocator
}

// GetFaTransactionLocatorOk returns a tuple with the FaTransactionLocator field value
// and a boolean to check if the value has been set.
func (o *AccountingTransaction) GetFaTransactionLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FaTransactionLocator, true
}

// SetFaTransactionLocator sets field value
func (o *AccountingTransaction) SetFaTransactionLocator(v string) {
	o.FaTransactionLocator = v
}

// GetFaTransactionTime returns the FaTransactionTime field value
func (o *AccountingTransaction) GetFaTransactionTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FaTransactionTime
}

// GetFaTransactionTimeOk returns a tuple with the FaTransactionTime field value
// and a boolean to check if the value has been set.
func (o *AccountingTransaction) GetFaTransactionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FaTransactionTime, true
}

// SetFaTransactionTime sets field value
func (o *AccountingTransaction) SetFaTransactionTime(v time.Time) {
	o.FaTransactionTime = v
}

// GetFaTransactionNote returns the FaTransactionNote field value
func (o *AccountingTransaction) GetFaTransactionNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FaTransactionNote
}

// GetFaTransactionNoteOk returns a tuple with the FaTransactionNote field value
// and a boolean to check if the value has been set.
func (o *AccountingTransaction) GetFaTransactionNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FaTransactionNote, true
}

// SetFaTransactionNote sets field value
func (o *AccountingTransaction) SetFaTransactionNote(v string) {
	o.FaTransactionNote = v
}

// GetCurrency returns the Currency field value
func (o *AccountingTransaction) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *AccountingTransaction) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *AccountingTransaction) SetCurrency(v string) {
	o.Currency = v
}

// GetAccountLines returns the AccountLines field value
func (o *AccountingTransaction) GetAccountLines() []AccountLineItem {
	if o == nil {
		var ret []AccountLineItem
		return ret
	}

	return o.AccountLines
}

// GetAccountLinesOk returns a tuple with the AccountLines field value
// and a boolean to check if the value has been set.
func (o *AccountingTransaction) GetAccountLinesOk() ([]AccountLineItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountLines, true
}

// SetAccountLines sets field value
func (o *AccountingTransaction) SetAccountLines(v []AccountLineItem) {
	o.AccountLines = v
}

func (o AccountingTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountingTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["faTransactionLocator"] = o.FaTransactionLocator
	toSerialize["faTransactionTime"] = o.FaTransactionTime
	toSerialize["faTransactionNote"] = o.FaTransactionNote
	toSerialize["currency"] = o.Currency
	toSerialize["accountLines"] = o.AccountLines
	return toSerialize, nil
}

func (o *AccountingTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"faTransactionLocator",
		"faTransactionTime",
		"faTransactionNote",
		"currency",
		"accountLines",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountingTransaction := _AccountingTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountingTransaction)

	if err != nil {
		return err
	}

	*o = AccountingTransaction(varAccountingTransaction)

	return err
}

type NullableAccountingTransaction struct {
	value *AccountingTransaction
	isSet bool
}

func (v NullableAccountingTransaction) Get() *AccountingTransaction {
	return v.value
}

func (v *NullableAccountingTransaction) Set(val *AccountingTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountingTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountingTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountingTransaction(val *AccountingTransaction) *NullableAccountingTransaction {
	return &NullableAccountingTransaction{value: val, isSet: true}
}

func (v NullableAccountingTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountingTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
