/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DelinquencySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelinquencySettings{}

// DelinquencySettings struct for DelinquencySettings
type DelinquencySettings struct {
	LapseTransactionType string  `json:"lapseTransactionType"`
	GracePeriodDays      int32   `json:"gracePeriodDays"`
	AdvanceLapseTo       string  `json:"advanceLapseTo"`
	DelinquencyLevel     *string `json:"delinquencyLevel,omitempty"`
}

type _DelinquencySettings DelinquencySettings

// NewDelinquencySettings instantiates a new DelinquencySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelinquencySettings(lapseTransactionType string, gracePeriodDays int32, advanceLapseTo string) *DelinquencySettings {
	this := DelinquencySettings{}
	this.LapseTransactionType = lapseTransactionType
	this.GracePeriodDays = gracePeriodDays
	this.AdvanceLapseTo = advanceLapseTo
	return &this
}

// NewDelinquencySettingsWithDefaults instantiates a new DelinquencySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelinquencySettingsWithDefaults() *DelinquencySettings {
	this := DelinquencySettings{}
	return &this
}

// GetLapseTransactionType returns the LapseTransactionType field value
func (o *DelinquencySettings) GetLapseTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LapseTransactionType
}

// GetLapseTransactionTypeOk returns a tuple with the LapseTransactionType field value
// and a boolean to check if the value has been set.
func (o *DelinquencySettings) GetLapseTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LapseTransactionType, true
}

// SetLapseTransactionType sets field value
func (o *DelinquencySettings) SetLapseTransactionType(v string) {
	o.LapseTransactionType = v
}

// GetGracePeriodDays returns the GracePeriodDays field value
func (o *DelinquencySettings) GetGracePeriodDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GracePeriodDays
}

// GetGracePeriodDaysOk returns a tuple with the GracePeriodDays field value
// and a boolean to check if the value has been set.
func (o *DelinquencySettings) GetGracePeriodDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GracePeriodDays, true
}

// SetGracePeriodDays sets field value
func (o *DelinquencySettings) SetGracePeriodDays(v int32) {
	o.GracePeriodDays = v
}

// GetAdvanceLapseTo returns the AdvanceLapseTo field value
func (o *DelinquencySettings) GetAdvanceLapseTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdvanceLapseTo
}

// GetAdvanceLapseToOk returns a tuple with the AdvanceLapseTo field value
// and a boolean to check if the value has been set.
func (o *DelinquencySettings) GetAdvanceLapseToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdvanceLapseTo, true
}

// SetAdvanceLapseTo sets field value
func (o *DelinquencySettings) SetAdvanceLapseTo(v string) {
	o.AdvanceLapseTo = v
}

// GetDelinquencyLevel returns the DelinquencyLevel field value if set, zero value otherwise.
func (o *DelinquencySettings) GetDelinquencyLevel() string {
	if o == nil || IsNil(o.DelinquencyLevel) {
		var ret string
		return ret
	}
	return *o.DelinquencyLevel
}

// GetDelinquencyLevelOk returns a tuple with the DelinquencyLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencySettings) GetDelinquencyLevelOk() (*string, bool) {
	if o == nil || IsNil(o.DelinquencyLevel) {
		return nil, false
	}
	return o.DelinquencyLevel, true
}

// HasDelinquencyLevel returns a boolean if a field has been set.
func (o *DelinquencySettings) HasDelinquencyLevel() bool {
	if o != nil && !IsNil(o.DelinquencyLevel) {
		return true
	}

	return false
}

// SetDelinquencyLevel gets a reference to the given string and assigns it to the DelinquencyLevel field.
func (o *DelinquencySettings) SetDelinquencyLevel(v string) {
	o.DelinquencyLevel = &v
}

func (o DelinquencySettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelinquencySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lapseTransactionType"] = o.LapseTransactionType
	toSerialize["gracePeriodDays"] = o.GracePeriodDays
	toSerialize["advanceLapseTo"] = o.AdvanceLapseTo
	if !IsNil(o.DelinquencyLevel) {
		toSerialize["delinquencyLevel"] = o.DelinquencyLevel
	}
	return toSerialize, nil
}

func (o *DelinquencySettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lapseTransactionType",
		"gracePeriodDays",
		"advanceLapseTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelinquencySettings := _DelinquencySettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelinquencySettings)

	if err != nil {
		return err
	}

	*o = DelinquencySettings(varDelinquencySettings)

	return err
}

type NullableDelinquencySettings struct {
	value *DelinquencySettings
	isSet bool
}

func (v NullableDelinquencySettings) Get() *DelinquencySettings {
	return v.value
}

func (v *NullableDelinquencySettings) Set(val *DelinquencySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDelinquencySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDelinquencySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelinquencySettings(val *DelinquencySettings) *NullableDelinquencySettings {
	return &NullableDelinquencySettings{value: val, isSet: true}
}

func (v NullableDelinquencySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelinquencySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
