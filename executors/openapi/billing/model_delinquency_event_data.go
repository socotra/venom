/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DelinquencyEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelinquencyEventData{}

// DelinquencyEventData struct for DelinquencyEventData
type DelinquencyEventData struct {
	DelinquencyLocator string               `json:"delinquencyLocator"`
	PolicyLocators     ListPageResponseULID `json:"policyLocators"`
}

type _DelinquencyEventData DelinquencyEventData

// NewDelinquencyEventData instantiates a new DelinquencyEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelinquencyEventData(delinquencyLocator string, policyLocators ListPageResponseULID) *DelinquencyEventData {
	this := DelinquencyEventData{}
	this.DelinquencyLocator = delinquencyLocator
	this.PolicyLocators = policyLocators
	return &this
}

// NewDelinquencyEventDataWithDefaults instantiates a new DelinquencyEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelinquencyEventDataWithDefaults() *DelinquencyEventData {
	this := DelinquencyEventData{}
	return &this
}

// GetDelinquencyLocator returns the DelinquencyLocator field value
func (o *DelinquencyEventData) GetDelinquencyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DelinquencyLocator
}

// GetDelinquencyLocatorOk returns a tuple with the DelinquencyLocator field value
// and a boolean to check if the value has been set.
func (o *DelinquencyEventData) GetDelinquencyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelinquencyLocator, true
}

// SetDelinquencyLocator sets field value
func (o *DelinquencyEventData) SetDelinquencyLocator(v string) {
	o.DelinquencyLocator = v
}

// GetPolicyLocators returns the PolicyLocators field value
func (o *DelinquencyEventData) GetPolicyLocators() ListPageResponseULID {
	if o == nil {
		var ret ListPageResponseULID
		return ret
	}

	return o.PolicyLocators
}

// GetPolicyLocatorsOk returns a tuple with the PolicyLocators field value
// and a boolean to check if the value has been set.
func (o *DelinquencyEventData) GetPolicyLocatorsOk() (*ListPageResponseULID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyLocators, true
}

// SetPolicyLocators sets field value
func (o *DelinquencyEventData) SetPolicyLocators(v ListPageResponseULID) {
	o.PolicyLocators = v
}

func (o DelinquencyEventData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelinquencyEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delinquencyLocator"] = o.DelinquencyLocator
	toSerialize["policyLocators"] = o.PolicyLocators
	return toSerialize, nil
}

func (o *DelinquencyEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delinquencyLocator",
		"policyLocators",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelinquencyEventData := _DelinquencyEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelinquencyEventData)

	if err != nil {
		return err
	}

	*o = DelinquencyEventData(varDelinquencyEventData)

	return err
}

type NullableDelinquencyEventData struct {
	value *DelinquencyEventData
	isSet bool
}

func (v NullableDelinquencyEventData) Get() *DelinquencyEventData {
	return v.value
}

func (v *NullableDelinquencyEventData) Set(val *DelinquencyEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableDelinquencyEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableDelinquencyEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelinquencyEventData(val *DelinquencyEventData) *NullableDelinquencyEventData {
	return &NullableDelinquencyEventData{value: val, isSet: true}
}

func (v NullableDelinquencyEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelinquencyEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
