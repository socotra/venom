/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Subpayment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subpayment{}

// Subpayment struct for Subpayment
type Subpayment struct {
	SubpaymentLocator string  `json:"subpaymentLocator"`
	Amount            float32 `json:"amount"`
}

type _Subpayment Subpayment

// NewSubpayment instantiates a new Subpayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubpayment(subpaymentLocator string, amount float32) *Subpayment {
	this := Subpayment{}
	this.SubpaymentLocator = subpaymentLocator
	this.Amount = amount
	return &this
}

// NewSubpaymentWithDefaults instantiates a new Subpayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubpaymentWithDefaults() *Subpayment {
	this := Subpayment{}
	return &this
}

// GetSubpaymentLocator returns the SubpaymentLocator field value
func (o *Subpayment) GetSubpaymentLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubpaymentLocator
}

// GetSubpaymentLocatorOk returns a tuple with the SubpaymentLocator field value
// and a boolean to check if the value has been set.
func (o *Subpayment) GetSubpaymentLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubpaymentLocator, true
}

// SetSubpaymentLocator sets field value
func (o *Subpayment) SetSubpaymentLocator(v string) {
	o.SubpaymentLocator = v
}

// GetAmount returns the Amount field value
func (o *Subpayment) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Subpayment) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Subpayment) SetAmount(v float32) {
	o.Amount = v
}

func (o Subpayment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subpayment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subpaymentLocator"] = o.SubpaymentLocator
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *Subpayment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subpaymentLocator",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubpayment := _Subpayment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubpayment)

	if err != nil {
		return err
	}

	*o = Subpayment(varSubpayment)

	return err
}

type NullableSubpayment struct {
	value *Subpayment
	isSet bool
}

func (v NullableSubpayment) Get() *Subpayment {
	return v.value
}

func (v *NullableSubpayment) Set(val *Subpayment) {
	v.value = val
	v.isSet = true
}

func (v NullableSubpayment) IsSet() bool {
	return v.isSet
}

func (v *NullableSubpayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubpayment(val *Subpayment) *NullableSubpayment {
	return &NullableSubpayment{value: val, isSet: true}
}

func (v NullableSubpayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubpayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
