/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LedgerAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LedgerAccount{}

// LedgerAccount struct for LedgerAccount
type LedgerAccount struct {
	ReferenceLocator string                  `json:"referenceLocator"`
	ReferenceType    string                  `json:"referenceType"`
	Balance          float32                 `json:"balance"`
	Currency         string                  `json:"currency"`
	LineItems        []LedgerAccountLineItem `json:"lineItems"`
}

type _LedgerAccount LedgerAccount

// NewLedgerAccount instantiates a new LedgerAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedgerAccount(referenceLocator string, referenceType string, balance float32, currency string, lineItems []LedgerAccountLineItem) *LedgerAccount {
	this := LedgerAccount{}
	this.ReferenceLocator = referenceLocator
	this.ReferenceType = referenceType
	this.Balance = balance
	this.Currency = currency
	this.LineItems = lineItems
	return &this
}

// NewLedgerAccountWithDefaults instantiates a new LedgerAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerAccountWithDefaults() *LedgerAccount {
	this := LedgerAccount{}
	return &this
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *LedgerAccount) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *LedgerAccount) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

// GetReferenceType returns the ReferenceType field value
func (o *LedgerAccount) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *LedgerAccount) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetBalance returns the Balance field value
func (o *LedgerAccount) GetBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *LedgerAccount) SetBalance(v float32) {
	o.Balance = v
}

// GetCurrency returns the Currency field value
func (o *LedgerAccount) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *LedgerAccount) SetCurrency(v string) {
	o.Currency = v
}

// GetLineItems returns the LineItems field value
func (o *LedgerAccount) GetLineItems() []LedgerAccountLineItem {
	if o == nil {
		var ret []LedgerAccountLineItem
		return ret
	}

	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value
// and a boolean to check if the value has been set.
func (o *LedgerAccount) GetLineItemsOk() ([]LedgerAccountLineItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.LineItems, true
}

// SetLineItems sets field value
func (o *LedgerAccount) SetLineItems(v []LedgerAccountLineItem) {
	o.LineItems = v
}

func (o LedgerAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LedgerAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["referenceLocator"] = o.ReferenceLocator
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["balance"] = o.Balance
	toSerialize["currency"] = o.Currency
	toSerialize["lineItems"] = o.LineItems
	return toSerialize, nil
}

func (o *LedgerAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"referenceLocator",
		"referenceType",
		"balance",
		"currency",
		"lineItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLedgerAccount := _LedgerAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLedgerAccount)

	if err != nil {
		return err
	}

	*o = LedgerAccount(varLedgerAccount)

	return err
}

type NullableLedgerAccount struct {
	value *LedgerAccount
	isSet bool
}

func (v NullableLedgerAccount) Get() *LedgerAccount {
	return v.value
}

func (v *NullableLedgerAccount) Set(val *LedgerAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerAccount(val *LedgerAccount) *NullableLedgerAccount {
	return &NullableLedgerAccount{value: val, isSet: true}
}

func (v NullableLedgerAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
