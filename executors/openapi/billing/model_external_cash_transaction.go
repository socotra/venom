/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExternalCashTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalCashTransaction{}

// ExternalCashTransaction struct for ExternalCashTransaction
type ExternalCashTransaction struct {
	Locator                    string  `json:"locator"`
	FinancialInstrumentLocator *string `json:"financialInstrumentLocator,omitempty"`
	TransactionMethod          string  `json:"transactionMethod"`
	TransactionNumber          *string `json:"transactionNumber,omitempty"`
}

type _ExternalCashTransaction ExternalCashTransaction

// NewExternalCashTransaction instantiates a new ExternalCashTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalCashTransaction(locator string, transactionMethod string) *ExternalCashTransaction {
	this := ExternalCashTransaction{}
	this.Locator = locator
	this.TransactionMethod = transactionMethod
	return &this
}

// NewExternalCashTransactionWithDefaults instantiates a new ExternalCashTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalCashTransactionWithDefaults() *ExternalCashTransaction {
	this := ExternalCashTransaction{}
	return &this
}

// GetLocator returns the Locator field value
func (o *ExternalCashTransaction) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *ExternalCashTransaction) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *ExternalCashTransaction) SetLocator(v string) {
	o.Locator = v
}

// GetFinancialInstrumentLocator returns the FinancialInstrumentLocator field value if set, zero value otherwise.
func (o *ExternalCashTransaction) GetFinancialInstrumentLocator() string {
	if o == nil || IsNil(o.FinancialInstrumentLocator) {
		var ret string
		return ret
	}
	return *o.FinancialInstrumentLocator
}

// GetFinancialInstrumentLocatorOk returns a tuple with the FinancialInstrumentLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalCashTransaction) GetFinancialInstrumentLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.FinancialInstrumentLocator) {
		return nil, false
	}
	return o.FinancialInstrumentLocator, true
}

// HasFinancialInstrumentLocator returns a boolean if a field has been set.
func (o *ExternalCashTransaction) HasFinancialInstrumentLocator() bool {
	if o != nil && !IsNil(o.FinancialInstrumentLocator) {
		return true
	}

	return false
}

// SetFinancialInstrumentLocator gets a reference to the given string and assigns it to the FinancialInstrumentLocator field.
func (o *ExternalCashTransaction) SetFinancialInstrumentLocator(v string) {
	o.FinancialInstrumentLocator = &v
}

// GetTransactionMethod returns the TransactionMethod field value
func (o *ExternalCashTransaction) GetTransactionMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionMethod
}

// GetTransactionMethodOk returns a tuple with the TransactionMethod field value
// and a boolean to check if the value has been set.
func (o *ExternalCashTransaction) GetTransactionMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionMethod, true
}

// SetTransactionMethod sets field value
func (o *ExternalCashTransaction) SetTransactionMethod(v string) {
	o.TransactionMethod = v
}

// GetTransactionNumber returns the TransactionNumber field value if set, zero value otherwise.
func (o *ExternalCashTransaction) GetTransactionNumber() string {
	if o == nil || IsNil(o.TransactionNumber) {
		var ret string
		return ret
	}
	return *o.TransactionNumber
}

// GetTransactionNumberOk returns a tuple with the TransactionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalCashTransaction) GetTransactionNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionNumber) {
		return nil, false
	}
	return o.TransactionNumber, true
}

// HasTransactionNumber returns a boolean if a field has been set.
func (o *ExternalCashTransaction) HasTransactionNumber() bool {
	if o != nil && !IsNil(o.TransactionNumber) {
		return true
	}

	return false
}

// SetTransactionNumber gets a reference to the given string and assigns it to the TransactionNumber field.
func (o *ExternalCashTransaction) SetTransactionNumber(v string) {
	o.TransactionNumber = &v
}

func (o ExternalCashTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalCashTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	if !IsNil(o.FinancialInstrumentLocator) {
		toSerialize["financialInstrumentLocator"] = o.FinancialInstrumentLocator
	}
	toSerialize["transactionMethod"] = o.TransactionMethod
	if !IsNil(o.TransactionNumber) {
		toSerialize["transactionNumber"] = o.TransactionNumber
	}
	return toSerialize, nil
}

func (o *ExternalCashTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"transactionMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalCashTransaction := _ExternalCashTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalCashTransaction)

	if err != nil {
		return err
	}

	*o = ExternalCashTransaction(varExternalCashTransaction)

	return err
}

type NullableExternalCashTransaction struct {
	value *ExternalCashTransaction
	isSet bool
}

func (v NullableExternalCashTransaction) Get() *ExternalCashTransaction {
	return v.value
}

func (v *NullableExternalCashTransaction) Set(val *ExternalCashTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalCashTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalCashTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalCashTransaction(val *ExternalCashTransaction) *NullableExternalCashTransaction {
	return &NullableExternalCashTransaction{value: val, isSet: true}
}

func (v NullableExternalCashTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalCashTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
