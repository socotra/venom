/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PaymentCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentCreate{}

// PaymentCreate struct for PaymentCreate
type PaymentCreate struct {
	AccountLocator                *string                           `json:"accountLocator,omitempty"`
	Type                          string                            `json:"type"`
	Amount                        float32                           `json:"amount"`
	Currency                      *string                           `json:"currency,omitempty"`
	Data                          map[string]map[string]interface{} `json:"data"`
	Targets                       []CreditItem                      `json:"targets"`
	UseDefaultFinancialInstrument bool                              `json:"useDefaultFinancialInstrument"`
	FinancialInstrumentLocator    *string                           `json:"financialInstrumentLocator,omitempty"`
	TransactionMethod             *string                           `json:"transactionMethod,omitempty"`
	TransactionNumber             *string                           `json:"transactionNumber,omitempty"`
	PaymentMode                   *string                           `json:"paymentMode,omitempty"`
}

type _PaymentCreate PaymentCreate

// NewPaymentCreate instantiates a new PaymentCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentCreate(type_ string, amount float32, data map[string]map[string]interface{}, targets []CreditItem, useDefaultFinancialInstrument bool) *PaymentCreate {
	this := PaymentCreate{}
	this.Type = type_
	this.Amount = amount
	this.Data = data
	this.Targets = targets
	this.UseDefaultFinancialInstrument = useDefaultFinancialInstrument
	return &this
}

// NewPaymentCreateWithDefaults instantiates a new PaymentCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentCreateWithDefaults() *PaymentCreate {
	this := PaymentCreate{}
	return &this
}

// GetAccountLocator returns the AccountLocator field value if set, zero value otherwise.
func (o *PaymentCreate) GetAccountLocator() string {
	if o == nil || IsNil(o.AccountLocator) {
		var ret string
		return ret
	}
	return *o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetAccountLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AccountLocator) {
		return nil, false
	}
	return o.AccountLocator, true
}

// HasAccountLocator returns a boolean if a field has been set.
func (o *PaymentCreate) HasAccountLocator() bool {
	if o != nil && !IsNil(o.AccountLocator) {
		return true
	}

	return false
}

// SetAccountLocator gets a reference to the given string and assigns it to the AccountLocator field.
func (o *PaymentCreate) SetAccountLocator(v string) {
	o.AccountLocator = &v
}

// GetType returns the Type field value
func (o *PaymentCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentCreate) SetType(v string) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *PaymentCreate) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentCreate) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentCreate) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentCreate) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentCreate) SetCurrency(v string) {
	o.Currency = &v
}

// GetData returns the Data field value
func (o *PaymentCreate) GetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PaymentCreate) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetTargets returns the Targets field value
func (o *PaymentCreate) GetTargets() []CreditItem {
	if o == nil {
		var ret []CreditItem
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetTargetsOk() ([]CreditItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Targets, true
}

// SetTargets sets field value
func (o *PaymentCreate) SetTargets(v []CreditItem) {
	o.Targets = v
}

// GetUseDefaultFinancialInstrument returns the UseDefaultFinancialInstrument field value
func (o *PaymentCreate) GetUseDefaultFinancialInstrument() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseDefaultFinancialInstrument
}

// GetUseDefaultFinancialInstrumentOk returns a tuple with the UseDefaultFinancialInstrument field value
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetUseDefaultFinancialInstrumentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseDefaultFinancialInstrument, true
}

// SetUseDefaultFinancialInstrument sets field value
func (o *PaymentCreate) SetUseDefaultFinancialInstrument(v bool) {
	o.UseDefaultFinancialInstrument = v
}

// GetFinancialInstrumentLocator returns the FinancialInstrumentLocator field value if set, zero value otherwise.
func (o *PaymentCreate) GetFinancialInstrumentLocator() string {
	if o == nil || IsNil(o.FinancialInstrumentLocator) {
		var ret string
		return ret
	}
	return *o.FinancialInstrumentLocator
}

// GetFinancialInstrumentLocatorOk returns a tuple with the FinancialInstrumentLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetFinancialInstrumentLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.FinancialInstrumentLocator) {
		return nil, false
	}
	return o.FinancialInstrumentLocator, true
}

// HasFinancialInstrumentLocator returns a boolean if a field has been set.
func (o *PaymentCreate) HasFinancialInstrumentLocator() bool {
	if o != nil && !IsNil(o.FinancialInstrumentLocator) {
		return true
	}

	return false
}

// SetFinancialInstrumentLocator gets a reference to the given string and assigns it to the FinancialInstrumentLocator field.
func (o *PaymentCreate) SetFinancialInstrumentLocator(v string) {
	o.FinancialInstrumentLocator = &v
}

// GetTransactionMethod returns the TransactionMethod field value if set, zero value otherwise.
func (o *PaymentCreate) GetTransactionMethod() string {
	if o == nil || IsNil(o.TransactionMethod) {
		var ret string
		return ret
	}
	return *o.TransactionMethod
}

// GetTransactionMethodOk returns a tuple with the TransactionMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetTransactionMethodOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionMethod) {
		return nil, false
	}
	return o.TransactionMethod, true
}

// HasTransactionMethod returns a boolean if a field has been set.
func (o *PaymentCreate) HasTransactionMethod() bool {
	if o != nil && !IsNil(o.TransactionMethod) {
		return true
	}

	return false
}

// SetTransactionMethod gets a reference to the given string and assigns it to the TransactionMethod field.
func (o *PaymentCreate) SetTransactionMethod(v string) {
	o.TransactionMethod = &v
}

// GetTransactionNumber returns the TransactionNumber field value if set, zero value otherwise.
func (o *PaymentCreate) GetTransactionNumber() string {
	if o == nil || IsNil(o.TransactionNumber) {
		var ret string
		return ret
	}
	return *o.TransactionNumber
}

// GetTransactionNumberOk returns a tuple with the TransactionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetTransactionNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionNumber) {
		return nil, false
	}
	return o.TransactionNumber, true
}

// HasTransactionNumber returns a boolean if a field has been set.
func (o *PaymentCreate) HasTransactionNumber() bool {
	if o != nil && !IsNil(o.TransactionNumber) {
		return true
	}

	return false
}

// SetTransactionNumber gets a reference to the given string and assigns it to the TransactionNumber field.
func (o *PaymentCreate) SetTransactionNumber(v string) {
	o.TransactionNumber = &v
}

// GetPaymentMode returns the PaymentMode field value if set, zero value otherwise.
func (o *PaymentCreate) GetPaymentMode() string {
	if o == nil || IsNil(o.PaymentMode) {
		var ret string
		return ret
	}
	return *o.PaymentMode
}

// GetPaymentModeOk returns a tuple with the PaymentMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCreate) GetPaymentModeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMode) {
		return nil, false
	}
	return o.PaymentMode, true
}

// HasPaymentMode returns a boolean if a field has been set.
func (o *PaymentCreate) HasPaymentMode() bool {
	if o != nil && !IsNil(o.PaymentMode) {
		return true
	}

	return false
}

// SetPaymentMode gets a reference to the given string and assigns it to the PaymentMode field.
func (o *PaymentCreate) SetPaymentMode(v string) {
	o.PaymentMode = &v
}

func (o PaymentCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountLocator) {
		toSerialize["accountLocator"] = o.AccountLocator
	}
	toSerialize["type"] = o.Type
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["data"] = o.Data
	toSerialize["targets"] = o.Targets
	toSerialize["useDefaultFinancialInstrument"] = o.UseDefaultFinancialInstrument
	if !IsNil(o.FinancialInstrumentLocator) {
		toSerialize["financialInstrumentLocator"] = o.FinancialInstrumentLocator
	}
	if !IsNil(o.TransactionMethod) {
		toSerialize["transactionMethod"] = o.TransactionMethod
	}
	if !IsNil(o.TransactionNumber) {
		toSerialize["transactionNumber"] = o.TransactionNumber
	}
	if !IsNil(o.PaymentMode) {
		toSerialize["paymentMode"] = o.PaymentMode
	}
	return toSerialize, nil
}

func (o *PaymentCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"amount",
		"data",
		"targets",
		"useDefaultFinancialInstrument",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentCreate := _PaymentCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentCreate)

	if err != nil {
		return err
	}

	*o = PaymentCreate(varPaymentCreate)

	return err
}

type NullablePaymentCreate struct {
	value *PaymentCreate
	isSet bool
}

func (v NullablePaymentCreate) Get() *PaymentCreate {
	return v.value
}

func (v *NullablePaymentCreate) Set(val *PaymentCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentCreate(val *PaymentCreate) *NullablePaymentCreate {
	return &NullablePaymentCreate{value: val, isSet: true}
}

func (v NullablePaymentCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
