/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Delinquency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Delinquency{}

// Delinquency struct for Delinquency
type Delinquency struct {
	Locator                       string                       `json:"locator"`
	AccountLocator                string                       `json:"accountLocator"`
	DelinquencyState              string                       `json:"delinquencyState"`
	CreatedAt                     time.Time                    `json:"createdAt"`
	UpdatedAt                     time.Time                    `json:"updatedAt"`
	Settings                      DelinquencySettings          `json:"settings"`
	Timezone                      string                       `json:"timezone"`
	References                    []DelinquencyReference       `json:"references"`
	GraceStartedAt                *time.Time                   `json:"graceStartedAt,omitempty"`
	GraceEndAt                    *time.Time                   `json:"graceEndAt,omitempty"`
	LapseTransactionEffectiveDate *time.Time                   `json:"lapseTransactionEffectiveDate,omitempty"`
	ConfiguredDelinquencyEvents   []ConfiguredDelinquencyEvent `json:"configuredDelinquencyEvents"`
}

type _Delinquency Delinquency

// NewDelinquency instantiates a new Delinquency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelinquency(locator string, accountLocator string, delinquencyState string, createdAt time.Time, updatedAt time.Time, settings DelinquencySettings, timezone string, references []DelinquencyReference, configuredDelinquencyEvents []ConfiguredDelinquencyEvent) *Delinquency {
	this := Delinquency{}
	this.Locator = locator
	this.AccountLocator = accountLocator
	this.DelinquencyState = delinquencyState
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Settings = settings
	this.Timezone = timezone
	this.References = references
	this.ConfiguredDelinquencyEvents = configuredDelinquencyEvents
	return &this
}

// NewDelinquencyWithDefaults instantiates a new Delinquency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelinquencyWithDefaults() *Delinquency {
	this := Delinquency{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Delinquency) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Delinquency) SetLocator(v string) {
	o.Locator = v
}

// GetAccountLocator returns the AccountLocator field value
func (o *Delinquency) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *Delinquency) SetAccountLocator(v string) {
	o.AccountLocator = v
}

// GetDelinquencyState returns the DelinquencyState field value
func (o *Delinquency) GetDelinquencyState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DelinquencyState
}

// GetDelinquencyStateOk returns a tuple with the DelinquencyState field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetDelinquencyStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelinquencyState, true
}

// SetDelinquencyState sets field value
func (o *Delinquency) SetDelinquencyState(v string) {
	o.DelinquencyState = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Delinquency) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Delinquency) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Delinquency) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Delinquency) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetSettings returns the Settings field value
func (o *Delinquency) GetSettings() DelinquencySettings {
	if o == nil {
		var ret DelinquencySettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetSettingsOk() (*DelinquencySettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *Delinquency) SetSettings(v DelinquencySettings) {
	o.Settings = v
}

// GetTimezone returns the Timezone field value
func (o *Delinquency) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *Delinquency) SetTimezone(v string) {
	o.Timezone = v
}

// GetReferences returns the References field value
func (o *Delinquency) GetReferences() []DelinquencyReference {
	if o == nil {
		var ret []DelinquencyReference
		return ret
	}

	return o.References
}

// GetReferencesOk returns a tuple with the References field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetReferencesOk() ([]DelinquencyReference, bool) {
	if o == nil {
		return nil, false
	}
	return o.References, true
}

// SetReferences sets field value
func (o *Delinquency) SetReferences(v []DelinquencyReference) {
	o.References = v
}

// GetGraceStartedAt returns the GraceStartedAt field value if set, zero value otherwise.
func (o *Delinquency) GetGraceStartedAt() time.Time {
	if o == nil || IsNil(o.GraceStartedAt) {
		var ret time.Time
		return ret
	}
	return *o.GraceStartedAt
}

// GetGraceStartedAtOk returns a tuple with the GraceStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delinquency) GetGraceStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.GraceStartedAt) {
		return nil, false
	}
	return o.GraceStartedAt, true
}

// HasGraceStartedAt returns a boolean if a field has been set.
func (o *Delinquency) HasGraceStartedAt() bool {
	if o != nil && !IsNil(o.GraceStartedAt) {
		return true
	}

	return false
}

// SetGraceStartedAt gets a reference to the given time.Time and assigns it to the GraceStartedAt field.
func (o *Delinquency) SetGraceStartedAt(v time.Time) {
	o.GraceStartedAt = &v
}

// GetGraceEndAt returns the GraceEndAt field value if set, zero value otherwise.
func (o *Delinquency) GetGraceEndAt() time.Time {
	if o == nil || IsNil(o.GraceEndAt) {
		var ret time.Time
		return ret
	}
	return *o.GraceEndAt
}

// GetGraceEndAtOk returns a tuple with the GraceEndAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delinquency) GetGraceEndAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.GraceEndAt) {
		return nil, false
	}
	return o.GraceEndAt, true
}

// HasGraceEndAt returns a boolean if a field has been set.
func (o *Delinquency) HasGraceEndAt() bool {
	if o != nil && !IsNil(o.GraceEndAt) {
		return true
	}

	return false
}

// SetGraceEndAt gets a reference to the given time.Time and assigns it to the GraceEndAt field.
func (o *Delinquency) SetGraceEndAt(v time.Time) {
	o.GraceEndAt = &v
}

// GetLapseTransactionEffectiveDate returns the LapseTransactionEffectiveDate field value if set, zero value otherwise.
func (o *Delinquency) GetLapseTransactionEffectiveDate() time.Time {
	if o == nil || IsNil(o.LapseTransactionEffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.LapseTransactionEffectiveDate
}

// GetLapseTransactionEffectiveDateOk returns a tuple with the LapseTransactionEffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delinquency) GetLapseTransactionEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LapseTransactionEffectiveDate) {
		return nil, false
	}
	return o.LapseTransactionEffectiveDate, true
}

// HasLapseTransactionEffectiveDate returns a boolean if a field has been set.
func (o *Delinquency) HasLapseTransactionEffectiveDate() bool {
	if o != nil && !IsNil(o.LapseTransactionEffectiveDate) {
		return true
	}

	return false
}

// SetLapseTransactionEffectiveDate gets a reference to the given time.Time and assigns it to the LapseTransactionEffectiveDate field.
func (o *Delinquency) SetLapseTransactionEffectiveDate(v time.Time) {
	o.LapseTransactionEffectiveDate = &v
}

// GetConfiguredDelinquencyEvents returns the ConfiguredDelinquencyEvents field value
func (o *Delinquency) GetConfiguredDelinquencyEvents() []ConfiguredDelinquencyEvent {
	if o == nil {
		var ret []ConfiguredDelinquencyEvent
		return ret
	}

	return o.ConfiguredDelinquencyEvents
}

// GetConfiguredDelinquencyEventsOk returns a tuple with the ConfiguredDelinquencyEvents field value
// and a boolean to check if the value has been set.
func (o *Delinquency) GetConfiguredDelinquencyEventsOk() ([]ConfiguredDelinquencyEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfiguredDelinquencyEvents, true
}

// SetConfiguredDelinquencyEvents sets field value
func (o *Delinquency) SetConfiguredDelinquencyEvents(v []ConfiguredDelinquencyEvent) {
	o.ConfiguredDelinquencyEvents = v
}

func (o Delinquency) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Delinquency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["accountLocator"] = o.AccountLocator
	toSerialize["delinquencyState"] = o.DelinquencyState
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["settings"] = o.Settings
	toSerialize["timezone"] = o.Timezone
	toSerialize["references"] = o.References
	if !IsNil(o.GraceStartedAt) {
		toSerialize["graceStartedAt"] = o.GraceStartedAt
	}
	if !IsNil(o.GraceEndAt) {
		toSerialize["graceEndAt"] = o.GraceEndAt
	}
	if !IsNil(o.LapseTransactionEffectiveDate) {
		toSerialize["lapseTransactionEffectiveDate"] = o.LapseTransactionEffectiveDate
	}
	toSerialize["configuredDelinquencyEvents"] = o.ConfiguredDelinquencyEvents
	return toSerialize, nil
}

func (o *Delinquency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"accountLocator",
		"delinquencyState",
		"createdAt",
		"updatedAt",
		"settings",
		"timezone",
		"references",
		"configuredDelinquencyEvents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelinquency := _Delinquency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelinquency)

	if err != nil {
		return err
	}

	*o = Delinquency(varDelinquency)

	return err
}

type NullableDelinquency struct {
	value *Delinquency
	isSet bool
}

func (v NullableDelinquency) Get() *Delinquency {
	return v.value
}

func (v *NullableDelinquency) Set(val *Delinquency) {
	v.value = val
	v.isSet = true
}

func (v NullableDelinquency) IsSet() bool {
	return v.isSet
}

func (v *NullableDelinquency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelinquency(val *Delinquency) *NullableDelinquency {
	return &NullableDelinquency{value: val, isSet: true}
}

func (v NullableDelinquency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelinquency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
