/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ChargesControllerAPIService ChargesControllerAPI service
type ChargesControllerAPIService service

type ApiAddChargesRequest struct {
	ctx                  context.Context
	ApiService           *ChargesControllerAPIService
	accountLocator       string
	chargesCreateRequest *ChargesCreateRequest
}

func (r ApiAddChargesRequest) ChargesCreateRequest(chargesCreateRequest ChargesCreateRequest) ApiAddChargesRequest {
	r.chargesCreateRequest = &chargesCreateRequest
	return r
}

func (r ApiAddChargesRequest) Execute() ([]ChargeResponse, *http.Response, error) {
	return r.ApiService.AddChargesExecute(r)
}

/*
AddCharges Method for AddCharges

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountLocator
	@return ApiAddChargesRequest
*/
func (a *ChargesControllerAPIService) AddCharges(ctx context.Context, accountLocator string) ApiAddChargesRequest {
	return ApiAddChargesRequest{
		ApiService:     a,
		ctx:            ctx,
		accountLocator: accountLocator,
	}
}

// Execute executes the request
//
//	@return []ChargeResponse
func (a *ChargesControllerAPIService) AddChargesExecute(r ApiAddChargesRequest) ([]ChargeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ChargeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargesControllerAPIService.AddCharges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{accountLocator}/charges"
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chargesCreateRequest == nil {
		return localVarReturnValue, nil, reportError("chargesCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chargesCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChargesByAccountRequest struct {
	ctx            context.Context
	ApiService     *ChargesControllerAPIService
	accountLocator string
	offset         *int32
	count          *int32
}

func (r ApiGetChargesByAccountRequest) Offset(offset int32) ApiGetChargesByAccountRequest {
	r.offset = &offset
	return r
}

func (r ApiGetChargesByAccountRequest) Count(count int32) ApiGetChargesByAccountRequest {
	r.count = &count
	return r
}

func (r ApiGetChargesByAccountRequest) Execute() (*ListPageResponseChargeResponse, *http.Response, error) {
	return r.ApiService.GetChargesByAccountExecute(r)
}

/*
GetChargesByAccount Method for GetChargesByAccount

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountLocator
	@return ApiGetChargesByAccountRequest
*/
func (a *ChargesControllerAPIService) GetChargesByAccount(ctx context.Context, accountLocator string) ApiGetChargesByAccountRequest {
	return ApiGetChargesByAccountRequest{
		ApiService:     a,
		ctx:            ctx,
		accountLocator: accountLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseChargeResponse
func (a *ChargesControllerAPIService) GetChargesByAccountExecute(r ApiGetChargesByAccountRequest) (*ListPageResponseChargeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseChargeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargesControllerAPIService.GetChargesByAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{accountLocator}/charges/list"
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChargesByPolicyRequest struct {
	ctx           context.Context
	ApiService    *ChargesControllerAPIService
	policyLocator string
	offset        *int32
	count         *int32
}

func (r ApiGetChargesByPolicyRequest) Offset(offset int32) ApiGetChargesByPolicyRequest {
	r.offset = &offset
	return r
}

func (r ApiGetChargesByPolicyRequest) Count(count int32) ApiGetChargesByPolicyRequest {
	r.count = &count
	return r
}

func (r ApiGetChargesByPolicyRequest) Execute() (*ListPageResponseChargeResponse, *http.Response, error) {
	return r.ApiService.GetChargesByPolicyExecute(r)
}

/*
GetChargesByPolicy Method for GetChargesByPolicy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyLocator
	@return ApiGetChargesByPolicyRequest
*/
func (a *ChargesControllerAPIService) GetChargesByPolicy(ctx context.Context, policyLocator string) ApiGetChargesByPolicyRequest {
	return ApiGetChargesByPolicyRequest{
		ApiService:    a,
		ctx:           ctx,
		policyLocator: policyLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseChargeResponse
func (a *ChargesControllerAPIService) GetChargesByPolicyExecute(r ApiGetChargesByPolicyRequest) (*ListPageResponseChargeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseChargeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargesControllerAPIService.GetChargesByPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/{policyLocator}/charges/list"
	localVarPath = strings.Replace(localVarPath, "{"+"policyLocator"+"}", url.PathEscape(parameterValueToString(r.policyLocator, "policyLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChargesByTransactionRequest struct {
	ctx                context.Context
	ApiService         *ChargesControllerAPIService
	transactionLocator string
	includeAll         *bool
	offset             *int32
	count              *int32
}

func (r ApiGetChargesByTransactionRequest) IncludeAll(includeAll bool) ApiGetChargesByTransactionRequest {
	r.includeAll = &includeAll
	return r
}

func (r ApiGetChargesByTransactionRequest) Offset(offset int32) ApiGetChargesByTransactionRequest {
	r.offset = &offset
	return r
}

func (r ApiGetChargesByTransactionRequest) Count(count int32) ApiGetChargesByTransactionRequest {
	r.count = &count
	return r
}

func (r ApiGetChargesByTransactionRequest) Execute() (*ListPageResponseChargeResponse, *http.Response, error) {
	return r.ApiService.GetChargesByTransactionExecute(r)
}

/*
GetChargesByTransaction Method for GetChargesByTransaction

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transactionLocator
	@return ApiGetChargesByTransactionRequest
*/
func (a *ChargesControllerAPIService) GetChargesByTransaction(ctx context.Context, transactionLocator string) ApiGetChargesByTransactionRequest {
	return ApiGetChargesByTransactionRequest{
		ApiService:         a,
		ctx:                ctx,
		transactionLocator: transactionLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseChargeResponse
func (a *ChargesControllerAPIService) GetChargesByTransactionExecute(r ApiGetChargesByTransactionRequest) (*ListPageResponseChargeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseChargeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargesControllerAPIService.GetChargesByTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/{transactionLocator}/charges/list"
	localVarPath = strings.Replace(localVarPath, "{"+"transactionLocator"+"}", url.PathEscape(parameterValueToString(r.transactionLocator, "transactionLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeAll != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAll", r.includeAll, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReverseChargesRequest struct {
	ctx                    context.Context
	ApiService             *ChargesControllerAPIService
	accountLocator         string
	chargesReversalRequest *ChargesReversalRequest
}

func (r ApiReverseChargesRequest) ChargesReversalRequest(chargesReversalRequest ChargesReversalRequest) ApiReverseChargesRequest {
	r.chargesReversalRequest = &chargesReversalRequest
	return r
}

func (r ApiReverseChargesRequest) Execute() ([]ChargeResponse, *http.Response, error) {
	return r.ApiService.ReverseChargesExecute(r)
}

/*
ReverseCharges Method for ReverseCharges

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountLocator
	@return ApiReverseChargesRequest
*/
func (a *ChargesControllerAPIService) ReverseCharges(ctx context.Context, accountLocator string) ApiReverseChargesRequest {
	return ApiReverseChargesRequest{
		ApiService:     a,
		ctx:            ctx,
		accountLocator: accountLocator,
	}
}

// Execute executes the request
//
//	@return []ChargeResponse
func (a *ChargesControllerAPIService) ReverseChargesExecute(r ApiReverseChargesRequest) ([]ChargeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ChargeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargesControllerAPIService.ReverseCharges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{accountLocator}/charges/reverse"
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chargesReversalRequest == nil {
		return localVarReturnValue, nil, reportError("chargesReversalRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chargesReversalRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
