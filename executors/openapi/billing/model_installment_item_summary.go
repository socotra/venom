/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InstallmentItemSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallmentItemSummary{}

// InstallmentItemSummary struct for InstallmentItemSummary
type InstallmentItemSummary struct {
	InstallmentItemLocator   string     `json:"installmentItemLocator"`
	InstallmentLocator       string     `json:"installmentLocator"`
	ElementLocator           string     `json:"elementLocator"`
	TransactionLocator       *string    `json:"transactionLocator,omitempty"`
	TransactionType          *string    `json:"transactionType,omitempty"`
	TransactionCategory      *string    `json:"transactionCategory,omitempty"`
	TransactionEffectiveTime *time.Time `json:"transactionEffectiveTime,omitempty"`
	Amount                   float32    `json:"amount"`
}

type _InstallmentItemSummary InstallmentItemSummary

// NewInstallmentItemSummary instantiates a new InstallmentItemSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentItemSummary(installmentItemLocator string, installmentLocator string, elementLocator string, amount float32) *InstallmentItemSummary {
	this := InstallmentItemSummary{}
	this.InstallmentItemLocator = installmentItemLocator
	this.InstallmentLocator = installmentLocator
	this.ElementLocator = elementLocator
	this.Amount = amount
	return &this
}

// NewInstallmentItemSummaryWithDefaults instantiates a new InstallmentItemSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentItemSummaryWithDefaults() *InstallmentItemSummary {
	this := InstallmentItemSummary{}
	return &this
}

// GetInstallmentItemLocator returns the InstallmentItemLocator field value
func (o *InstallmentItemSummary) GetInstallmentItemLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallmentItemLocator
}

// GetInstallmentItemLocatorOk returns a tuple with the InstallmentItemLocator field value
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetInstallmentItemLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallmentItemLocator, true
}

// SetInstallmentItemLocator sets field value
func (o *InstallmentItemSummary) SetInstallmentItemLocator(v string) {
	o.InstallmentItemLocator = v
}

// GetInstallmentLocator returns the InstallmentLocator field value
func (o *InstallmentItemSummary) GetInstallmentLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallmentLocator
}

// GetInstallmentLocatorOk returns a tuple with the InstallmentLocator field value
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetInstallmentLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallmentLocator, true
}

// SetInstallmentLocator sets field value
func (o *InstallmentItemSummary) SetInstallmentLocator(v string) {
	o.InstallmentLocator = v
}

// GetElementLocator returns the ElementLocator field value
func (o *InstallmentItemSummary) GetElementLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementLocator
}

// GetElementLocatorOk returns a tuple with the ElementLocator field value
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetElementLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementLocator, true
}

// SetElementLocator sets field value
func (o *InstallmentItemSummary) SetElementLocator(v string) {
	o.ElementLocator = v
}

// GetTransactionLocator returns the TransactionLocator field value if set, zero value otherwise.
func (o *InstallmentItemSummary) GetTransactionLocator() string {
	if o == nil || IsNil(o.TransactionLocator) {
		var ret string
		return ret
	}
	return *o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionLocator) {
		return nil, false
	}
	return o.TransactionLocator, true
}

// HasTransactionLocator returns a boolean if a field has been set.
func (o *InstallmentItemSummary) HasTransactionLocator() bool {
	if o != nil && !IsNil(o.TransactionLocator) {
		return true
	}

	return false
}

// SetTransactionLocator gets a reference to the given string and assigns it to the TransactionLocator field.
func (o *InstallmentItemSummary) SetTransactionLocator(v string) {
	o.TransactionLocator = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *InstallmentItemSummary) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *InstallmentItemSummary) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *InstallmentItemSummary) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetTransactionCategory returns the TransactionCategory field value if set, zero value otherwise.
func (o *InstallmentItemSummary) GetTransactionCategory() string {
	if o == nil || IsNil(o.TransactionCategory) {
		var ret string
		return ret
	}
	return *o.TransactionCategory
}

// GetTransactionCategoryOk returns a tuple with the TransactionCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetTransactionCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCategory) {
		return nil, false
	}
	return o.TransactionCategory, true
}

// HasTransactionCategory returns a boolean if a field has been set.
func (o *InstallmentItemSummary) HasTransactionCategory() bool {
	if o != nil && !IsNil(o.TransactionCategory) {
		return true
	}

	return false
}

// SetTransactionCategory gets a reference to the given string and assigns it to the TransactionCategory field.
func (o *InstallmentItemSummary) SetTransactionCategory(v string) {
	o.TransactionCategory = &v
}

// GetTransactionEffectiveTime returns the TransactionEffectiveTime field value if set, zero value otherwise.
func (o *InstallmentItemSummary) GetTransactionEffectiveTime() time.Time {
	if o == nil || IsNil(o.TransactionEffectiveTime) {
		var ret time.Time
		return ret
	}
	return *o.TransactionEffectiveTime
}

// GetTransactionEffectiveTimeOk returns a tuple with the TransactionEffectiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetTransactionEffectiveTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TransactionEffectiveTime) {
		return nil, false
	}
	return o.TransactionEffectiveTime, true
}

// HasTransactionEffectiveTime returns a boolean if a field has been set.
func (o *InstallmentItemSummary) HasTransactionEffectiveTime() bool {
	if o != nil && !IsNil(o.TransactionEffectiveTime) {
		return true
	}

	return false
}

// SetTransactionEffectiveTime gets a reference to the given time.Time and assigns it to the TransactionEffectiveTime field.
func (o *InstallmentItemSummary) SetTransactionEffectiveTime(v time.Time) {
	o.TransactionEffectiveTime = &v
}

// GetAmount returns the Amount field value
func (o *InstallmentItemSummary) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InstallmentItemSummary) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InstallmentItemSummary) SetAmount(v float32) {
	o.Amount = v
}

func (o InstallmentItemSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallmentItemSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["installmentItemLocator"] = o.InstallmentItemLocator
	toSerialize["installmentLocator"] = o.InstallmentLocator
	toSerialize["elementLocator"] = o.ElementLocator
	if !IsNil(o.TransactionLocator) {
		toSerialize["transactionLocator"] = o.TransactionLocator
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transactionType"] = o.TransactionType
	}
	if !IsNil(o.TransactionCategory) {
		toSerialize["transactionCategory"] = o.TransactionCategory
	}
	if !IsNil(o.TransactionEffectiveTime) {
		toSerialize["transactionEffectiveTime"] = o.TransactionEffectiveTime
	}
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

func (o *InstallmentItemSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"installmentItemLocator",
		"installmentLocator",
		"elementLocator",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallmentItemSummary := _InstallmentItemSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallmentItemSummary)

	if err != nil {
		return err
	}

	*o = InstallmentItemSummary(varInstallmentItemSummary)

	return err
}

type NullableInstallmentItemSummary struct {
	value *InstallmentItemSummary
	isSet bool
}

func (v NullableInstallmentItemSummary) Get() *InstallmentItemSummary {
	return v.value
}

func (v *NullableInstallmentItemSummary) Set(val *InstallmentItemSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentItemSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentItemSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentItemSummary(val *InstallmentItemSummary) *NullableInstallmentItemSummary {
	return &NullableInstallmentItemSummary{value: val, isSet: true}
}

func (v NullableInstallmentItemSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentItemSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
