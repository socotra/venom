/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InstallmentLattice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallmentLattice{}

// InstallmentLattice struct for InstallmentLattice
type InstallmentLattice struct {
	Locator         string                    `json:"locator"`
	SettingsLocator *string                   `json:"settingsLocator,omitempty"`
	CreatedAt       time.Time                 `json:"createdAt"`
	CreatedBy       string                    `json:"createdBy"`
	AccountLocator  string                    `json:"accountLocator"`
	TermStartTime   time.Time                 `json:"termStartTime"`
	TermEndTime     time.Time                 `json:"termEndTime"`
	TermLocator     *string                   `json:"termLocator,omitempty"`
	QuoteLocator    *string                   `json:"quoteLocator,omitempty"`
	PolicyLocator   *string                   `json:"policyLocator,omitempty"`
	Currency        string                    `json:"currency"`
	Timezone        string                    `json:"timezone"`
	BasedOnLocator  *string                   `json:"basedOnLocator,omitempty"`
	EffectiveTime   time.Time                 `json:"effectiveTime"`
	Frames          []InstallmentLatticeFrame `json:"frames"`
	ReversalLattice bool                      `json:"reversalLattice"`
}

type _InstallmentLattice InstallmentLattice

// NewInstallmentLattice instantiates a new InstallmentLattice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentLattice(locator string, createdAt time.Time, createdBy string, accountLocator string, termStartTime time.Time, termEndTime time.Time, currency string, timezone string, effectiveTime time.Time, frames []InstallmentLatticeFrame, reversalLattice bool) *InstallmentLattice {
	this := InstallmentLattice{}
	this.Locator = locator
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.AccountLocator = accountLocator
	this.TermStartTime = termStartTime
	this.TermEndTime = termEndTime
	this.Currency = currency
	this.Timezone = timezone
	this.EffectiveTime = effectiveTime
	this.Frames = frames
	this.ReversalLattice = reversalLattice
	return &this
}

// NewInstallmentLatticeWithDefaults instantiates a new InstallmentLattice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentLatticeWithDefaults() *InstallmentLattice {
	this := InstallmentLattice{}
	return &this
}

// GetLocator returns the Locator field value
func (o *InstallmentLattice) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *InstallmentLattice) SetLocator(v string) {
	o.Locator = v
}

// GetSettingsLocator returns the SettingsLocator field value if set, zero value otherwise.
func (o *InstallmentLattice) GetSettingsLocator() string {
	if o == nil || IsNil(o.SettingsLocator) {
		var ret string
		return ret
	}
	return *o.SettingsLocator
}

// GetSettingsLocatorOk returns a tuple with the SettingsLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetSettingsLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.SettingsLocator) {
		return nil, false
	}
	return o.SettingsLocator, true
}

// HasSettingsLocator returns a boolean if a field has been set.
func (o *InstallmentLattice) HasSettingsLocator() bool {
	if o != nil && !IsNil(o.SettingsLocator) {
		return true
	}

	return false
}

// SetSettingsLocator gets a reference to the given string and assigns it to the SettingsLocator field.
func (o *InstallmentLattice) SetSettingsLocator(v string) {
	o.SettingsLocator = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *InstallmentLattice) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InstallmentLattice) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *InstallmentLattice) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *InstallmentLattice) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetAccountLocator returns the AccountLocator field value
func (o *InstallmentLattice) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *InstallmentLattice) SetAccountLocator(v string) {
	o.AccountLocator = v
}

// GetTermStartTime returns the TermStartTime field value
func (o *InstallmentLattice) GetTermStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TermStartTime
}

// GetTermStartTimeOk returns a tuple with the TermStartTime field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetTermStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermStartTime, true
}

// SetTermStartTime sets field value
func (o *InstallmentLattice) SetTermStartTime(v time.Time) {
	o.TermStartTime = v
}

// GetTermEndTime returns the TermEndTime field value
func (o *InstallmentLattice) GetTermEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TermEndTime
}

// GetTermEndTimeOk returns a tuple with the TermEndTime field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetTermEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermEndTime, true
}

// SetTermEndTime sets field value
func (o *InstallmentLattice) SetTermEndTime(v time.Time) {
	o.TermEndTime = v
}

// GetTermLocator returns the TermLocator field value if set, zero value otherwise.
func (o *InstallmentLattice) GetTermLocator() string {
	if o == nil || IsNil(o.TermLocator) {
		var ret string
		return ret
	}
	return *o.TermLocator
}

// GetTermLocatorOk returns a tuple with the TermLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetTermLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TermLocator) {
		return nil, false
	}
	return o.TermLocator, true
}

// HasTermLocator returns a boolean if a field has been set.
func (o *InstallmentLattice) HasTermLocator() bool {
	if o != nil && !IsNil(o.TermLocator) {
		return true
	}

	return false
}

// SetTermLocator gets a reference to the given string and assigns it to the TermLocator field.
func (o *InstallmentLattice) SetTermLocator(v string) {
	o.TermLocator = &v
}

// GetQuoteLocator returns the QuoteLocator field value if set, zero value otherwise.
func (o *InstallmentLattice) GetQuoteLocator() string {
	if o == nil || IsNil(o.QuoteLocator) {
		var ret string
		return ret
	}
	return *o.QuoteLocator
}

// GetQuoteLocatorOk returns a tuple with the QuoteLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetQuoteLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteLocator) {
		return nil, false
	}
	return o.QuoteLocator, true
}

// HasQuoteLocator returns a boolean if a field has been set.
func (o *InstallmentLattice) HasQuoteLocator() bool {
	if o != nil && !IsNil(o.QuoteLocator) {
		return true
	}

	return false
}

// SetQuoteLocator gets a reference to the given string and assigns it to the QuoteLocator field.
func (o *InstallmentLattice) SetQuoteLocator(v string) {
	o.QuoteLocator = &v
}

// GetPolicyLocator returns the PolicyLocator field value if set, zero value otherwise.
func (o *InstallmentLattice) GetPolicyLocator() string {
	if o == nil || IsNil(o.PolicyLocator) {
		var ret string
		return ret
	}
	return *o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetPolicyLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyLocator) {
		return nil, false
	}
	return o.PolicyLocator, true
}

// HasPolicyLocator returns a boolean if a field has been set.
func (o *InstallmentLattice) HasPolicyLocator() bool {
	if o != nil && !IsNil(o.PolicyLocator) {
		return true
	}

	return false
}

// SetPolicyLocator gets a reference to the given string and assigns it to the PolicyLocator field.
func (o *InstallmentLattice) SetPolicyLocator(v string) {
	o.PolicyLocator = &v
}

// GetCurrency returns the Currency field value
func (o *InstallmentLattice) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *InstallmentLattice) SetCurrency(v string) {
	o.Currency = v
}

// GetTimezone returns the Timezone field value
func (o *InstallmentLattice) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *InstallmentLattice) SetTimezone(v string) {
	o.Timezone = v
}

// GetBasedOnLocator returns the BasedOnLocator field value if set, zero value otherwise.
func (o *InstallmentLattice) GetBasedOnLocator() string {
	if o == nil || IsNil(o.BasedOnLocator) {
		var ret string
		return ret
	}
	return *o.BasedOnLocator
}

// GetBasedOnLocatorOk returns a tuple with the BasedOnLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetBasedOnLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.BasedOnLocator) {
		return nil, false
	}
	return o.BasedOnLocator, true
}

// HasBasedOnLocator returns a boolean if a field has been set.
func (o *InstallmentLattice) HasBasedOnLocator() bool {
	if o != nil && !IsNil(o.BasedOnLocator) {
		return true
	}

	return false
}

// SetBasedOnLocator gets a reference to the given string and assigns it to the BasedOnLocator field.
func (o *InstallmentLattice) SetBasedOnLocator(v string) {
	o.BasedOnLocator = &v
}

// GetEffectiveTime returns the EffectiveTime field value
func (o *InstallmentLattice) GetEffectiveTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveTime
}

// GetEffectiveTimeOk returns a tuple with the EffectiveTime field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetEffectiveTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveTime, true
}

// SetEffectiveTime sets field value
func (o *InstallmentLattice) SetEffectiveTime(v time.Time) {
	o.EffectiveTime = v
}

// GetFrames returns the Frames field value
func (o *InstallmentLattice) GetFrames() []InstallmentLatticeFrame {
	if o == nil {
		var ret []InstallmentLatticeFrame
		return ret
	}

	return o.Frames
}

// GetFramesOk returns a tuple with the Frames field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetFramesOk() ([]InstallmentLatticeFrame, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frames, true
}

// SetFrames sets field value
func (o *InstallmentLattice) SetFrames(v []InstallmentLatticeFrame) {
	o.Frames = v
}

// GetReversalLattice returns the ReversalLattice field value
func (o *InstallmentLattice) GetReversalLattice() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReversalLattice
}

// GetReversalLatticeOk returns a tuple with the ReversalLattice field value
// and a boolean to check if the value has been set.
func (o *InstallmentLattice) GetReversalLatticeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReversalLattice, true
}

// SetReversalLattice sets field value
func (o *InstallmentLattice) SetReversalLattice(v bool) {
	o.ReversalLattice = v
}

func (o InstallmentLattice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallmentLattice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	if !IsNil(o.SettingsLocator) {
		toSerialize["settingsLocator"] = o.SettingsLocator
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["accountLocator"] = o.AccountLocator
	toSerialize["termStartTime"] = o.TermStartTime
	toSerialize["termEndTime"] = o.TermEndTime
	if !IsNil(o.TermLocator) {
		toSerialize["termLocator"] = o.TermLocator
	}
	if !IsNil(o.QuoteLocator) {
		toSerialize["quoteLocator"] = o.QuoteLocator
	}
	if !IsNil(o.PolicyLocator) {
		toSerialize["policyLocator"] = o.PolicyLocator
	}
	toSerialize["currency"] = o.Currency
	toSerialize["timezone"] = o.Timezone
	if !IsNil(o.BasedOnLocator) {
		toSerialize["basedOnLocator"] = o.BasedOnLocator
	}
	toSerialize["effectiveTime"] = o.EffectiveTime
	toSerialize["frames"] = o.Frames
	toSerialize["reversalLattice"] = o.ReversalLattice
	return toSerialize, nil
}

func (o *InstallmentLattice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"createdAt",
		"createdBy",
		"accountLocator",
		"termStartTime",
		"termEndTime",
		"currency",
		"timezone",
		"effectiveTime",
		"frames",
		"reversalLattice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallmentLattice := _InstallmentLattice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallmentLattice)

	if err != nil {
		return err
	}

	*o = InstallmentLattice(varInstallmentLattice)

	return err
}

type NullableInstallmentLattice struct {
	value *InstallmentLattice
	isSet bool
}

func (v NullableInstallmentLattice) Get() *InstallmentLattice {
	return v.value
}

func (v *NullableInstallmentLattice) Set(val *InstallmentLattice) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentLattice) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentLattice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentLattice(val *InstallmentLattice) *NullableInstallmentLattice {
	return &NullableInstallmentLattice{value: val, isSet: true}
}

func (v NullableInstallmentLattice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentLattice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
