/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Hold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hold{}

// Hold struct for Hold
type Hold struct {
	Locator          string            `json:"locator"`
	AccountLocator   string            `json:"accountLocator"`
	TargetType       string            `json:"targetType"`
	HoldState        string            `json:"holdState"`
	CreatedAt        time.Time         `json:"createdAt"`
	UpdatedAt        time.Time         `json:"updatedAt"`
	ValidationResult *ValidationResult `json:"validationResult,omitempty"`
}

type _Hold Hold

// NewHold instantiates a new Hold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHold(locator string, accountLocator string, targetType string, holdState string, createdAt time.Time, updatedAt time.Time) *Hold {
	this := Hold{}
	this.Locator = locator
	this.AccountLocator = accountLocator
	this.TargetType = targetType
	this.HoldState = holdState
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewHoldWithDefaults instantiates a new Hold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldWithDefaults() *Hold {
	this := Hold{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Hold) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Hold) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Hold) SetLocator(v string) {
	o.Locator = v
}

// GetAccountLocator returns the AccountLocator field value
func (o *Hold) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *Hold) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *Hold) SetAccountLocator(v string) {
	o.AccountLocator = v
}

// GetTargetType returns the TargetType field value
func (o *Hold) GetTargetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value
// and a boolean to check if the value has been set.
func (o *Hold) GetTargetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetType, true
}

// SetTargetType sets field value
func (o *Hold) SetTargetType(v string) {
	o.TargetType = v
}

// GetHoldState returns the HoldState field value
func (o *Hold) GetHoldState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HoldState
}

// GetHoldStateOk returns a tuple with the HoldState field value
// and a boolean to check if the value has been set.
func (o *Hold) GetHoldStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldState, true
}

// SetHoldState sets field value
func (o *Hold) SetHoldState(v string) {
	o.HoldState = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Hold) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Hold) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Hold) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Hold) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Hold) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Hold) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *Hold) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hold) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *Hold) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *Hold) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

func (o Hold) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["accountLocator"] = o.AccountLocator
	toSerialize["targetType"] = o.TargetType
	toSerialize["holdState"] = o.HoldState
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	return toSerialize, nil
}

func (o *Hold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"accountLocator",
		"targetType",
		"holdState",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHold := _Hold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHold)

	if err != nil {
		return err
	}

	*o = Hold(varHold)

	return err
}

type NullableHold struct {
	value *Hold
	isSet bool
}

func (v NullableHold) Get() *Hold {
	return v.value
}

func (v *NullableHold) Set(val *Hold) {
	v.value = val
	v.isSet = true
}

func (v NullableHold) IsSet() bool {
	return v.isSet
}

func (v *NullableHold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHold(val *Hold) *NullableHold {
	return &NullableHold{value: val, isSet: true}
}

func (v NullableHold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
