/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"time"
)

// checks if the PatchDelinquencyEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchDelinquencyEvent{}

// PatchDelinquencyEvent struct for PatchDelinquencyEvent
type PatchDelinquencyEvent struct {
	TriggerTime           *time.Time `json:"triggerTime,omitempty"`
	DelinquencyEventState *string    `json:"delinquencyEventState,omitempty"`
}

// NewPatchDelinquencyEvent instantiates a new PatchDelinquencyEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchDelinquencyEvent() *PatchDelinquencyEvent {
	this := PatchDelinquencyEvent{}
	return &this
}

// NewPatchDelinquencyEventWithDefaults instantiates a new PatchDelinquencyEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchDelinquencyEventWithDefaults() *PatchDelinquencyEvent {
	this := PatchDelinquencyEvent{}
	return &this
}

// GetTriggerTime returns the TriggerTime field value if set, zero value otherwise.
func (o *PatchDelinquencyEvent) GetTriggerTime() time.Time {
	if o == nil || IsNil(o.TriggerTime) {
		var ret time.Time
		return ret
	}
	return *o.TriggerTime
}

// GetTriggerTimeOk returns a tuple with the TriggerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchDelinquencyEvent) GetTriggerTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TriggerTime) {
		return nil, false
	}
	return o.TriggerTime, true
}

// HasTriggerTime returns a boolean if a field has been set.
func (o *PatchDelinquencyEvent) HasTriggerTime() bool {
	if o != nil && !IsNil(o.TriggerTime) {
		return true
	}

	return false
}

// SetTriggerTime gets a reference to the given time.Time and assigns it to the TriggerTime field.
func (o *PatchDelinquencyEvent) SetTriggerTime(v time.Time) {
	o.TriggerTime = &v
}

// GetDelinquencyEventState returns the DelinquencyEventState field value if set, zero value otherwise.
func (o *PatchDelinquencyEvent) GetDelinquencyEventState() string {
	if o == nil || IsNil(o.DelinquencyEventState) {
		var ret string
		return ret
	}
	return *o.DelinquencyEventState
}

// GetDelinquencyEventStateOk returns a tuple with the DelinquencyEventState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchDelinquencyEvent) GetDelinquencyEventStateOk() (*string, bool) {
	if o == nil || IsNil(o.DelinquencyEventState) {
		return nil, false
	}
	return o.DelinquencyEventState, true
}

// HasDelinquencyEventState returns a boolean if a field has been set.
func (o *PatchDelinquencyEvent) HasDelinquencyEventState() bool {
	if o != nil && !IsNil(o.DelinquencyEventState) {
		return true
	}

	return false
}

// SetDelinquencyEventState gets a reference to the given string and assigns it to the DelinquencyEventState field.
func (o *PatchDelinquencyEvent) SetDelinquencyEventState(v string) {
	o.DelinquencyEventState = &v
}

func (o PatchDelinquencyEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchDelinquencyEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TriggerTime) {
		toSerialize["triggerTime"] = o.TriggerTime
	}
	if !IsNil(o.DelinquencyEventState) {
		toSerialize["delinquencyEventState"] = o.DelinquencyEventState
	}
	return toSerialize, nil
}

type NullablePatchDelinquencyEvent struct {
	value *PatchDelinquencyEvent
	isSet bool
}

func (v NullablePatchDelinquencyEvent) Get() *PatchDelinquencyEvent {
	return v.value
}

func (v *NullablePatchDelinquencyEvent) Set(val *PatchDelinquencyEvent) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchDelinquencyEvent) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchDelinquencyEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchDelinquencyEvent(val *PatchDelinquencyEvent) *NullablePatchDelinquencyEvent {
	return &NullablePatchDelinquencyEvent{value: val, isSet: true}
}

func (v NullablePatchDelinquencyEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchDelinquencyEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
