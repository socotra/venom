/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PatchPayment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPayment{}

// PatchPayment struct for PatchPayment
type PatchPayment struct {
	AccountLocator                *string                           `json:"accountLocator,omitempty"`
	Type                          *string                           `json:"type,omitempty"`
	Amount                        *float32                          `json:"amount,omitempty"`
	SetData                       map[string]map[string]interface{} `json:"setData"`
	RemoveData                    map[string]map[string]interface{} `json:"removeData"`
	AddTargets                    []CreditItem                      `json:"addTargets"`
	RemoveTargets                 []string                          `json:"removeTargets"`
	UseDefaultFinancialInstrument *bool                             `json:"useDefaultFinancialInstrument,omitempty"`
	FinancialInstrumentLocator    *string                           `json:"financialInstrumentLocator,omitempty"`
	TransactionMethod             *string                           `json:"transactionMethod,omitempty"`
	TransactionNumber             *string                           `json:"transactionNumber,omitempty"`
	Currency                      *string                           `json:"currency,omitempty"`
	PaymentMode                   *string                           `json:"paymentMode,omitempty"`
}

type _PatchPayment PatchPayment

// NewPatchPayment instantiates a new PatchPayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPayment(setData map[string]map[string]interface{}, removeData map[string]map[string]interface{}, addTargets []CreditItem, removeTargets []string) *PatchPayment {
	this := PatchPayment{}
	this.SetData = setData
	this.RemoveData = removeData
	this.AddTargets = addTargets
	this.RemoveTargets = removeTargets
	return &this
}

// NewPatchPaymentWithDefaults instantiates a new PatchPayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPaymentWithDefaults() *PatchPayment {
	this := PatchPayment{}
	return &this
}

// GetAccountLocator returns the AccountLocator field value if set, zero value otherwise.
func (o *PatchPayment) GetAccountLocator() string {
	if o == nil || IsNil(o.AccountLocator) {
		var ret string
		return ret
	}
	return *o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetAccountLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.AccountLocator) {
		return nil, false
	}
	return o.AccountLocator, true
}

// HasAccountLocator returns a boolean if a field has been set.
func (o *PatchPayment) HasAccountLocator() bool {
	if o != nil && !IsNil(o.AccountLocator) {
		return true
	}

	return false
}

// SetAccountLocator gets a reference to the given string and assigns it to the AccountLocator field.
func (o *PatchPayment) SetAccountLocator(v string) {
	o.AccountLocator = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchPayment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchPayment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchPayment) SetType(v string) {
	o.Type = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PatchPayment) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PatchPayment) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *PatchPayment) SetAmount(v float32) {
	o.Amount = &v
}

// GetSetData returns the SetData field value
func (o *PatchPayment) GetSetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.SetData
}

// GetSetDataOk returns a tuple with the SetData field value
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetSetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.SetData, true
}

// SetSetData sets field value
func (o *PatchPayment) SetSetData(v map[string]map[string]interface{}) {
	o.SetData = v
}

// GetRemoveData returns the RemoveData field value
func (o *PatchPayment) GetRemoveData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RemoveData
}

// GetRemoveDataOk returns a tuple with the RemoveData field value
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetRemoveDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RemoveData, true
}

// SetRemoveData sets field value
func (o *PatchPayment) SetRemoveData(v map[string]map[string]interface{}) {
	o.RemoveData = v
}

// GetAddTargets returns the AddTargets field value
func (o *PatchPayment) GetAddTargets() []CreditItem {
	if o == nil {
		var ret []CreditItem
		return ret
	}

	return o.AddTargets
}

// GetAddTargetsOk returns a tuple with the AddTargets field value
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetAddTargetsOk() ([]CreditItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddTargets, true
}

// SetAddTargets sets field value
func (o *PatchPayment) SetAddTargets(v []CreditItem) {
	o.AddTargets = v
}

// GetRemoveTargets returns the RemoveTargets field value
func (o *PatchPayment) GetRemoveTargets() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemoveTargets
}

// GetRemoveTargetsOk returns a tuple with the RemoveTargets field value
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetRemoveTargetsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveTargets, true
}

// SetRemoveTargets sets field value
func (o *PatchPayment) SetRemoveTargets(v []string) {
	o.RemoveTargets = v
}

// GetUseDefaultFinancialInstrument returns the UseDefaultFinancialInstrument field value if set, zero value otherwise.
func (o *PatchPayment) GetUseDefaultFinancialInstrument() bool {
	if o == nil || IsNil(o.UseDefaultFinancialInstrument) {
		var ret bool
		return ret
	}
	return *o.UseDefaultFinancialInstrument
}

// GetUseDefaultFinancialInstrumentOk returns a tuple with the UseDefaultFinancialInstrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetUseDefaultFinancialInstrumentOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultFinancialInstrument) {
		return nil, false
	}
	return o.UseDefaultFinancialInstrument, true
}

// HasUseDefaultFinancialInstrument returns a boolean if a field has been set.
func (o *PatchPayment) HasUseDefaultFinancialInstrument() bool {
	if o != nil && !IsNil(o.UseDefaultFinancialInstrument) {
		return true
	}

	return false
}

// SetUseDefaultFinancialInstrument gets a reference to the given bool and assigns it to the UseDefaultFinancialInstrument field.
func (o *PatchPayment) SetUseDefaultFinancialInstrument(v bool) {
	o.UseDefaultFinancialInstrument = &v
}

// GetFinancialInstrumentLocator returns the FinancialInstrumentLocator field value if set, zero value otherwise.
func (o *PatchPayment) GetFinancialInstrumentLocator() string {
	if o == nil || IsNil(o.FinancialInstrumentLocator) {
		var ret string
		return ret
	}
	return *o.FinancialInstrumentLocator
}

// GetFinancialInstrumentLocatorOk returns a tuple with the FinancialInstrumentLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetFinancialInstrumentLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.FinancialInstrumentLocator) {
		return nil, false
	}
	return o.FinancialInstrumentLocator, true
}

// HasFinancialInstrumentLocator returns a boolean if a field has been set.
func (o *PatchPayment) HasFinancialInstrumentLocator() bool {
	if o != nil && !IsNil(o.FinancialInstrumentLocator) {
		return true
	}

	return false
}

// SetFinancialInstrumentLocator gets a reference to the given string and assigns it to the FinancialInstrumentLocator field.
func (o *PatchPayment) SetFinancialInstrumentLocator(v string) {
	o.FinancialInstrumentLocator = &v
}

// GetTransactionMethod returns the TransactionMethod field value if set, zero value otherwise.
func (o *PatchPayment) GetTransactionMethod() string {
	if o == nil || IsNil(o.TransactionMethod) {
		var ret string
		return ret
	}
	return *o.TransactionMethod
}

// GetTransactionMethodOk returns a tuple with the TransactionMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetTransactionMethodOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionMethod) {
		return nil, false
	}
	return o.TransactionMethod, true
}

// HasTransactionMethod returns a boolean if a field has been set.
func (o *PatchPayment) HasTransactionMethod() bool {
	if o != nil && !IsNil(o.TransactionMethod) {
		return true
	}

	return false
}

// SetTransactionMethod gets a reference to the given string and assigns it to the TransactionMethod field.
func (o *PatchPayment) SetTransactionMethod(v string) {
	o.TransactionMethod = &v
}

// GetTransactionNumber returns the TransactionNumber field value if set, zero value otherwise.
func (o *PatchPayment) GetTransactionNumber() string {
	if o == nil || IsNil(o.TransactionNumber) {
		var ret string
		return ret
	}
	return *o.TransactionNumber
}

// GetTransactionNumberOk returns a tuple with the TransactionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetTransactionNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionNumber) {
		return nil, false
	}
	return o.TransactionNumber, true
}

// HasTransactionNumber returns a boolean if a field has been set.
func (o *PatchPayment) HasTransactionNumber() bool {
	if o != nil && !IsNil(o.TransactionNumber) {
		return true
	}

	return false
}

// SetTransactionNumber gets a reference to the given string and assigns it to the TransactionNumber field.
func (o *PatchPayment) SetTransactionNumber(v string) {
	o.TransactionNumber = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PatchPayment) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PatchPayment) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PatchPayment) SetCurrency(v string) {
	o.Currency = &v
}

// GetPaymentMode returns the PaymentMode field value if set, zero value otherwise.
func (o *PatchPayment) GetPaymentMode() string {
	if o == nil || IsNil(o.PaymentMode) {
		var ret string
		return ret
	}
	return *o.PaymentMode
}

// GetPaymentModeOk returns a tuple with the PaymentMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPayment) GetPaymentModeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMode) {
		return nil, false
	}
	return o.PaymentMode, true
}

// HasPaymentMode returns a boolean if a field has been set.
func (o *PatchPayment) HasPaymentMode() bool {
	if o != nil && !IsNil(o.PaymentMode) {
		return true
	}

	return false
}

// SetPaymentMode gets a reference to the given string and assigns it to the PaymentMode field.
func (o *PatchPayment) SetPaymentMode(v string) {
	o.PaymentMode = &v
}

func (o PatchPayment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPayment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountLocator) {
		toSerialize["accountLocator"] = o.AccountLocator
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["setData"] = o.SetData
	toSerialize["removeData"] = o.RemoveData
	toSerialize["addTargets"] = o.AddTargets
	toSerialize["removeTargets"] = o.RemoveTargets
	if !IsNil(o.UseDefaultFinancialInstrument) {
		toSerialize["useDefaultFinancialInstrument"] = o.UseDefaultFinancialInstrument
	}
	if !IsNil(o.FinancialInstrumentLocator) {
		toSerialize["financialInstrumentLocator"] = o.FinancialInstrumentLocator
	}
	if !IsNil(o.TransactionMethod) {
		toSerialize["transactionMethod"] = o.TransactionMethod
	}
	if !IsNil(o.TransactionNumber) {
		toSerialize["transactionNumber"] = o.TransactionNumber
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.PaymentMode) {
		toSerialize["paymentMode"] = o.PaymentMode
	}
	return toSerialize, nil
}

func (o *PatchPayment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"setData",
		"removeData",
		"addTargets",
		"removeTargets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchPayment := _PatchPayment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchPayment)

	if err != nil {
		return err
	}

	*o = PatchPayment(varPatchPayment)

	return err
}

type NullablePatchPayment struct {
	value *PatchPayment
	isSet bool
}

func (v NullablePatchPayment) Get() *PatchPayment {
	return v.value
}

func (v *NullablePatchPayment) Set(val *PatchPayment) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPayment(val *PatchPayment) *NullablePatchPayment {
	return &NullablePatchPayment{value: val, isSet: true}
}

func (v NullablePatchPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
