/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ShortfallEventData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortfallEventData{}

// ShortfallEventData struct for ShortfallEventData
type ShortfallEventData struct {
	ShortfallCreditLocator string `json:"shortfallCreditLocator"`
}

type _ShortfallEventData ShortfallEventData

// NewShortfallEventData instantiates a new ShortfallEventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortfallEventData(shortfallCreditLocator string) *ShortfallEventData {
	this := ShortfallEventData{}
	this.ShortfallCreditLocator = shortfallCreditLocator
	return &this
}

// NewShortfallEventDataWithDefaults instantiates a new ShortfallEventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortfallEventDataWithDefaults() *ShortfallEventData {
	this := ShortfallEventData{}
	return &this
}

// GetShortfallCreditLocator returns the ShortfallCreditLocator field value
func (o *ShortfallEventData) GetShortfallCreditLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShortfallCreditLocator
}

// GetShortfallCreditLocatorOk returns a tuple with the ShortfallCreditLocator field value
// and a boolean to check if the value has been set.
func (o *ShortfallEventData) GetShortfallCreditLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortfallCreditLocator, true
}

// SetShortfallCreditLocator sets field value
func (o *ShortfallEventData) SetShortfallCreditLocator(v string) {
	o.ShortfallCreditLocator = v
}

func (o ShortfallEventData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortfallEventData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shortfallCreditLocator"] = o.ShortfallCreditLocator
	return toSerialize, nil
}

func (o *ShortfallEventData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shortfallCreditLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShortfallEventData := _ShortfallEventData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShortfallEventData)

	if err != nil {
		return err
	}

	*o = ShortfallEventData(varShortfallEventData)

	return err
}

type NullableShortfallEventData struct {
	value *ShortfallEventData
	isSet bool
}

func (v NullableShortfallEventData) Get() *ShortfallEventData {
	return v.value
}

func (v *NullableShortfallEventData) Set(val *ShortfallEventData) {
	v.value = val
	v.isSet = true
}

func (v NullableShortfallEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableShortfallEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortfallEventData(val *ShortfallEventData) *NullableShortfallEventData {
	return &NullableShortfallEventData{value: val, isSet: true}
}

func (v NullableShortfallEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortfallEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
