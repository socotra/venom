/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// InstallmentsControllerAPIService InstallmentsControllerAPI service
type InstallmentsControllerAPIService service

type ApiListByPolicyLocatorRequest struct {
	ctx           context.Context
	ApiService    *InstallmentsControllerAPIService
	policyLocator string
	offset        *int32
	count         *int32
	extended      *bool
}

func (r ApiListByPolicyLocatorRequest) Offset(offset int32) ApiListByPolicyLocatorRequest {
	r.offset = &offset
	return r
}

func (r ApiListByPolicyLocatorRequest) Count(count int32) ApiListByPolicyLocatorRequest {
	r.count = &count
	return r
}

func (r ApiListByPolicyLocatorRequest) Extended(extended bool) ApiListByPolicyLocatorRequest {
	r.extended = &extended
	return r
}

func (r ApiListByPolicyLocatorRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListByPolicyLocatorExecute(r)
}

/*
ListByPolicyLocator Method for ListByPolicyLocator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyLocator
	@return ApiListByPolicyLocatorRequest
*/
func (a *InstallmentsControllerAPIService) ListByPolicyLocator(ctx context.Context, policyLocator string) ApiListByPolicyLocatorRequest {
	return ApiListByPolicyLocatorRequest{
		ApiService:    a,
		ctx:           ctx,
		policyLocator: policyLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InstallmentsControllerAPIService) ListByPolicyLocatorExecute(r ApiListByPolicyLocatorRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallmentsControllerAPIService.ListByPolicyLocator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/installments/policies/{policyLocator}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"policyLocator"+"}", url.PathEscape(parameterValueToString(r.policyLocator, "policyLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListByQuoteLocatorRequest struct {
	ctx          context.Context
	ApiService   *InstallmentsControllerAPIService
	quoteLocator string
	offset       *int32
	count        *int32
	extended     *bool
}

func (r ApiListByQuoteLocatorRequest) Offset(offset int32) ApiListByQuoteLocatorRequest {
	r.offset = &offset
	return r
}

func (r ApiListByQuoteLocatorRequest) Count(count int32) ApiListByQuoteLocatorRequest {
	r.count = &count
	return r
}

func (r ApiListByQuoteLocatorRequest) Extended(extended bool) ApiListByQuoteLocatorRequest {
	r.extended = &extended
	return r
}

func (r ApiListByQuoteLocatorRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListByQuoteLocatorExecute(r)
}

/*
ListByQuoteLocator Method for ListByQuoteLocator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param quoteLocator
	@return ApiListByQuoteLocatorRequest
*/
func (a *InstallmentsControllerAPIService) ListByQuoteLocator(ctx context.Context, quoteLocator string) ApiListByQuoteLocatorRequest {
	return ApiListByQuoteLocatorRequest{
		ApiService:   a,
		ctx:          ctx,
		quoteLocator: quoteLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InstallmentsControllerAPIService) ListByQuoteLocatorExecute(r ApiListByQuoteLocatorRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallmentsControllerAPIService.ListByQuoteLocator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/installments/quotes/{quoteLocator}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"quoteLocator"+"}", url.PathEscape(parameterValueToString(r.quoteLocator, "quoteLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListByTransactionLocatorRequest struct {
	ctx                context.Context
	ApiService         *InstallmentsControllerAPIService
	transactionLocator string
	offset             *int32
	count              *int32
	extended           *bool
}

func (r ApiListByTransactionLocatorRequest) Offset(offset int32) ApiListByTransactionLocatorRequest {
	r.offset = &offset
	return r
}

func (r ApiListByTransactionLocatorRequest) Count(count int32) ApiListByTransactionLocatorRequest {
	r.count = &count
	return r
}

func (r ApiListByTransactionLocatorRequest) Extended(extended bool) ApiListByTransactionLocatorRequest {
	r.extended = &extended
	return r
}

func (r ApiListByTransactionLocatorRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListByTransactionLocatorExecute(r)
}

/*
ListByTransactionLocator Method for ListByTransactionLocator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transactionLocator
	@return ApiListByTransactionLocatorRequest
*/
func (a *InstallmentsControllerAPIService) ListByTransactionLocator(ctx context.Context, transactionLocator string) ApiListByTransactionLocatorRequest {
	return ApiListByTransactionLocatorRequest{
		ApiService:         a,
		ctx:                ctx,
		transactionLocator: transactionLocator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *InstallmentsControllerAPIService) ListByTransactionLocatorExecute(r ApiListByTransactionLocatorRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstallmentsControllerAPIService.ListByTransactionLocator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/installments/transactions/{transactionLocator}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"transactionLocator"+"}", url.PathEscape(parameterValueToString(r.transactionLocator, "transactionLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	if r.extended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extended", r.extended, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
