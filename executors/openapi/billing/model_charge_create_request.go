/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChargeCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeCreateRequest{}

// ChargeCreateRequest struct for ChargeCreateRequest
type ChargeCreateRequest struct {
	Amount               float32 `json:"amount"`
	ChargeType           string  `json:"chargeType"`
	TransactionLocator   *string `json:"transactionLocator,omitempty"`
	ElementLocator       *string `json:"elementLocator,omitempty"`
	ElementStaticLocator *string `json:"elementStaticLocator,omitempty"`
	Tag                  *string `json:"tag,omitempty"`
}

type _ChargeCreateRequest ChargeCreateRequest

// NewChargeCreateRequest instantiates a new ChargeCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeCreateRequest(amount float32, chargeType string) *ChargeCreateRequest {
	this := ChargeCreateRequest{}
	this.Amount = amount
	this.ChargeType = chargeType
	return &this
}

// NewChargeCreateRequestWithDefaults instantiates a new ChargeCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeCreateRequestWithDefaults() *ChargeCreateRequest {
	this := ChargeCreateRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *ChargeCreateRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ChargeCreateRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ChargeCreateRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetChargeType returns the ChargeType field value
func (o *ChargeCreateRequest) GetChargeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value
// and a boolean to check if the value has been set.
func (o *ChargeCreateRequest) GetChargeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeType, true
}

// SetChargeType sets field value
func (o *ChargeCreateRequest) SetChargeType(v string) {
	o.ChargeType = v
}

// GetTransactionLocator returns the TransactionLocator field value if set, zero value otherwise.
func (o *ChargeCreateRequest) GetTransactionLocator() string {
	if o == nil || IsNil(o.TransactionLocator) {
		var ret string
		return ret
	}
	return *o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCreateRequest) GetTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionLocator) {
		return nil, false
	}
	return o.TransactionLocator, true
}

// HasTransactionLocator returns a boolean if a field has been set.
func (o *ChargeCreateRequest) HasTransactionLocator() bool {
	if o != nil && !IsNil(o.TransactionLocator) {
		return true
	}

	return false
}

// SetTransactionLocator gets a reference to the given string and assigns it to the TransactionLocator field.
func (o *ChargeCreateRequest) SetTransactionLocator(v string) {
	o.TransactionLocator = &v
}

// GetElementLocator returns the ElementLocator field value if set, zero value otherwise.
func (o *ChargeCreateRequest) GetElementLocator() string {
	if o == nil || IsNil(o.ElementLocator) {
		var ret string
		return ret
	}
	return *o.ElementLocator
}

// GetElementLocatorOk returns a tuple with the ElementLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCreateRequest) GetElementLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ElementLocator) {
		return nil, false
	}
	return o.ElementLocator, true
}

// HasElementLocator returns a boolean if a field has been set.
func (o *ChargeCreateRequest) HasElementLocator() bool {
	if o != nil && !IsNil(o.ElementLocator) {
		return true
	}

	return false
}

// SetElementLocator gets a reference to the given string and assigns it to the ElementLocator field.
func (o *ChargeCreateRequest) SetElementLocator(v string) {
	o.ElementLocator = &v
}

// GetElementStaticLocator returns the ElementStaticLocator field value if set, zero value otherwise.
func (o *ChargeCreateRequest) GetElementStaticLocator() string {
	if o == nil || IsNil(o.ElementStaticLocator) {
		var ret string
		return ret
	}
	return *o.ElementStaticLocator
}

// GetElementStaticLocatorOk returns a tuple with the ElementStaticLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCreateRequest) GetElementStaticLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ElementStaticLocator) {
		return nil, false
	}
	return o.ElementStaticLocator, true
}

// HasElementStaticLocator returns a boolean if a field has been set.
func (o *ChargeCreateRequest) HasElementStaticLocator() bool {
	if o != nil && !IsNil(o.ElementStaticLocator) {
		return true
	}

	return false
}

// SetElementStaticLocator gets a reference to the given string and assigns it to the ElementStaticLocator field.
func (o *ChargeCreateRequest) SetElementStaticLocator(v string) {
	o.ElementStaticLocator = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ChargeCreateRequest) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCreateRequest) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ChargeCreateRequest) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *ChargeCreateRequest) SetTag(v string) {
	o.Tag = &v
}

func (o ChargeCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["chargeType"] = o.ChargeType
	if !IsNil(o.TransactionLocator) {
		toSerialize["transactionLocator"] = o.TransactionLocator
	}
	if !IsNil(o.ElementLocator) {
		toSerialize["elementLocator"] = o.ElementLocator
	}
	if !IsNil(o.ElementStaticLocator) {
		toSerialize["elementStaticLocator"] = o.ElementStaticLocator
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *ChargeCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"chargeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeCreateRequest := _ChargeCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeCreateRequest)

	if err != nil {
		return err
	}

	*o = ChargeCreateRequest(varChargeCreateRequest)

	return err
}

type NullableChargeCreateRequest struct {
	value *ChargeCreateRequest
	isSet bool
}

func (v NullableChargeCreateRequest) Get() *ChargeCreateRequest {
	return v.value
}

func (v *NullableChargeCreateRequest) Set(val *ChargeCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeCreateRequest(val *ChargeCreateRequest) *NullableChargeCreateRequest {
	return &NullableChargeCreateRequest{value: val, isSet: true}
}

func (v NullableChargeCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
