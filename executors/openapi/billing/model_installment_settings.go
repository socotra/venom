/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InstallmentSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallmentSettings{}

// InstallmentSettings struct for InstallmentSettings
type InstallmentSettings struct {
	Cadence                string     `json:"cadence"`
	AnchorMode             string     `json:"anchorMode"`
	GenerateLeadDays       int32      `json:"generateLeadDays"`
	DueLeadDays            int32      `json:"dueLeadDays"`
	InstallmentWeights     []float32  `json:"installmentWeights"`
	MaxInstallmentsPerTerm *int32     `json:"maxInstallmentsPerTerm,omitempty"`
	AnchorType             *string    `json:"anchorType,omitempty"`
	DayOfMonth             *int32     `json:"dayOfMonth,omitempty"`
	DayOfWeek              *string    `json:"dayOfWeek,omitempty"`
	WeekOfMonth            *string    `json:"weekOfMonth,omitempty"`
	AnchorTime             *time.Time `json:"anchorTime,omitempty"`
}

type _InstallmentSettings InstallmentSettings

// NewInstallmentSettings instantiates a new InstallmentSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentSettings(cadence string, anchorMode string, generateLeadDays int32, dueLeadDays int32, installmentWeights []float32) *InstallmentSettings {
	this := InstallmentSettings{}
	this.Cadence = cadence
	this.AnchorMode = anchorMode
	this.GenerateLeadDays = generateLeadDays
	this.DueLeadDays = dueLeadDays
	this.InstallmentWeights = installmentWeights
	return &this
}

// NewInstallmentSettingsWithDefaults instantiates a new InstallmentSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentSettingsWithDefaults() *InstallmentSettings {
	this := InstallmentSettings{}
	return &this
}

// GetCadence returns the Cadence field value
func (o *InstallmentSettings) GetCadence() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cadence
}

// GetCadenceOk returns a tuple with the Cadence field value
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetCadenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cadence, true
}

// SetCadence sets field value
func (o *InstallmentSettings) SetCadence(v string) {
	o.Cadence = v
}

// GetAnchorMode returns the AnchorMode field value
func (o *InstallmentSettings) GetAnchorMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnchorMode
}

// GetAnchorModeOk returns a tuple with the AnchorMode field value
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetAnchorModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnchorMode, true
}

// SetAnchorMode sets field value
func (o *InstallmentSettings) SetAnchorMode(v string) {
	o.AnchorMode = v
}

// GetGenerateLeadDays returns the GenerateLeadDays field value
func (o *InstallmentSettings) GetGenerateLeadDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GenerateLeadDays
}

// GetGenerateLeadDaysOk returns a tuple with the GenerateLeadDays field value
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetGenerateLeadDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerateLeadDays, true
}

// SetGenerateLeadDays sets field value
func (o *InstallmentSettings) SetGenerateLeadDays(v int32) {
	o.GenerateLeadDays = v
}

// GetDueLeadDays returns the DueLeadDays field value
func (o *InstallmentSettings) GetDueLeadDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DueLeadDays
}

// GetDueLeadDaysOk returns a tuple with the DueLeadDays field value
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetDueLeadDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueLeadDays, true
}

// SetDueLeadDays sets field value
func (o *InstallmentSettings) SetDueLeadDays(v int32) {
	o.DueLeadDays = v
}

// GetInstallmentWeights returns the InstallmentWeights field value
func (o *InstallmentSettings) GetInstallmentWeights() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.InstallmentWeights
}

// GetInstallmentWeightsOk returns a tuple with the InstallmentWeights field value
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetInstallmentWeightsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallmentWeights, true
}

// SetInstallmentWeights sets field value
func (o *InstallmentSettings) SetInstallmentWeights(v []float32) {
	o.InstallmentWeights = v
}

// GetMaxInstallmentsPerTerm returns the MaxInstallmentsPerTerm field value if set, zero value otherwise.
func (o *InstallmentSettings) GetMaxInstallmentsPerTerm() int32 {
	if o == nil || IsNil(o.MaxInstallmentsPerTerm) {
		var ret int32
		return ret
	}
	return *o.MaxInstallmentsPerTerm
}

// GetMaxInstallmentsPerTermOk returns a tuple with the MaxInstallmentsPerTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetMaxInstallmentsPerTermOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxInstallmentsPerTerm) {
		return nil, false
	}
	return o.MaxInstallmentsPerTerm, true
}

// HasMaxInstallmentsPerTerm returns a boolean if a field has been set.
func (o *InstallmentSettings) HasMaxInstallmentsPerTerm() bool {
	if o != nil && !IsNil(o.MaxInstallmentsPerTerm) {
		return true
	}

	return false
}

// SetMaxInstallmentsPerTerm gets a reference to the given int32 and assigns it to the MaxInstallmentsPerTerm field.
func (o *InstallmentSettings) SetMaxInstallmentsPerTerm(v int32) {
	o.MaxInstallmentsPerTerm = &v
}

// GetAnchorType returns the AnchorType field value if set, zero value otherwise.
func (o *InstallmentSettings) GetAnchorType() string {
	if o == nil || IsNil(o.AnchorType) {
		var ret string
		return ret
	}
	return *o.AnchorType
}

// GetAnchorTypeOk returns a tuple with the AnchorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetAnchorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorType) {
		return nil, false
	}
	return o.AnchorType, true
}

// HasAnchorType returns a boolean if a field has been set.
func (o *InstallmentSettings) HasAnchorType() bool {
	if o != nil && !IsNil(o.AnchorType) {
		return true
	}

	return false
}

// SetAnchorType gets a reference to the given string and assigns it to the AnchorType field.
func (o *InstallmentSettings) SetAnchorType(v string) {
	o.AnchorType = &v
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise.
func (o *InstallmentSettings) GetDayOfMonth() int32 {
	if o == nil || IsNil(o.DayOfMonth) {
		var ret int32
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetDayOfMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.DayOfMonth) {
		return nil, false
	}
	return o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *InstallmentSettings) HasDayOfMonth() bool {
	if o != nil && !IsNil(o.DayOfMonth) {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int32 and assigns it to the DayOfMonth field.
func (o *InstallmentSettings) SetDayOfMonth(v int32) {
	o.DayOfMonth = &v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *InstallmentSettings) GetDayOfWeek() string {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret string
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetDayOfWeekOk() (*string, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *InstallmentSettings) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given string and assigns it to the DayOfWeek field.
func (o *InstallmentSettings) SetDayOfWeek(v string) {
	o.DayOfWeek = &v
}

// GetWeekOfMonth returns the WeekOfMonth field value if set, zero value otherwise.
func (o *InstallmentSettings) GetWeekOfMonth() string {
	if o == nil || IsNil(o.WeekOfMonth) {
		var ret string
		return ret
	}
	return *o.WeekOfMonth
}

// GetWeekOfMonthOk returns a tuple with the WeekOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetWeekOfMonthOk() (*string, bool) {
	if o == nil || IsNil(o.WeekOfMonth) {
		return nil, false
	}
	return o.WeekOfMonth, true
}

// HasWeekOfMonth returns a boolean if a field has been set.
func (o *InstallmentSettings) HasWeekOfMonth() bool {
	if o != nil && !IsNil(o.WeekOfMonth) {
		return true
	}

	return false
}

// SetWeekOfMonth gets a reference to the given string and assigns it to the WeekOfMonth field.
func (o *InstallmentSettings) SetWeekOfMonth(v string) {
	o.WeekOfMonth = &v
}

// GetAnchorTime returns the AnchorTime field value if set, zero value otherwise.
func (o *InstallmentSettings) GetAnchorTime() time.Time {
	if o == nil || IsNil(o.AnchorTime) {
		var ret time.Time
		return ret
	}
	return *o.AnchorTime
}

// GetAnchorTimeOk returns a tuple with the AnchorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentSettings) GetAnchorTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AnchorTime) {
		return nil, false
	}
	return o.AnchorTime, true
}

// HasAnchorTime returns a boolean if a field has been set.
func (o *InstallmentSettings) HasAnchorTime() bool {
	if o != nil && !IsNil(o.AnchorTime) {
		return true
	}

	return false
}

// SetAnchorTime gets a reference to the given time.Time and assigns it to the AnchorTime field.
func (o *InstallmentSettings) SetAnchorTime(v time.Time) {
	o.AnchorTime = &v
}

func (o InstallmentSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallmentSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cadence"] = o.Cadence
	toSerialize["anchorMode"] = o.AnchorMode
	toSerialize["generateLeadDays"] = o.GenerateLeadDays
	toSerialize["dueLeadDays"] = o.DueLeadDays
	toSerialize["installmentWeights"] = o.InstallmentWeights
	if !IsNil(o.MaxInstallmentsPerTerm) {
		toSerialize["maxInstallmentsPerTerm"] = o.MaxInstallmentsPerTerm
	}
	if !IsNil(o.AnchorType) {
		toSerialize["anchorType"] = o.AnchorType
	}
	if !IsNil(o.DayOfMonth) {
		toSerialize["dayOfMonth"] = o.DayOfMonth
	}
	if !IsNil(o.DayOfWeek) {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if !IsNil(o.WeekOfMonth) {
		toSerialize["weekOfMonth"] = o.WeekOfMonth
	}
	if !IsNil(o.AnchorTime) {
		toSerialize["anchorTime"] = o.AnchorTime
	}
	return toSerialize, nil
}

func (o *InstallmentSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cadence",
		"anchorMode",
		"generateLeadDays",
		"dueLeadDays",
		"installmentWeights",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallmentSettings := _InstallmentSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallmentSettings)

	if err != nil {
		return err
	}

	*o = InstallmentSettings(varInstallmentSettings)

	return err
}

type NullableInstallmentSettings struct {
	value *InstallmentSettings
	isSet bool
}

func (v NullableInstallmentSettings) Get() *InstallmentSettings {
	return v.value
}

func (v *NullableInstallmentSettings) Set(val *InstallmentSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentSettings(val *InstallmentSettings) *NullableInstallmentSettings {
	return &NullableInstallmentSettings{value: val, isSet: true}
}

func (v NullableInstallmentSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
