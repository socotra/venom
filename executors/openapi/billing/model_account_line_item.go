/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccountLineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountLineItem{}

// AccountLineItem struct for AccountLineItem
type AccountLineItem struct {
	Amount           float32 `json:"amount"`
	AccountingType   string  `json:"accountingType"`
	ReferenceType    string  `json:"referenceType"`
	ReferenceLocator string  `json:"referenceLocator"`
}

type _AccountLineItem AccountLineItem

// NewAccountLineItem instantiates a new AccountLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountLineItem(amount float32, accountingType string, referenceType string, referenceLocator string) *AccountLineItem {
	this := AccountLineItem{}
	this.Amount = amount
	this.AccountingType = accountingType
	this.ReferenceType = referenceType
	this.ReferenceLocator = referenceLocator
	return &this
}

// NewAccountLineItemWithDefaults instantiates a new AccountLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountLineItemWithDefaults() *AccountLineItem {
	this := AccountLineItem{}
	return &this
}

// GetAmount returns the Amount field value
func (o *AccountLineItem) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AccountLineItem) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AccountLineItem) SetAmount(v float32) {
	o.Amount = v
}

// GetAccountingType returns the AccountingType field value
func (o *AccountLineItem) GetAccountingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountingType
}

// GetAccountingTypeOk returns a tuple with the AccountingType field value
// and a boolean to check if the value has been set.
func (o *AccountLineItem) GetAccountingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingType, true
}

// SetAccountingType sets field value
func (o *AccountLineItem) SetAccountingType(v string) {
	o.AccountingType = v
}

// GetReferenceType returns the ReferenceType field value
func (o *AccountLineItem) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *AccountLineItem) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *AccountLineItem) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *AccountLineItem) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *AccountLineItem) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *AccountLineItem) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

func (o AccountLineItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountLineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["accountingType"] = o.AccountingType
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["referenceLocator"] = o.ReferenceLocator
	return toSerialize, nil
}

func (o *AccountLineItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"accountingType",
		"referenceType",
		"referenceLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountLineItem := _AccountLineItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountLineItem)

	if err != nil {
		return err
	}

	*o = AccountLineItem(varAccountLineItem)

	return err
}

type NullableAccountLineItem struct {
	value *AccountLineItem
	isSet bool
}

func (v NullableAccountLineItem) Get() *AccountLineItem {
	return v.value
}

func (v *NullableAccountLineItem) Set(val *AccountLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountLineItem(val *AccountLineItem) *NullableAccountLineItem {
	return &NullableAccountLineItem{value: val, isSet: true}
}

func (v NullableAccountLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
