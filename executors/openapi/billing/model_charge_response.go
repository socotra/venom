/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChargeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeResponse{}

// ChargeResponse struct for ChargeResponse
type ChargeResponse struct {
	Locator              string  `json:"locator"`
	Amount               float32 `json:"amount"`
	Currency             string  `json:"currency"`
	ChargeCategory       string  `json:"chargeCategory"`
	ChargeType           string  `json:"chargeType"`
	ChargeInvoicing      string  `json:"chargeInvoicing"`
	AccountLocator       string  `json:"accountLocator"`
	Tag                  *string `json:"tag,omitempty"`
	PolicyLocator        *string `json:"policyLocator,omitempty"`
	TransactionLocator   *string `json:"transactionLocator,omitempty"`
	ElementLocator       *string `json:"elementLocator,omitempty"`
	ElementStaticLocator *string `json:"elementStaticLocator,omitempty"`
	ReversalOfLocator    *string `json:"reversalOfLocator,omitempty"`
}

type _ChargeResponse ChargeResponse

// NewChargeResponse instantiates a new ChargeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeResponse(locator string, amount float32, currency string, chargeCategory string, chargeType string, chargeInvoicing string, accountLocator string) *ChargeResponse {
	this := ChargeResponse{}
	this.Locator = locator
	this.Amount = amount
	this.Currency = currency
	this.ChargeCategory = chargeCategory
	this.ChargeType = chargeType
	this.ChargeInvoicing = chargeInvoicing
	this.AccountLocator = accountLocator
	return &this
}

// NewChargeResponseWithDefaults instantiates a new ChargeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeResponseWithDefaults() *ChargeResponse {
	this := ChargeResponse{}
	return &this
}

// GetLocator returns the Locator field value
func (o *ChargeResponse) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *ChargeResponse) SetLocator(v string) {
	o.Locator = v
}

// GetAmount returns the Amount field value
func (o *ChargeResponse) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ChargeResponse) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *ChargeResponse) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ChargeResponse) SetCurrency(v string) {
	o.Currency = v
}

// GetChargeCategory returns the ChargeCategory field value
func (o *ChargeResponse) GetChargeCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeCategory
}

// GetChargeCategoryOk returns a tuple with the ChargeCategory field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetChargeCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeCategory, true
}

// SetChargeCategory sets field value
func (o *ChargeResponse) SetChargeCategory(v string) {
	o.ChargeCategory = v
}

// GetChargeType returns the ChargeType field value
func (o *ChargeResponse) GetChargeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetChargeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeType, true
}

// SetChargeType sets field value
func (o *ChargeResponse) SetChargeType(v string) {
	o.ChargeType = v
}

// GetChargeInvoicing returns the ChargeInvoicing field value
func (o *ChargeResponse) GetChargeInvoicing() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeInvoicing
}

// GetChargeInvoicingOk returns a tuple with the ChargeInvoicing field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetChargeInvoicingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeInvoicing, true
}

// SetChargeInvoicing sets field value
func (o *ChargeResponse) SetChargeInvoicing(v string) {
	o.ChargeInvoicing = v
}

// GetAccountLocator returns the AccountLocator field value
func (o *ChargeResponse) GetAccountLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountLocator
}

// GetAccountLocatorOk returns a tuple with the AccountLocator field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetAccountLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLocator, true
}

// SetAccountLocator sets field value
func (o *ChargeResponse) SetAccountLocator(v string) {
	o.AccountLocator = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ChargeResponse) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ChargeResponse) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *ChargeResponse) SetTag(v string) {
	o.Tag = &v
}

// GetPolicyLocator returns the PolicyLocator field value if set, zero value otherwise.
func (o *ChargeResponse) GetPolicyLocator() string {
	if o == nil || IsNil(o.PolicyLocator) {
		var ret string
		return ret
	}
	return *o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetPolicyLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyLocator) {
		return nil, false
	}
	return o.PolicyLocator, true
}

// HasPolicyLocator returns a boolean if a field has been set.
func (o *ChargeResponse) HasPolicyLocator() bool {
	if o != nil && !IsNil(o.PolicyLocator) {
		return true
	}

	return false
}

// SetPolicyLocator gets a reference to the given string and assigns it to the PolicyLocator field.
func (o *ChargeResponse) SetPolicyLocator(v string) {
	o.PolicyLocator = &v
}

// GetTransactionLocator returns the TransactionLocator field value if set, zero value otherwise.
func (o *ChargeResponse) GetTransactionLocator() string {
	if o == nil || IsNil(o.TransactionLocator) {
		var ret string
		return ret
	}
	return *o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionLocator) {
		return nil, false
	}
	return o.TransactionLocator, true
}

// HasTransactionLocator returns a boolean if a field has been set.
func (o *ChargeResponse) HasTransactionLocator() bool {
	if o != nil && !IsNil(o.TransactionLocator) {
		return true
	}

	return false
}

// SetTransactionLocator gets a reference to the given string and assigns it to the TransactionLocator field.
func (o *ChargeResponse) SetTransactionLocator(v string) {
	o.TransactionLocator = &v
}

// GetElementLocator returns the ElementLocator field value if set, zero value otherwise.
func (o *ChargeResponse) GetElementLocator() string {
	if o == nil || IsNil(o.ElementLocator) {
		var ret string
		return ret
	}
	return *o.ElementLocator
}

// GetElementLocatorOk returns a tuple with the ElementLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetElementLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ElementLocator) {
		return nil, false
	}
	return o.ElementLocator, true
}

// HasElementLocator returns a boolean if a field has been set.
func (o *ChargeResponse) HasElementLocator() bool {
	if o != nil && !IsNil(o.ElementLocator) {
		return true
	}

	return false
}

// SetElementLocator gets a reference to the given string and assigns it to the ElementLocator field.
func (o *ChargeResponse) SetElementLocator(v string) {
	o.ElementLocator = &v
}

// GetElementStaticLocator returns the ElementStaticLocator field value if set, zero value otherwise.
func (o *ChargeResponse) GetElementStaticLocator() string {
	if o == nil || IsNil(o.ElementStaticLocator) {
		var ret string
		return ret
	}
	return *o.ElementStaticLocator
}

// GetElementStaticLocatorOk returns a tuple with the ElementStaticLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetElementStaticLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ElementStaticLocator) {
		return nil, false
	}
	return o.ElementStaticLocator, true
}

// HasElementStaticLocator returns a boolean if a field has been set.
func (o *ChargeResponse) HasElementStaticLocator() bool {
	if o != nil && !IsNil(o.ElementStaticLocator) {
		return true
	}

	return false
}

// SetElementStaticLocator gets a reference to the given string and assigns it to the ElementStaticLocator field.
func (o *ChargeResponse) SetElementStaticLocator(v string) {
	o.ElementStaticLocator = &v
}

// GetReversalOfLocator returns the ReversalOfLocator field value if set, zero value otherwise.
func (o *ChargeResponse) GetReversalOfLocator() string {
	if o == nil || IsNil(o.ReversalOfLocator) {
		var ret string
		return ret
	}
	return *o.ReversalOfLocator
}

// GetReversalOfLocatorOk returns a tuple with the ReversalOfLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetReversalOfLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ReversalOfLocator) {
		return nil, false
	}
	return o.ReversalOfLocator, true
}

// HasReversalOfLocator returns a boolean if a field has been set.
func (o *ChargeResponse) HasReversalOfLocator() bool {
	if o != nil && !IsNil(o.ReversalOfLocator) {
		return true
	}

	return false
}

// SetReversalOfLocator gets a reference to the given string and assigns it to the ReversalOfLocator field.
func (o *ChargeResponse) SetReversalOfLocator(v string) {
	o.ReversalOfLocator = &v
}

func (o ChargeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["chargeCategory"] = o.ChargeCategory
	toSerialize["chargeType"] = o.ChargeType
	toSerialize["chargeInvoicing"] = o.ChargeInvoicing
	toSerialize["accountLocator"] = o.AccountLocator
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.PolicyLocator) {
		toSerialize["policyLocator"] = o.PolicyLocator
	}
	if !IsNil(o.TransactionLocator) {
		toSerialize["transactionLocator"] = o.TransactionLocator
	}
	if !IsNil(o.ElementLocator) {
		toSerialize["elementLocator"] = o.ElementLocator
	}
	if !IsNil(o.ElementStaticLocator) {
		toSerialize["elementStaticLocator"] = o.ElementStaticLocator
	}
	if !IsNil(o.ReversalOfLocator) {
		toSerialize["reversalOfLocator"] = o.ReversalOfLocator
	}
	return toSerialize, nil
}

func (o *ChargeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"amount",
		"currency",
		"chargeCategory",
		"chargeType",
		"chargeInvoicing",
		"accountLocator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeResponse := _ChargeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeResponse)

	if err != nil {
		return err
	}

	*o = ChargeResponse(varChargeResponse)

	return err
}

type NullableChargeResponse struct {
	value *ChargeResponse
	isSet bool
}

func (v NullableChargeResponse) Get() *ChargeResponse {
	return v.value
}

func (v *NullableChargeResponse) Set(val *ChargeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeResponse(val *ChargeResponse) *NullableChargeResponse {
	return &NullableChargeResponse{value: val, isSet: true}
}

func (v NullableChargeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
