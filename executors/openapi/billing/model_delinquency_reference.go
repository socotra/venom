/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DelinquencyReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelinquencyReference{}

// DelinquencyReference struct for DelinquencyReference
type DelinquencyReference struct {
	Locator                           string  `json:"locator"`
	DelinquencyLocator                string  `json:"delinquencyLocator"`
	ReferenceLocator                  string  `json:"referenceLocator"`
	ReferenceType                     string  `json:"referenceType"`
	TransactionLocator                *string `json:"transactionLocator,omitempty"`
	PreemptingLapseTransactionLocator *string `json:"preemptingLapseTransactionLocator,omitempty"`
}

type _DelinquencyReference DelinquencyReference

// NewDelinquencyReference instantiates a new DelinquencyReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelinquencyReference(locator string, delinquencyLocator string, referenceLocator string, referenceType string) *DelinquencyReference {
	this := DelinquencyReference{}
	this.Locator = locator
	this.DelinquencyLocator = delinquencyLocator
	this.ReferenceLocator = referenceLocator
	this.ReferenceType = referenceType
	return &this
}

// NewDelinquencyReferenceWithDefaults instantiates a new DelinquencyReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelinquencyReferenceWithDefaults() *DelinquencyReference {
	this := DelinquencyReference{}
	return &this
}

// GetLocator returns the Locator field value
func (o *DelinquencyReference) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *DelinquencyReference) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *DelinquencyReference) SetLocator(v string) {
	o.Locator = v
}

// GetDelinquencyLocator returns the DelinquencyLocator field value
func (o *DelinquencyReference) GetDelinquencyLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DelinquencyLocator
}

// GetDelinquencyLocatorOk returns a tuple with the DelinquencyLocator field value
// and a boolean to check if the value has been set.
func (o *DelinquencyReference) GetDelinquencyLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelinquencyLocator, true
}

// SetDelinquencyLocator sets field value
func (o *DelinquencyReference) SetDelinquencyLocator(v string) {
	o.DelinquencyLocator = v
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *DelinquencyReference) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *DelinquencyReference) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *DelinquencyReference) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

// GetReferenceType returns the ReferenceType field value
func (o *DelinquencyReference) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *DelinquencyReference) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *DelinquencyReference) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetTransactionLocator returns the TransactionLocator field value if set, zero value otherwise.
func (o *DelinquencyReference) GetTransactionLocator() string {
	if o == nil || IsNil(o.TransactionLocator) {
		var ret string
		return ret
	}
	return *o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyReference) GetTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionLocator) {
		return nil, false
	}
	return o.TransactionLocator, true
}

// HasTransactionLocator returns a boolean if a field has been set.
func (o *DelinquencyReference) HasTransactionLocator() bool {
	if o != nil && !IsNil(o.TransactionLocator) {
		return true
	}

	return false
}

// SetTransactionLocator gets a reference to the given string and assigns it to the TransactionLocator field.
func (o *DelinquencyReference) SetTransactionLocator(v string) {
	o.TransactionLocator = &v
}

// GetPreemptingLapseTransactionLocator returns the PreemptingLapseTransactionLocator field value if set, zero value otherwise.
func (o *DelinquencyReference) GetPreemptingLapseTransactionLocator() string {
	if o == nil || IsNil(o.PreemptingLapseTransactionLocator) {
		var ret string
		return ret
	}
	return *o.PreemptingLapseTransactionLocator
}

// GetPreemptingLapseTransactionLocatorOk returns a tuple with the PreemptingLapseTransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyReference) GetPreemptingLapseTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PreemptingLapseTransactionLocator) {
		return nil, false
	}
	return o.PreemptingLapseTransactionLocator, true
}

// HasPreemptingLapseTransactionLocator returns a boolean if a field has been set.
func (o *DelinquencyReference) HasPreemptingLapseTransactionLocator() bool {
	if o != nil && !IsNil(o.PreemptingLapseTransactionLocator) {
		return true
	}

	return false
}

// SetPreemptingLapseTransactionLocator gets a reference to the given string and assigns it to the PreemptingLapseTransactionLocator field.
func (o *DelinquencyReference) SetPreemptingLapseTransactionLocator(v string) {
	o.PreemptingLapseTransactionLocator = &v
}

func (o DelinquencyReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelinquencyReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["delinquencyLocator"] = o.DelinquencyLocator
	toSerialize["referenceLocator"] = o.ReferenceLocator
	toSerialize["referenceType"] = o.ReferenceType
	if !IsNil(o.TransactionLocator) {
		toSerialize["transactionLocator"] = o.TransactionLocator
	}
	if !IsNil(o.PreemptingLapseTransactionLocator) {
		toSerialize["preemptingLapseTransactionLocator"] = o.PreemptingLapseTransactionLocator
	}
	return toSerialize, nil
}

func (o *DelinquencyReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"delinquencyLocator",
		"referenceLocator",
		"referenceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelinquencyReference := _DelinquencyReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelinquencyReference)

	if err != nil {
		return err
	}

	*o = DelinquencyReference(varDelinquencyReference)

	return err
}

type NullableDelinquencyReference struct {
	value *DelinquencyReference
	isSet bool
}

func (v NullableDelinquencyReference) Get() *DelinquencyReference {
	return v.value
}

func (v *NullableDelinquencyReference) Set(val *DelinquencyReference) {
	v.value = val
	v.isSet = true
}

func (v NullableDelinquencyReference) IsSet() bool {
	return v.isSet
}

func (v *NullableDelinquencyReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelinquencyReference(val *DelinquencyReference) *NullableDelinquencyReference {
	return &NullableDelinquencyReference{value: val, isSet: true}
}

func (v NullableDelinquencyReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelinquencyReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
