/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package document

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

// DocumentsControllerAPIService DocumentsControllerAPI service
type DocumentsControllerAPIService service

type ApiAttachDocumentRequest struct {
	ctx                context.Context
	ApiService         *DocumentsControllerAPIService
	referenceLocator   *string
	referenceType      *string
	name               *string
	documentFormat     *string
	document           *os.File
	staticName         *string
	metadata           *string
	transactionLocator *string
	segmentLocator     *string
	category           *string
}

func (r ApiAttachDocumentRequest) ReferenceLocator(referenceLocator string) ApiAttachDocumentRequest {
	r.referenceLocator = &referenceLocator
	return r
}

func (r ApiAttachDocumentRequest) ReferenceType(referenceType string) ApiAttachDocumentRequest {
	r.referenceType = &referenceType
	return r
}

func (r ApiAttachDocumentRequest) Name(name string) ApiAttachDocumentRequest {
	r.name = &name
	return r
}

func (r ApiAttachDocumentRequest) DocumentFormat(documentFormat string) ApiAttachDocumentRequest {
	r.documentFormat = &documentFormat
	return r
}

func (r ApiAttachDocumentRequest) Document(document *os.File) ApiAttachDocumentRequest {
	r.document = document
	return r
}

func (r ApiAttachDocumentRequest) StaticName(staticName string) ApiAttachDocumentRequest {
	r.staticName = &staticName
	return r
}

func (r ApiAttachDocumentRequest) Metadata(metadata string) ApiAttachDocumentRequest {
	r.metadata = &metadata
	return r
}

func (r ApiAttachDocumentRequest) TransactionLocator(transactionLocator string) ApiAttachDocumentRequest {
	r.transactionLocator = &transactionLocator
	return r
}

func (r ApiAttachDocumentRequest) SegmentLocator(segmentLocator string) ApiAttachDocumentRequest {
	r.segmentLocator = &segmentLocator
	return r
}

func (r ApiAttachDocumentRequest) Category(category string) ApiAttachDocumentRequest {
	r.category = &category
	return r
}

func (r ApiAttachDocumentRequest) Execute() (*DocumentInstance, *http.Response, error) {
	return r.ApiService.AttachDocumentExecute(r)
}

/*
AttachDocument Method for AttachDocument

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAttachDocumentRequest
*/
func (a *DocumentsControllerAPIService) AttachDocument(ctx context.Context) ApiAttachDocumentRequest {
	return ApiAttachDocumentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DocumentInstance
func (a *DocumentsControllerAPIService) AttachDocumentExecute(r ApiAttachDocumentRequest) (*DocumentInstance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DocumentInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.AttachDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/attach"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.referenceLocator == nil {
		return localVarReturnValue, nil, reportError("referenceLocator is required and must be specified")
	}
	if r.referenceType == nil {
		return localVarReturnValue, nil, reportError("referenceType is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.documentFormat == nil {
		return localVarReturnValue, nil, reportError("documentFormat is required and must be specified")
	}
	if r.document == nil {
		return localVarReturnValue, nil, reportError("document is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "referenceLocator", r.referenceLocator, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "referenceType", r.referenceType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	if r.staticName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "staticName", r.staticName, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "documentFormat", r.documentFormat, "form", "")
	if r.metadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadata", r.metadata, "form", "")
	}
	if r.transactionLocator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionLocator", r.transactionLocator, "form", "")
	}
	if r.segmentLocator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLocator", r.segmentLocator, "form", "")
	}
	if r.category != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category", r.category, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var documentLocalVarFormFileName string
	var documentLocalVarFileName string
	var documentLocalVarFileBytes []byte

	documentLocalVarFormFileName = "document"
	documentLocalVarFile := r.document

	if documentLocalVarFile != nil {
		fbs, _ := io.ReadAll(documentLocalVarFile)

		documentLocalVarFileBytes = fbs
		documentLocalVarFileName = documentLocalVarFile.Name()
		documentLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: documentLocalVarFileBytes, fileName: documentLocalVarFileName, formFileName: documentLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteInstanceRequest struct {
	ctx        context.Context
	ApiService *DocumentsControllerAPIService
	locator    string
}

func (r ApiDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteInstanceExecute(r)
}

/*
DeleteInstance Method for DeleteInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiDeleteInstanceRequest
*/
func (a *DocumentsControllerAPIService) DeleteInstance(ctx context.Context, locator string) ApiDeleteInstanceRequest {
	return ApiDeleteInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
func (a *DocumentsControllerAPIService) DeleteInstanceExecute(r ApiDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.DeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFetchDocumentRequest struct {
	ctx        context.Context
	ApiService *DocumentsControllerAPIService
	locator    string
}

func (r ApiFetchDocumentRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.FetchDocumentExecute(r)
}

/*
FetchDocument Method for FetchDocument

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiFetchDocumentRequest
*/
func (a *DocumentsControllerAPIService) FetchDocument(ctx context.Context, locator string) ApiFetchDocumentRequest {
	return ApiFetchDocumentRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *DocumentsControllerAPIService) FetchDocumentExecute(r ApiFetchDocumentRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.FetchDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/{locator}/document"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchInstanceRequest struct {
	ctx        context.Context
	ApiService *DocumentsControllerAPIService
	locator    string
}

func (r ApiFetchInstanceRequest) Execute() (*DocumentInstance, *http.Response, error) {
	return r.ApiService.FetchInstanceExecute(r)
}

/*
FetchInstance Method for FetchInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiFetchInstanceRequest
*/
func (a *DocumentsControllerAPIService) FetchInstance(ctx context.Context, locator string) ApiFetchInstanceRequest {
	return ApiFetchInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return DocumentInstance
func (a *DocumentsControllerAPIService) FetchInstanceExecute(r ApiFetchInstanceRequest) (*DocumentInstance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DocumentInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.FetchInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSourceRequest struct {
	ctx        context.Context
	ApiService *DocumentsControllerAPIService
	locator    string
}

func (r ApiFetchSourceRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.FetchSourceExecute(r)
}

/*
FetchSource Method for FetchSource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiFetchSourceRequest
*/
func (a *DocumentsControllerAPIService) FetchSource(ctx context.Context, locator string) ApiFetchSourceRequest {
	return ApiFetchSourceRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *DocumentsControllerAPIService) FetchSourceExecute(r ApiFetchSourceRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.FetchSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/{locator}/source"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRenderDocumentRequest struct {
	ctx              context.Context
	ApiService       *DocumentsControllerAPIService
	referenceType    *string
	referenceLocator *string
	productName      *string
	templateFormat   *string
	documentConfig   *string
	staticName       *string
	templateName     *string
	template         *os.File
}

func (r ApiRenderDocumentRequest) ReferenceType(referenceType string) ApiRenderDocumentRequest {
	r.referenceType = &referenceType
	return r
}

func (r ApiRenderDocumentRequest) ReferenceLocator(referenceLocator string) ApiRenderDocumentRequest {
	r.referenceLocator = &referenceLocator
	return r
}

func (r ApiRenderDocumentRequest) ProductName(productName string) ApiRenderDocumentRequest {
	r.productName = &productName
	return r
}

func (r ApiRenderDocumentRequest) TemplateFormat(templateFormat string) ApiRenderDocumentRequest {
	r.templateFormat = &templateFormat
	return r
}

func (r ApiRenderDocumentRequest) DocumentConfig(documentConfig string) ApiRenderDocumentRequest {
	r.documentConfig = &documentConfig
	return r
}

func (r ApiRenderDocumentRequest) StaticName(staticName string) ApiRenderDocumentRequest {
	r.staticName = &staticName
	return r
}

func (r ApiRenderDocumentRequest) TemplateName(templateName string) ApiRenderDocumentRequest {
	r.templateName = &templateName
	return r
}

func (r ApiRenderDocumentRequest) Template(template *os.File) ApiRenderDocumentRequest {
	r.template = template
	return r
}

func (r ApiRenderDocumentRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.RenderDocumentExecute(r)
}

/*
RenderDocument Method for RenderDocument

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRenderDocumentRequest
*/
func (a *DocumentsControllerAPIService) RenderDocument(ctx context.Context) ApiRenderDocumentRequest {
	return ApiRenderDocumentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *DocumentsControllerAPIService) RenderDocumentExecute(r ApiRenderDocumentRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.RenderDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/render"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.referenceType == nil {
		return localVarReturnValue, nil, reportError("referenceType is required and must be specified")
	}
	if r.referenceLocator == nil {
		return localVarReturnValue, nil, reportError("referenceLocator is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "referenceType", r.referenceType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "referenceLocator", r.referenceLocator, "form", "")
	if r.productName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productName", r.productName, "form", "")
	}
	if r.templateFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templateFormat", r.templateFormat, "form", "")
	}
	if r.documentConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "documentConfig", r.documentConfig, "form", "")
	}
	if r.staticName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "staticName", r.staticName, "form", "")
	}
	if r.templateName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templateName", r.templateName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var templateLocalVarFormFileName string
	var templateLocalVarFileName string
	var templateLocalVarFileBytes []byte

	templateLocalVarFormFileName = "template"
	templateLocalVarFile := r.template

	if templateLocalVarFile != nil {
		fbs, _ := io.ReadAll(templateLocalVarFile)

		templateLocalVarFileBytes = fbs
		templateLocalVarFileName = templateLocalVarFile.Name()
		templateLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: templateLocalVarFileBytes, fileName: templateLocalVarFileName, formFileName: templateLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceDocumentRequest struct {
	ctx        context.Context
	ApiService *DocumentsControllerAPIService
	locator    string
	metadata   *string
	category   *string
	document   *os.File
}

func (r ApiReplaceDocumentRequest) Metadata(metadata string) ApiReplaceDocumentRequest {
	r.metadata = &metadata
	return r
}

func (r ApiReplaceDocumentRequest) Category(category string) ApiReplaceDocumentRequest {
	r.category = &category
	return r
}

func (r ApiReplaceDocumentRequest) Document(document *os.File) ApiReplaceDocumentRequest {
	r.document = document
	return r
}

func (r ApiReplaceDocumentRequest) Execute() (*DocumentInstance, *http.Response, error) {
	return r.ApiService.ReplaceDocumentExecute(r)
}

/*
ReplaceDocument Method for ReplaceDocument

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param locator
	@return ApiReplaceDocumentRequest
*/
func (a *DocumentsControllerAPIService) ReplaceDocument(ctx context.Context, locator string) ApiReplaceDocumentRequest {
	return ApiReplaceDocumentRequest{
		ApiService: a,
		ctx:        ctx,
		locator:    locator,
	}
}

// Execute executes the request
//
//	@return DocumentInstance
func (a *DocumentsControllerAPIService) ReplaceDocumentExecute(r ApiReplaceDocumentRequest) (*DocumentInstance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DocumentInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsControllerAPIService.ReplaceDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/{locator}"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadata", r.metadata, "form", "")
	}
	if r.category != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category", r.category, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var documentLocalVarFormFileName string
	var documentLocalVarFileName string
	var documentLocalVarFileBytes []byte

	documentLocalVarFormFileName = "document"
	documentLocalVarFile := r.document

	if documentLocalVarFile != nil {
		fbs, _ := io.ReadAll(documentLocalVarFile)

		documentLocalVarFileBytes = fbs
		documentLocalVarFileName = documentLocalVarFile.Name()
		documentLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: documentLocalVarFileBytes, fileName: documentLocalVarFileName, formFileName: documentLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
