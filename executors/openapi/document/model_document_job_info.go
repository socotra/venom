/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package document

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DocumentJobInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentJobInfo{}

// DocumentJobInfo struct for DocumentJobInfo
type DocumentJobInfo struct {
	Locator               string `json:"locator"`
	StaticName            string `json:"staticName"`
	Name                  string `json:"name"`
	DocumentInstanceState string `json:"documentInstanceState"`
	ProcessingErrors      string `json:"processingErrors"`
	// Deprecated
	State string `json:"state"`
}

type _DocumentJobInfo DocumentJobInfo

// NewDocumentJobInfo instantiates a new DocumentJobInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentJobInfo(locator string, staticName string, name string, documentInstanceState string, processingErrors string, state string) *DocumentJobInfo {
	this := DocumentJobInfo{}
	this.Locator = locator
	this.StaticName = staticName
	this.Name = name
	this.DocumentInstanceState = documentInstanceState
	this.ProcessingErrors = processingErrors
	this.State = state
	return &this
}

// NewDocumentJobInfoWithDefaults instantiates a new DocumentJobInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentJobInfoWithDefaults() *DocumentJobInfo {
	this := DocumentJobInfo{}
	return &this
}

// GetLocator returns the Locator field value
func (o *DocumentJobInfo) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *DocumentJobInfo) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *DocumentJobInfo) SetLocator(v string) {
	o.Locator = v
}

// GetStaticName returns the StaticName field value
func (o *DocumentJobInfo) GetStaticName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticName
}

// GetStaticNameOk returns a tuple with the StaticName field value
// and a boolean to check if the value has been set.
func (o *DocumentJobInfo) GetStaticNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticName, true
}

// SetStaticName sets field value
func (o *DocumentJobInfo) SetStaticName(v string) {
	o.StaticName = v
}

// GetName returns the Name field value
func (o *DocumentJobInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentJobInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentJobInfo) SetName(v string) {
	o.Name = v
}

// GetDocumentInstanceState returns the DocumentInstanceState field value
func (o *DocumentJobInfo) GetDocumentInstanceState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentInstanceState
}

// GetDocumentInstanceStateOk returns a tuple with the DocumentInstanceState field value
// and a boolean to check if the value has been set.
func (o *DocumentJobInfo) GetDocumentInstanceStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentInstanceState, true
}

// SetDocumentInstanceState sets field value
func (o *DocumentJobInfo) SetDocumentInstanceState(v string) {
	o.DocumentInstanceState = v
}

// GetProcessingErrors returns the ProcessingErrors field value
func (o *DocumentJobInfo) GetProcessingErrors() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessingErrors
}

// GetProcessingErrorsOk returns a tuple with the ProcessingErrors field value
// and a boolean to check if the value has been set.
func (o *DocumentJobInfo) GetProcessingErrorsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessingErrors, true
}

// SetProcessingErrors sets field value
func (o *DocumentJobInfo) SetProcessingErrors(v string) {
	o.ProcessingErrors = v
}

// GetState returns the State field value
// Deprecated
func (o *DocumentJobInfo) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *DocumentJobInfo) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
// Deprecated
func (o *DocumentJobInfo) SetState(v string) {
	o.State = v
}

func (o DocumentJobInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentJobInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["staticName"] = o.StaticName
	toSerialize["name"] = o.Name
	toSerialize["documentInstanceState"] = o.DocumentInstanceState
	toSerialize["processingErrors"] = o.ProcessingErrors
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *DocumentJobInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"staticName",
		"name",
		"documentInstanceState",
		"processingErrors",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentJobInfo := _DocumentJobInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentJobInfo)

	if err != nil {
		return err
	}

	*o = DocumentJobInfo(varDocumentJobInfo)

	return err
}

type NullableDocumentJobInfo struct {
	value *DocumentJobInfo
	isSet bool
}

func (v NullableDocumentJobInfo) Get() *DocumentJobInfo {
	return v.value
}

func (v *NullableDocumentJobInfo) Set(val *DocumentJobInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentJobInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentJobInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentJobInfo(val *DocumentJobInfo) *NullableDocumentJobInfo {
	return &NullableDocumentJobInfo{value: val, isSet: true}
}

func (v NullableDocumentJobInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentJobInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
