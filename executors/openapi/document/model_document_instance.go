/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package document

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DocumentInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentInstance{}

// DocumentInstance struct for DocumentInstance
type DocumentInstance struct {
	Locator                  string                            `json:"locator"`
	ReferenceLocator         string                            `json:"referenceLocator"`
	ReferenceType            string                            `json:"referenceType"`
	ReferenceDocumentLocator *string                           `json:"referenceDocumentLocator,omitempty"`
	TransactionLocator       *string                           `json:"transactionLocator,omitempty"`
	SegmentLocator           *string                           `json:"segmentLocator,omitempty"`
	TermLocator              *string                           `json:"termLocator,omitempty"`
	PolicyLocator            *string                           `json:"policyLocator,omitempty"`
	Name                     *string                           `json:"name,omitempty"`
	StaticName               *string                           `json:"staticName,omitempty"`
	DocumentInstanceState    string                            `json:"documentInstanceState"`
	DocumentFormat           *string                           `json:"documentFormat,omitempty"`
	Metadata                 map[string]map[string]interface{} `json:"metadata"`
	CreatedAt                time.Time                         `json:"createdAt"`
	CreatedBy                *string                           `json:"createdBy,omitempty"`
	ReadyAt                  *time.Time                        `json:"readyAt,omitempty"`
	RenderingData            map[string]map[string]interface{} `json:"renderingData"`
	ProcessingErrors         *string                           `json:"processingErrors,omitempty"`
	External                 bool                              `json:"external"`
	Category                 *string                           `json:"category,omitempty"`
	ConsolidatedFrom         []string                          `json:"consolidatedFrom"`
	ConsolidatedTo           []string                          `json:"consolidatedTo"`
}

type _DocumentInstance DocumentInstance

// NewDocumentInstance instantiates a new DocumentInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentInstance(locator string, referenceLocator string, referenceType string, documentInstanceState string, metadata map[string]map[string]interface{}, createdAt time.Time, renderingData map[string]map[string]interface{}, external bool, consolidatedFrom []string, consolidatedTo []string) *DocumentInstance {
	this := DocumentInstance{}
	this.Locator = locator
	this.ReferenceLocator = referenceLocator
	this.ReferenceType = referenceType
	this.DocumentInstanceState = documentInstanceState
	this.Metadata = metadata
	this.CreatedAt = createdAt
	this.RenderingData = renderingData
	this.External = external
	this.ConsolidatedFrom = consolidatedFrom
	this.ConsolidatedTo = consolidatedTo
	return &this
}

// NewDocumentInstanceWithDefaults instantiates a new DocumentInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentInstanceWithDefaults() *DocumentInstance {
	this := DocumentInstance{}
	return &this
}

// GetLocator returns the Locator field value
func (o *DocumentInstance) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *DocumentInstance) SetLocator(v string) {
	o.Locator = v
}

// GetReferenceLocator returns the ReferenceLocator field value
func (o *DocumentInstance) GetReferenceLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceLocator
}

// GetReferenceLocatorOk returns a tuple with the ReferenceLocator field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetReferenceLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceLocator, true
}

// SetReferenceLocator sets field value
func (o *DocumentInstance) SetReferenceLocator(v string) {
	o.ReferenceLocator = v
}

// GetReferenceType returns the ReferenceType field value
func (o *DocumentInstance) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *DocumentInstance) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetReferenceDocumentLocator returns the ReferenceDocumentLocator field value if set, zero value otherwise.
func (o *DocumentInstance) GetReferenceDocumentLocator() string {
	if o == nil || IsNil(o.ReferenceDocumentLocator) {
		var ret string
		return ret
	}
	return *o.ReferenceDocumentLocator
}

// GetReferenceDocumentLocatorOk returns a tuple with the ReferenceDocumentLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetReferenceDocumentLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceDocumentLocator) {
		return nil, false
	}
	return o.ReferenceDocumentLocator, true
}

// HasReferenceDocumentLocator returns a boolean if a field has been set.
func (o *DocumentInstance) HasReferenceDocumentLocator() bool {
	if o != nil && !IsNil(o.ReferenceDocumentLocator) {
		return true
	}

	return false
}

// SetReferenceDocumentLocator gets a reference to the given string and assigns it to the ReferenceDocumentLocator field.
func (o *DocumentInstance) SetReferenceDocumentLocator(v string) {
	o.ReferenceDocumentLocator = &v
}

// GetTransactionLocator returns the TransactionLocator field value if set, zero value otherwise.
func (o *DocumentInstance) GetTransactionLocator() string {
	if o == nil || IsNil(o.TransactionLocator) {
		var ret string
		return ret
	}
	return *o.TransactionLocator
}

// GetTransactionLocatorOk returns a tuple with the TransactionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetTransactionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionLocator) {
		return nil, false
	}
	return o.TransactionLocator, true
}

// HasTransactionLocator returns a boolean if a field has been set.
func (o *DocumentInstance) HasTransactionLocator() bool {
	if o != nil && !IsNil(o.TransactionLocator) {
		return true
	}

	return false
}

// SetTransactionLocator gets a reference to the given string and assigns it to the TransactionLocator field.
func (o *DocumentInstance) SetTransactionLocator(v string) {
	o.TransactionLocator = &v
}

// GetSegmentLocator returns the SegmentLocator field value if set, zero value otherwise.
func (o *DocumentInstance) GetSegmentLocator() string {
	if o == nil || IsNil(o.SegmentLocator) {
		var ret string
		return ret
	}
	return *o.SegmentLocator
}

// GetSegmentLocatorOk returns a tuple with the SegmentLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetSegmentLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentLocator) {
		return nil, false
	}
	return o.SegmentLocator, true
}

// HasSegmentLocator returns a boolean if a field has been set.
func (o *DocumentInstance) HasSegmentLocator() bool {
	if o != nil && !IsNil(o.SegmentLocator) {
		return true
	}

	return false
}

// SetSegmentLocator gets a reference to the given string and assigns it to the SegmentLocator field.
func (o *DocumentInstance) SetSegmentLocator(v string) {
	o.SegmentLocator = &v
}

// GetTermLocator returns the TermLocator field value if set, zero value otherwise.
func (o *DocumentInstance) GetTermLocator() string {
	if o == nil || IsNil(o.TermLocator) {
		var ret string
		return ret
	}
	return *o.TermLocator
}

// GetTermLocatorOk returns a tuple with the TermLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetTermLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.TermLocator) {
		return nil, false
	}
	return o.TermLocator, true
}

// HasTermLocator returns a boolean if a field has been set.
func (o *DocumentInstance) HasTermLocator() bool {
	if o != nil && !IsNil(o.TermLocator) {
		return true
	}

	return false
}

// SetTermLocator gets a reference to the given string and assigns it to the TermLocator field.
func (o *DocumentInstance) SetTermLocator(v string) {
	o.TermLocator = &v
}

// GetPolicyLocator returns the PolicyLocator field value if set, zero value otherwise.
func (o *DocumentInstance) GetPolicyLocator() string {
	if o == nil || IsNil(o.PolicyLocator) {
		var ret string
		return ret
	}
	return *o.PolicyLocator
}

// GetPolicyLocatorOk returns a tuple with the PolicyLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetPolicyLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyLocator) {
		return nil, false
	}
	return o.PolicyLocator, true
}

// HasPolicyLocator returns a boolean if a field has been set.
func (o *DocumentInstance) HasPolicyLocator() bool {
	if o != nil && !IsNil(o.PolicyLocator) {
		return true
	}

	return false
}

// SetPolicyLocator gets a reference to the given string and assigns it to the PolicyLocator field.
func (o *DocumentInstance) SetPolicyLocator(v string) {
	o.PolicyLocator = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DocumentInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DocumentInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DocumentInstance) SetName(v string) {
	o.Name = &v
}

// GetStaticName returns the StaticName field value if set, zero value otherwise.
func (o *DocumentInstance) GetStaticName() string {
	if o == nil || IsNil(o.StaticName) {
		var ret string
		return ret
	}
	return *o.StaticName
}

// GetStaticNameOk returns a tuple with the StaticName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetStaticNameOk() (*string, bool) {
	if o == nil || IsNil(o.StaticName) {
		return nil, false
	}
	return o.StaticName, true
}

// HasStaticName returns a boolean if a field has been set.
func (o *DocumentInstance) HasStaticName() bool {
	if o != nil && !IsNil(o.StaticName) {
		return true
	}

	return false
}

// SetStaticName gets a reference to the given string and assigns it to the StaticName field.
func (o *DocumentInstance) SetStaticName(v string) {
	o.StaticName = &v
}

// GetDocumentInstanceState returns the DocumentInstanceState field value
func (o *DocumentInstance) GetDocumentInstanceState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentInstanceState
}

// GetDocumentInstanceStateOk returns a tuple with the DocumentInstanceState field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetDocumentInstanceStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentInstanceState, true
}

// SetDocumentInstanceState sets field value
func (o *DocumentInstance) SetDocumentInstanceState(v string) {
	o.DocumentInstanceState = v
}

// GetDocumentFormat returns the DocumentFormat field value if set, zero value otherwise.
func (o *DocumentInstance) GetDocumentFormat() string {
	if o == nil || IsNil(o.DocumentFormat) {
		var ret string
		return ret
	}
	return *o.DocumentFormat
}

// GetDocumentFormatOk returns a tuple with the DocumentFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetDocumentFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentFormat) {
		return nil, false
	}
	return o.DocumentFormat, true
}

// HasDocumentFormat returns a boolean if a field has been set.
func (o *DocumentInstance) HasDocumentFormat() bool {
	if o != nil && !IsNil(o.DocumentFormat) {
		return true
	}

	return false
}

// SetDocumentFormat gets a reference to the given string and assigns it to the DocumentFormat field.
func (o *DocumentInstance) SetDocumentFormat(v string) {
	o.DocumentFormat = &v
}

// GetMetadata returns the Metadata field value
func (o *DocumentInstance) GetMetadata() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetMetadataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *DocumentInstance) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DocumentInstance) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DocumentInstance) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DocumentInstance) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DocumentInstance) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DocumentInstance) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetReadyAt returns the ReadyAt field value if set, zero value otherwise.
func (o *DocumentInstance) GetReadyAt() time.Time {
	if o == nil || IsNil(o.ReadyAt) {
		var ret time.Time
		return ret
	}
	return *o.ReadyAt
}

// GetReadyAtOk returns a tuple with the ReadyAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetReadyAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReadyAt) {
		return nil, false
	}
	return o.ReadyAt, true
}

// HasReadyAt returns a boolean if a field has been set.
func (o *DocumentInstance) HasReadyAt() bool {
	if o != nil && !IsNil(o.ReadyAt) {
		return true
	}

	return false
}

// SetReadyAt gets a reference to the given time.Time and assigns it to the ReadyAt field.
func (o *DocumentInstance) SetReadyAt(v time.Time) {
	o.ReadyAt = &v
}

// GetRenderingData returns the RenderingData field value
func (o *DocumentInstance) GetRenderingData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RenderingData
}

// GetRenderingDataOk returns a tuple with the RenderingData field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetRenderingDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RenderingData, true
}

// SetRenderingData sets field value
func (o *DocumentInstance) SetRenderingData(v map[string]map[string]interface{}) {
	o.RenderingData = v
}

// GetProcessingErrors returns the ProcessingErrors field value if set, zero value otherwise.
func (o *DocumentInstance) GetProcessingErrors() string {
	if o == nil || IsNil(o.ProcessingErrors) {
		var ret string
		return ret
	}
	return *o.ProcessingErrors
}

// GetProcessingErrorsOk returns a tuple with the ProcessingErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetProcessingErrorsOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingErrors) {
		return nil, false
	}
	return o.ProcessingErrors, true
}

// HasProcessingErrors returns a boolean if a field has been set.
func (o *DocumentInstance) HasProcessingErrors() bool {
	if o != nil && !IsNil(o.ProcessingErrors) {
		return true
	}

	return false
}

// SetProcessingErrors gets a reference to the given string and assigns it to the ProcessingErrors field.
func (o *DocumentInstance) SetProcessingErrors(v string) {
	o.ProcessingErrors = &v
}

// GetExternal returns the External field value
func (o *DocumentInstance) GetExternal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.External
}

// GetExternalOk returns a tuple with the External field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetExternalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.External, true
}

// SetExternal sets field value
func (o *DocumentInstance) SetExternal(v bool) {
	o.External = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DocumentInstance) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DocumentInstance) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *DocumentInstance) SetCategory(v string) {
	o.Category = &v
}

// GetConsolidatedFrom returns the ConsolidatedFrom field value
func (o *DocumentInstance) GetConsolidatedFrom() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ConsolidatedFrom
}

// GetConsolidatedFromOk returns a tuple with the ConsolidatedFrom field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetConsolidatedFromOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsolidatedFrom, true
}

// SetConsolidatedFrom sets field value
func (o *DocumentInstance) SetConsolidatedFrom(v []string) {
	o.ConsolidatedFrom = v
}

// GetConsolidatedTo returns the ConsolidatedTo field value
func (o *DocumentInstance) GetConsolidatedTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ConsolidatedTo
}

// GetConsolidatedToOk returns a tuple with the ConsolidatedTo field value
// and a boolean to check if the value has been set.
func (o *DocumentInstance) GetConsolidatedToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsolidatedTo, true
}

// SetConsolidatedTo sets field value
func (o *DocumentInstance) SetConsolidatedTo(v []string) {
	o.ConsolidatedTo = v
}

func (o DocumentInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["referenceLocator"] = o.ReferenceLocator
	toSerialize["referenceType"] = o.ReferenceType
	if !IsNil(o.ReferenceDocumentLocator) {
		toSerialize["referenceDocumentLocator"] = o.ReferenceDocumentLocator
	}
	if !IsNil(o.TransactionLocator) {
		toSerialize["transactionLocator"] = o.TransactionLocator
	}
	if !IsNil(o.SegmentLocator) {
		toSerialize["segmentLocator"] = o.SegmentLocator
	}
	if !IsNil(o.TermLocator) {
		toSerialize["termLocator"] = o.TermLocator
	}
	if !IsNil(o.PolicyLocator) {
		toSerialize["policyLocator"] = o.PolicyLocator
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StaticName) {
		toSerialize["staticName"] = o.StaticName
	}
	toSerialize["documentInstanceState"] = o.DocumentInstanceState
	if !IsNil(o.DocumentFormat) {
		toSerialize["documentFormat"] = o.DocumentFormat
	}
	toSerialize["metadata"] = o.Metadata
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.ReadyAt) {
		toSerialize["readyAt"] = o.ReadyAt
	}
	toSerialize["renderingData"] = o.RenderingData
	if !IsNil(o.ProcessingErrors) {
		toSerialize["processingErrors"] = o.ProcessingErrors
	}
	toSerialize["external"] = o.External
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["consolidatedFrom"] = o.ConsolidatedFrom
	toSerialize["consolidatedTo"] = o.ConsolidatedTo
	return toSerialize, nil
}

func (o *DocumentInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"referenceLocator",
		"referenceType",
		"documentInstanceState",
		"metadata",
		"createdAt",
		"renderingData",
		"external",
		"consolidatedFrom",
		"consolidatedTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentInstance := _DocumentInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentInstance)

	if err != nil {
		return err
	}

	*o = DocumentInstance(varDocumentInstance)

	return err
}

type NullableDocumentInstance struct {
	value *DocumentInstance
	isSet bool
}

func (v NullableDocumentInstance) Get() *DocumentInstance {
	return v.value
}

func (v *NullableDocumentInstance) Set(val *DocumentInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentInstance(val *DocumentInstance) *NullableDocumentInstance {
	return &NullableDocumentInstance{value: val, isSet: true}
}

func (v NullableDocumentInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
