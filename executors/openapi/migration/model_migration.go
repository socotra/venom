/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Migration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Migration{}

// Migration struct for Migration
type Migration struct {
	Locator           string `json:"locator"`
	MigrationState    string `json:"migrationState"`
	ProcessedAccounts int32  `json:"processedAccounts"`
	TotalAccounts     int32  `json:"totalAccounts"`
	MigrationType     string `json:"migrationType"`
}

type _Migration Migration

// NewMigration instantiates a new Migration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigration(locator string, migrationState string, processedAccounts int32, totalAccounts int32, migrationType string) *Migration {
	this := Migration{}
	this.Locator = locator
	this.MigrationState = migrationState
	this.ProcessedAccounts = processedAccounts
	this.TotalAccounts = totalAccounts
	this.MigrationType = migrationType
	return &this
}

// NewMigrationWithDefaults instantiates a new Migration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationWithDefaults() *Migration {
	this := Migration{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Migration) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Migration) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Migration) SetLocator(v string) {
	o.Locator = v
}

// GetMigrationState returns the MigrationState field value
func (o *Migration) GetMigrationState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MigrationState
}

// GetMigrationStateOk returns a tuple with the MigrationState field value
// and a boolean to check if the value has been set.
func (o *Migration) GetMigrationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MigrationState, true
}

// SetMigrationState sets field value
func (o *Migration) SetMigrationState(v string) {
	o.MigrationState = v
}

// GetProcessedAccounts returns the ProcessedAccounts field value
func (o *Migration) GetProcessedAccounts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessedAccounts
}

// GetProcessedAccountsOk returns a tuple with the ProcessedAccounts field value
// and a boolean to check if the value has been set.
func (o *Migration) GetProcessedAccountsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedAccounts, true
}

// SetProcessedAccounts sets field value
func (o *Migration) SetProcessedAccounts(v int32) {
	o.ProcessedAccounts = v
}

// GetTotalAccounts returns the TotalAccounts field value
func (o *Migration) GetTotalAccounts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAccounts
}

// GetTotalAccountsOk returns a tuple with the TotalAccounts field value
// and a boolean to check if the value has been set.
func (o *Migration) GetTotalAccountsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAccounts, true
}

// SetTotalAccounts sets field value
func (o *Migration) SetTotalAccounts(v int32) {
	o.TotalAccounts = v
}

// GetMigrationType returns the MigrationType field value
func (o *Migration) GetMigrationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MigrationType
}

// GetMigrationTypeOk returns a tuple with the MigrationType field value
// and a boolean to check if the value has been set.
func (o *Migration) GetMigrationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MigrationType, true
}

// SetMigrationType sets field value
func (o *Migration) SetMigrationType(v string) {
	o.MigrationType = v
}

func (o Migration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Migration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["migrationState"] = o.MigrationState
	toSerialize["processedAccounts"] = o.ProcessedAccounts
	toSerialize["totalAccounts"] = o.TotalAccounts
	toSerialize["migrationType"] = o.MigrationType
	return toSerialize, nil
}

func (o *Migration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"migrationState",
		"processedAccounts",
		"totalAccounts",
		"migrationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMigration := _Migration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMigration)

	if err != nil {
		return err
	}

	*o = Migration(varMigration)

	return err
}

type NullableMigration struct {
	value *Migration
	isSet bool
}

func (v NullableMigration) Get() *Migration {
	return v.value
}

func (v *NullableMigration) Set(val *Migration) {
	v.value = val
	v.isSet = true
}

func (v NullableMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigration(val *Migration) *NullableMigration {
	return &NullableMigration{value: val, isSet: true}
}

func (v NullableMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
