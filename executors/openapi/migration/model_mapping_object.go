/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MappingObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappingObject{}

// MappingObject struct for MappingObject
type MappingObject struct {
	OriginalId       string                            `json:"originalId"`
	ChildrenMappings map[string]map[string]interface{} `json:"childrenMappings"`
}

type _MappingObject MappingObject

// NewMappingObject instantiates a new MappingObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappingObject(originalId string, childrenMappings map[string]map[string]interface{}) *MappingObject {
	this := MappingObject{}
	this.OriginalId = originalId
	this.ChildrenMappings = childrenMappings
	return &this
}

// NewMappingObjectWithDefaults instantiates a new MappingObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingObjectWithDefaults() *MappingObject {
	this := MappingObject{}
	return &this
}

// GetOriginalId returns the OriginalId field value
func (o *MappingObject) GetOriginalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalId
}

// GetOriginalIdOk returns a tuple with the OriginalId field value
// and a boolean to check if the value has been set.
func (o *MappingObject) GetOriginalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalId, true
}

// SetOriginalId sets field value
func (o *MappingObject) SetOriginalId(v string) {
	o.OriginalId = v
}

// GetChildrenMappings returns the ChildrenMappings field value
func (o *MappingObject) GetChildrenMappings() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.ChildrenMappings
}

// GetChildrenMappingsOk returns a tuple with the ChildrenMappings field value
// and a boolean to check if the value has been set.
func (o *MappingObject) GetChildrenMappingsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.ChildrenMappings, true
}

// SetChildrenMappings sets field value
func (o *MappingObject) SetChildrenMappings(v map[string]map[string]interface{}) {
	o.ChildrenMappings = v
}

func (o MappingObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappingObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["originalId"] = o.OriginalId
	toSerialize["childrenMappings"] = o.ChildrenMappings
	return toSerialize, nil
}

func (o *MappingObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"originalId",
		"childrenMappings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMappingObject := _MappingObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMappingObject)

	if err != nil {
		return err
	}

	*o = MappingObject(varMappingObject)

	return err
}

type NullableMappingObject struct {
	value *MappingObject
	isSet bool
}

func (v NullableMappingObject) Get() *MappingObject {
	return v.value
}

func (v *NullableMappingObject) Set(val *MappingObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingObject(val *MappingObject) *NullableMappingObject {
	return &NullableMappingObject{value: val, isSet: true}
}

func (v NullableMappingObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappingObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
