/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ErrorDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorDetails{}

// ErrorDetails struct for ErrorDetails
type ErrorDetails struct {
	OriginalId string           `json:"originalId"`
	Errors     ValidationResult `json:"errors"`
}

type _ErrorDetails ErrorDetails

// NewErrorDetails instantiates a new ErrorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorDetails(originalId string, errors ValidationResult) *ErrorDetails {
	this := ErrorDetails{}
	this.OriginalId = originalId
	this.Errors = errors
	return &this
}

// NewErrorDetailsWithDefaults instantiates a new ErrorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDetailsWithDefaults() *ErrorDetails {
	this := ErrorDetails{}
	return &this
}

// GetOriginalId returns the OriginalId field value
func (o *ErrorDetails) GetOriginalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalId
}

// GetOriginalIdOk returns a tuple with the OriginalId field value
// and a boolean to check if the value has been set.
func (o *ErrorDetails) GetOriginalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalId, true
}

// SetOriginalId sets field value
func (o *ErrorDetails) SetOriginalId(v string) {
	o.OriginalId = v
}

// GetErrors returns the Errors field value
func (o *ErrorDetails) GetErrors() ValidationResult {
	if o == nil {
		var ret ValidationResult
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ErrorDetails) GetErrorsOk() (*ValidationResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *ErrorDetails) SetErrors(v ValidationResult) {
	o.Errors = v
}

func (o ErrorDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["originalId"] = o.OriginalId
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *ErrorDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"originalId",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorDetails := _ErrorDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorDetails)

	if err != nil {
		return err
	}

	*o = ErrorDetails(varErrorDetails)

	return err
}

type NullableErrorDetails struct {
	value *ErrorDetails
	isSet bool
}

func (v NullableErrorDetails) Get() *ErrorDetails {
	return v.value
}

func (v *NullableErrorDetails) Set(val *ErrorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDetails(val *ErrorDetails) *NullableErrorDetails {
	return &NullableErrorDetails{value: val, isSet: true}
}

func (v NullableErrorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
