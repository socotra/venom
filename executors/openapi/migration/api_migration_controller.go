/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MigrationControllerAPIService MigrationControllerAPI service
type MigrationControllerAPIService service

type ApiGetAccountMigrationsRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
	accountLocator   string
}

func (r ApiGetAccountMigrationsRequest) Execute() (*AccountMigrationResponse, *http.Response, error) {
	return r.ApiService.GetAccountMigrationsExecute(r)
}

/*
GetAccountMigrations Method for GetAccountMigrations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@param accountLocator
	@return ApiGetAccountMigrationsRequest
*/
func (a *MigrationControllerAPIService) GetAccountMigrations(ctx context.Context, migrationLocator string, accountLocator string) ApiGetAccountMigrationsRequest {
	return ApiGetAccountMigrationsRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
		accountLocator:   accountLocator,
	}
}

// Execute executes the request
//
//	@return AccountMigrationResponse
func (a *MigrationControllerAPIService) GetAccountMigrationsExecute(r ApiGetAccountMigrationsRequest) (*AccountMigrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccountMigrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.GetAccountMigrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/accounts/{accountLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMigrationFailuresRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
	offset           *int32
	count            *int32
}

func (r ApiGetMigrationFailuresRequest) Offset(offset int32) ApiGetMigrationFailuresRequest {
	r.offset = &offset
	return r
}

func (r ApiGetMigrationFailuresRequest) Count(count int32) ApiGetMigrationFailuresRequest {
	r.count = &count
	return r
}

func (r ApiGetMigrationFailuresRequest) Execute() (*ListPageResponseMigrationFailuresResponse, *http.Response, error) {
	return r.ApiService.GetMigrationFailuresExecute(r)
}

/*
GetMigrationFailures Method for GetMigrationFailures

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiGetMigrationFailuresRequest
*/
func (a *MigrationControllerAPIService) GetMigrationFailures(ctx context.Context, migrationLocator string) ApiGetMigrationFailuresRequest {
	return ApiGetMigrationFailuresRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseMigrationFailuresResponse
func (a *MigrationControllerAPIService) GetMigrationFailuresExecute(r ApiGetMigrationFailuresRequest) (*ListPageResponseMigrationFailuresResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseMigrationFailuresResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.GetMigrationFailures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/failures/list"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMigrationMappingsRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
	offset           *int32
	count            *int32
}

func (r ApiGetMigrationMappingsRequest) Offset(offset int32) ApiGetMigrationMappingsRequest {
	r.offset = &offset
	return r
}

func (r ApiGetMigrationMappingsRequest) Count(count int32) ApiGetMigrationMappingsRequest {
	r.count = &count
	return r
}

func (r ApiGetMigrationMappingsRequest) Execute() (*ListPageResponseAccountMigrationIdMappings, *http.Response, error) {
	return r.ApiService.GetMigrationMappingsExecute(r)
}

/*
GetMigrationMappings Method for GetMigrationMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiGetMigrationMappingsRequest
*/
func (a *MigrationControllerAPIService) GetMigrationMappings(ctx context.Context, migrationLocator string) ApiGetMigrationMappingsRequest {
	return ApiGetMigrationMappingsRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAccountMigrationIdMappings
func (a *MigrationControllerAPIService) GetMigrationMappingsExecute(r ApiGetMigrationMappingsRequest) (*ListPageResponseAccountMigrationIdMappings, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAccountMigrationIdMappings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.GetMigrationMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/mappings/list"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMigrationMappings1Request struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
	accountLocator   string
}

func (r ApiGetMigrationMappings1Request) Execute() (*AccountMigrationIdMappings, *http.Response, error) {
	return r.ApiService.GetMigrationMappings1Execute(r)
}

/*
GetMigrationMappings1 Method for GetMigrationMappings1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@param accountLocator
	@return ApiGetMigrationMappings1Request
*/
func (a *MigrationControllerAPIService) GetMigrationMappings1(ctx context.Context, migrationLocator string, accountLocator string) ApiGetMigrationMappings1Request {
	return ApiGetMigrationMappings1Request{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
		accountLocator:   accountLocator,
	}
}

// Execute executes the request
//
//	@return AccountMigrationIdMappings
func (a *MigrationControllerAPIService) GetMigrationMappings1Execute(r ApiGetMigrationMappings1Request) (*AccountMigrationIdMappings, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccountMigrationIdMappings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.GetMigrationMappings1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/accounts/{accountLocator}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMigrationSummaryRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
}

func (r ApiGetMigrationSummaryRequest) Execute() (*Migration, *http.Response, error) {
	return r.ApiService.GetMigrationSummaryExecute(r)
}

/*
GetMigrationSummary Method for GetMigrationSummary

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiGetMigrationSummaryRequest
*/
func (a *MigrationControllerAPIService) GetMigrationSummary(ctx context.Context, migrationLocator string) ApiGetMigrationSummaryRequest {
	return ApiGetMigrationSummaryRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
//
//	@return Migration
func (a *MigrationControllerAPIService) GetMigrationSummaryExecute(r ApiGetMigrationSummaryRequest) (*Migration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Migration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.GetMigrationSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccountMigrationsRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
	offset           *int32
	count            *int32
}

func (r ApiListAccountMigrationsRequest) Offset(offset int32) ApiListAccountMigrationsRequest {
	r.offset = &offset
	return r
}

func (r ApiListAccountMigrationsRequest) Count(count int32) ApiListAccountMigrationsRequest {
	r.count = &count
	return r
}

func (r ApiListAccountMigrationsRequest) Execute() (*ListPageResponseAccountMigrationResponse, *http.Response, error) {
	return r.ApiService.ListAccountMigrationsExecute(r)
}

/*
ListAccountMigrations Method for ListAccountMigrations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiListAccountMigrationsRequest
*/
func (a *MigrationControllerAPIService) ListAccountMigrations(ctx context.Context, migrationLocator string) ApiListAccountMigrationsRequest {
	return ApiListAccountMigrationsRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
//
//	@return ListPageResponseAccountMigrationResponse
func (a *MigrationControllerAPIService) ListAccountMigrationsExecute(r ApiListAccountMigrationsRequest) (*ListPageResponseAccountMigrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPageResponseAccountMigrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.ListAccountMigrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/accounts/list"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMigrationRequest struct {
	ctx                          context.Context
	ApiService                   *MigrationControllerAPIService
	migrationLocator             string
	patchAccountMigrationRequest *PatchAccountMigrationRequest
}

func (r ApiPatchMigrationRequest) PatchAccountMigrationRequest(patchAccountMigrationRequest PatchAccountMigrationRequest) ApiPatchMigrationRequest {
	r.patchAccountMigrationRequest = &patchAccountMigrationRequest
	return r
}

func (r ApiPatchMigrationRequest) Execute() (*MigrationFailuresResponse, *http.Response, error) {
	return r.ApiService.PatchMigrationExecute(r)
}

/*
PatchMigration Method for PatchMigration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiPatchMigrationRequest
*/
func (a *MigrationControllerAPIService) PatchMigration(ctx context.Context, migrationLocator string) ApiPatchMigrationRequest {
	return ApiPatchMigrationRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
//
//	@return MigrationFailuresResponse
func (a *MigrationControllerAPIService) PatchMigrationExecute(r ApiPatchMigrationRequest) (*MigrationFailuresResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MigrationFailuresResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.PatchMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchAccountMigrationRequest == nil {
		return localVarReturnValue, nil, reportError("patchAccountMigrationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchAccountMigrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPauseMigrationRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
}

func (r ApiPauseMigrationRequest) Execute() (*http.Response, error) {
	return r.ApiService.PauseMigrationExecute(r)
}

/*
PauseMigration Method for PauseMigration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiPauseMigrationRequest
*/
func (a *MigrationControllerAPIService) PauseMigration(ctx context.Context, migrationLocator string) ApiPauseMigrationRequest {
	return ApiPauseMigrationRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
func (a *MigrationControllerAPIService) PauseMigrationExecute(r ApiPauseMigrationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.PauseMigration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/pause"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRecoverMigrationRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
}

func (r ApiRecoverMigrationRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecoverMigrationExecute(r)
}

/*
RecoverMigration Method for RecoverMigration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiRecoverMigrationRequest
*/
func (a *MigrationControllerAPIService) RecoverMigration(ctx context.Context, migrationLocator string) ApiRecoverMigrationRequest {
	return ApiRecoverMigrationRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
func (a *MigrationControllerAPIService) RecoverMigrationExecute(r ApiRecoverMigrationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.RecoverMigration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/recover"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResumeMigrationRequest struct {
	ctx              context.Context
	ApiService       *MigrationControllerAPIService
	migrationLocator string
}

func (r ApiResumeMigrationRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResumeMigrationExecute(r)
}

/*
ResumeMigration Method for ResumeMigration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param migrationLocator
	@return ApiResumeMigrationRequest
*/
func (a *MigrationControllerAPIService) ResumeMigration(ctx context.Context, migrationLocator string) ApiResumeMigrationRequest {
	return ApiResumeMigrationRequest{
		ApiService:       a,
		ctx:              ctx,
		migrationLocator: migrationLocator,
	}
}

// Execute executes the request
func (a *MigrationControllerAPIService) ResumeMigrationExecute(r ApiResumeMigrationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.ResumeMigration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/{migrationLocator}/resume"
	localVarPath = strings.Replace(localVarPath, "{"+"migrationLocator"+"}", url.PathEscape(parameterValueToString(r.migrationLocator, "migrationLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStartMigrationRequest struct {
	ctx        context.Context
	ApiService *MigrationControllerAPIService
	body       *string
}

func (r ApiStartMigrationRequest) Body(body string) ApiStartMigrationRequest {
	r.body = &body
	return r
}

func (r ApiStartMigrationRequest) Execute() (*Migration, *http.Response, error) {
	return r.ApiService.StartMigrationExecute(r)
}

/*
StartMigration Method for StartMigration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStartMigrationRequest
*/
func (a *MigrationControllerAPIService) StartMigration(ctx context.Context) ApiStartMigrationRequest {
	return ApiStartMigrationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Migration
func (a *MigrationControllerAPIService) StartMigrationExecute(r ApiStartMigrationRequest) (*Migration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Migration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.StartMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartMigrationForAccountRequest struct {
	ctx            context.Context
	ApiService     *MigrationControllerAPIService
	accountLocator string
	body           *string
}

func (r ApiStartMigrationForAccountRequest) Body(body string) ApiStartMigrationForAccountRequest {
	r.body = &body
	return r
}

func (r ApiStartMigrationForAccountRequest) Execute() (*Migration, *http.Response, error) {
	return r.ApiService.StartMigrationForAccountExecute(r)
}

/*
StartMigrationForAccount Method for StartMigrationForAccount

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountLocator
	@return ApiStartMigrationForAccountRequest
*/
func (a *MigrationControllerAPIService) StartMigrationForAccount(ctx context.Context, accountLocator string) ApiStartMigrationForAccountRequest {
	return ApiStartMigrationForAccountRequest{
		ApiService:     a,
		ctx:            ctx,
		accountLocator: accountLocator,
	}
}

// Execute executes the request
//
//	@return Migration
func (a *MigrationControllerAPIService) StartMigrationForAccountExecute(r ApiStartMigrationForAccountRequest) (*Migration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Migration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationControllerAPIService.StartMigrationForAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/migrations/accounts/{accountLocator}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountLocator"+"}", url.PathEscape(parameterValueToString(r.accountLocator, "accountLocator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
