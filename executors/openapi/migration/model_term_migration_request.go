/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TermMigrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TermMigrationRequest{}

// TermMigrationRequest struct for TermMigrationRequest
type TermMigrationRequest struct {
	StartTime    time.Time                     `json:"startTime"`
	EndTime      time.Time                     `json:"endTime"`
	Transactions []TransactionMigrationRequest `json:"transactions"`
}

type _TermMigrationRequest TermMigrationRequest

// NewTermMigrationRequest instantiates a new TermMigrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermMigrationRequest(startTime time.Time, endTime time.Time, transactions []TransactionMigrationRequest) *TermMigrationRequest {
	this := TermMigrationRequest{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.Transactions = transactions
	return &this
}

// NewTermMigrationRequestWithDefaults instantiates a new TermMigrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermMigrationRequestWithDefaults() *TermMigrationRequest {
	this := TermMigrationRequest{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *TermMigrationRequest) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *TermMigrationRequest) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *TermMigrationRequest) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *TermMigrationRequest) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *TermMigrationRequest) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *TermMigrationRequest) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetTransactions returns the Transactions field value
func (o *TermMigrationRequest) GetTransactions() []TransactionMigrationRequest {
	if o == nil {
		var ret []TransactionMigrationRequest
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *TermMigrationRequest) GetTransactionsOk() ([]TransactionMigrationRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *TermMigrationRequest) SetTransactions(v []TransactionMigrationRequest) {
	o.Transactions = v
}

func (o TermMigrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TermMigrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["transactions"] = o.Transactions
	return toSerialize, nil
}

func (o *TermMigrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTime",
		"endTime",
		"transactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTermMigrationRequest := _TermMigrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTermMigrationRequest)

	if err != nil {
		return err
	}

	*o = TermMigrationRequest(varTermMigrationRequest)

	return err
}

type NullableTermMigrationRequest struct {
	value *TermMigrationRequest
	isSet bool
}

func (v NullableTermMigrationRequest) Get() *TermMigrationRequest {
	return v.value
}

func (v *NullableTermMigrationRequest) Set(val *TermMigrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTermMigrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTermMigrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermMigrationRequest(val *TermMigrationRequest) *NullableTermMigrationRequest {
	return &NullableTermMigrationRequest{value: val, isSet: true}
}

func (v NullableTermMigrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermMigrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
