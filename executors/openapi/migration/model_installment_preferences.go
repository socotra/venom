/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InstallmentPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallmentPreferences{}

// InstallmentPreferences struct for InstallmentPreferences
type InstallmentPreferences struct {
	Cadence                *string    `json:"cadence,omitempty"`
	AnchorMode             *string    `json:"anchorMode,omitempty"`
	GenerateLeadDays       *int32     `json:"generateLeadDays,omitempty"`
	DueLeadDays            *int32     `json:"dueLeadDays,omitempty"`
	InstallmentWeights     []float32  `json:"installmentWeights"`
	MaxInstallmentsPerTerm *int32     `json:"maxInstallmentsPerTerm,omitempty"`
	InstallmentPlanName    *string    `json:"installmentPlanName,omitempty"`
	AnchorType             *string    `json:"anchorType,omitempty"`
	DayOfMonth             *int32     `json:"dayOfMonth,omitempty"`
	DayOfWeek              *string    `json:"dayOfWeek,omitempty"`
	WeekOfMonth            *string    `json:"weekOfMonth,omitempty"`
	AnchorTime             *time.Time `json:"anchorTime,omitempty"`
}

type _InstallmentPreferences InstallmentPreferences

// NewInstallmentPreferences instantiates a new InstallmentPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPreferences(installmentWeights []float32) *InstallmentPreferences {
	this := InstallmentPreferences{}
	this.InstallmentWeights = installmentWeights
	return &this
}

// NewInstallmentPreferencesWithDefaults instantiates a new InstallmentPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPreferencesWithDefaults() *InstallmentPreferences {
	this := InstallmentPreferences{}
	return &this
}

// GetCadence returns the Cadence field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetCadence() string {
	if o == nil || IsNil(o.Cadence) {
		var ret string
		return ret
	}
	return *o.Cadence
}

// GetCadenceOk returns a tuple with the Cadence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetCadenceOk() (*string, bool) {
	if o == nil || IsNil(o.Cadence) {
		return nil, false
	}
	return o.Cadence, true
}

// HasCadence returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasCadence() bool {
	if o != nil && !IsNil(o.Cadence) {
		return true
	}

	return false
}

// SetCadence gets a reference to the given string and assigns it to the Cadence field.
func (o *InstallmentPreferences) SetCadence(v string) {
	o.Cadence = &v
}

// GetAnchorMode returns the AnchorMode field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetAnchorMode() string {
	if o == nil || IsNil(o.AnchorMode) {
		var ret string
		return ret
	}
	return *o.AnchorMode
}

// GetAnchorModeOk returns a tuple with the AnchorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetAnchorModeOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorMode) {
		return nil, false
	}
	return o.AnchorMode, true
}

// HasAnchorMode returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasAnchorMode() bool {
	if o != nil && !IsNil(o.AnchorMode) {
		return true
	}

	return false
}

// SetAnchorMode gets a reference to the given string and assigns it to the AnchorMode field.
func (o *InstallmentPreferences) SetAnchorMode(v string) {
	o.AnchorMode = &v
}

// GetGenerateLeadDays returns the GenerateLeadDays field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetGenerateLeadDays() int32 {
	if o == nil || IsNil(o.GenerateLeadDays) {
		var ret int32
		return ret
	}
	return *o.GenerateLeadDays
}

// GetGenerateLeadDaysOk returns a tuple with the GenerateLeadDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetGenerateLeadDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.GenerateLeadDays) {
		return nil, false
	}
	return o.GenerateLeadDays, true
}

// HasGenerateLeadDays returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasGenerateLeadDays() bool {
	if o != nil && !IsNil(o.GenerateLeadDays) {
		return true
	}

	return false
}

// SetGenerateLeadDays gets a reference to the given int32 and assigns it to the GenerateLeadDays field.
func (o *InstallmentPreferences) SetGenerateLeadDays(v int32) {
	o.GenerateLeadDays = &v
}

// GetDueLeadDays returns the DueLeadDays field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetDueLeadDays() int32 {
	if o == nil || IsNil(o.DueLeadDays) {
		var ret int32
		return ret
	}
	return *o.DueLeadDays
}

// GetDueLeadDaysOk returns a tuple with the DueLeadDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetDueLeadDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.DueLeadDays) {
		return nil, false
	}
	return o.DueLeadDays, true
}

// HasDueLeadDays returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasDueLeadDays() bool {
	if o != nil && !IsNil(o.DueLeadDays) {
		return true
	}

	return false
}

// SetDueLeadDays gets a reference to the given int32 and assigns it to the DueLeadDays field.
func (o *InstallmentPreferences) SetDueLeadDays(v int32) {
	o.DueLeadDays = &v
}

// GetInstallmentWeights returns the InstallmentWeights field value
func (o *InstallmentPreferences) GetInstallmentWeights() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.InstallmentWeights
}

// GetInstallmentWeightsOk returns a tuple with the InstallmentWeights field value
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetInstallmentWeightsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallmentWeights, true
}

// SetInstallmentWeights sets field value
func (o *InstallmentPreferences) SetInstallmentWeights(v []float32) {
	o.InstallmentWeights = v
}

// GetMaxInstallmentsPerTerm returns the MaxInstallmentsPerTerm field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetMaxInstallmentsPerTerm() int32 {
	if o == nil || IsNil(o.MaxInstallmentsPerTerm) {
		var ret int32
		return ret
	}
	return *o.MaxInstallmentsPerTerm
}

// GetMaxInstallmentsPerTermOk returns a tuple with the MaxInstallmentsPerTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetMaxInstallmentsPerTermOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxInstallmentsPerTerm) {
		return nil, false
	}
	return o.MaxInstallmentsPerTerm, true
}

// HasMaxInstallmentsPerTerm returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasMaxInstallmentsPerTerm() bool {
	if o != nil && !IsNil(o.MaxInstallmentsPerTerm) {
		return true
	}

	return false
}

// SetMaxInstallmentsPerTerm gets a reference to the given int32 and assigns it to the MaxInstallmentsPerTerm field.
func (o *InstallmentPreferences) SetMaxInstallmentsPerTerm(v int32) {
	o.MaxInstallmentsPerTerm = &v
}

// GetInstallmentPlanName returns the InstallmentPlanName field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetInstallmentPlanName() string {
	if o == nil || IsNil(o.InstallmentPlanName) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanName
}

// GetInstallmentPlanNameOk returns a tuple with the InstallmentPlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetInstallmentPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstallmentPlanName) {
		return nil, false
	}
	return o.InstallmentPlanName, true
}

// HasInstallmentPlanName returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasInstallmentPlanName() bool {
	if o != nil && !IsNil(o.InstallmentPlanName) {
		return true
	}

	return false
}

// SetInstallmentPlanName gets a reference to the given string and assigns it to the InstallmentPlanName field.
func (o *InstallmentPreferences) SetInstallmentPlanName(v string) {
	o.InstallmentPlanName = &v
}

// GetAnchorType returns the AnchorType field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetAnchorType() string {
	if o == nil || IsNil(o.AnchorType) {
		var ret string
		return ret
	}
	return *o.AnchorType
}

// GetAnchorTypeOk returns a tuple with the AnchorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetAnchorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AnchorType) {
		return nil, false
	}
	return o.AnchorType, true
}

// HasAnchorType returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasAnchorType() bool {
	if o != nil && !IsNil(o.AnchorType) {
		return true
	}

	return false
}

// SetAnchorType gets a reference to the given string and assigns it to the AnchorType field.
func (o *InstallmentPreferences) SetAnchorType(v string) {
	o.AnchorType = &v
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetDayOfMonth() int32 {
	if o == nil || IsNil(o.DayOfMonth) {
		var ret int32
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetDayOfMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.DayOfMonth) {
		return nil, false
	}
	return o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasDayOfMonth() bool {
	if o != nil && !IsNil(o.DayOfMonth) {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int32 and assigns it to the DayOfMonth field.
func (o *InstallmentPreferences) SetDayOfMonth(v int32) {
	o.DayOfMonth = &v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetDayOfWeek() string {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret string
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetDayOfWeekOk() (*string, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given string and assigns it to the DayOfWeek field.
func (o *InstallmentPreferences) SetDayOfWeek(v string) {
	o.DayOfWeek = &v
}

// GetWeekOfMonth returns the WeekOfMonth field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetWeekOfMonth() string {
	if o == nil || IsNil(o.WeekOfMonth) {
		var ret string
		return ret
	}
	return *o.WeekOfMonth
}

// GetWeekOfMonthOk returns a tuple with the WeekOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetWeekOfMonthOk() (*string, bool) {
	if o == nil || IsNil(o.WeekOfMonth) {
		return nil, false
	}
	return o.WeekOfMonth, true
}

// HasWeekOfMonth returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasWeekOfMonth() bool {
	if o != nil && !IsNil(o.WeekOfMonth) {
		return true
	}

	return false
}

// SetWeekOfMonth gets a reference to the given string and assigns it to the WeekOfMonth field.
func (o *InstallmentPreferences) SetWeekOfMonth(v string) {
	o.WeekOfMonth = &v
}

// GetAnchorTime returns the AnchorTime field value if set, zero value otherwise.
func (o *InstallmentPreferences) GetAnchorTime() time.Time {
	if o == nil || IsNil(o.AnchorTime) {
		var ret time.Time
		return ret
	}
	return *o.AnchorTime
}

// GetAnchorTimeOk returns a tuple with the AnchorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPreferences) GetAnchorTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AnchorTime) {
		return nil, false
	}
	return o.AnchorTime, true
}

// HasAnchorTime returns a boolean if a field has been set.
func (o *InstallmentPreferences) HasAnchorTime() bool {
	if o != nil && !IsNil(o.AnchorTime) {
		return true
	}

	return false
}

// SetAnchorTime gets a reference to the given time.Time and assigns it to the AnchorTime field.
func (o *InstallmentPreferences) SetAnchorTime(v time.Time) {
	o.AnchorTime = &v
}

func (o InstallmentPreferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallmentPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cadence) {
		toSerialize["cadence"] = o.Cadence
	}
	if !IsNil(o.AnchorMode) {
		toSerialize["anchorMode"] = o.AnchorMode
	}
	if !IsNil(o.GenerateLeadDays) {
		toSerialize["generateLeadDays"] = o.GenerateLeadDays
	}
	if !IsNil(o.DueLeadDays) {
		toSerialize["dueLeadDays"] = o.DueLeadDays
	}
	toSerialize["installmentWeights"] = o.InstallmentWeights
	if !IsNil(o.MaxInstallmentsPerTerm) {
		toSerialize["maxInstallmentsPerTerm"] = o.MaxInstallmentsPerTerm
	}
	if !IsNil(o.InstallmentPlanName) {
		toSerialize["installmentPlanName"] = o.InstallmentPlanName
	}
	if !IsNil(o.AnchorType) {
		toSerialize["anchorType"] = o.AnchorType
	}
	if !IsNil(o.DayOfMonth) {
		toSerialize["dayOfMonth"] = o.DayOfMonth
	}
	if !IsNil(o.DayOfWeek) {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if !IsNil(o.WeekOfMonth) {
		toSerialize["weekOfMonth"] = o.WeekOfMonth
	}
	if !IsNil(o.AnchorTime) {
		toSerialize["anchorTime"] = o.AnchorTime
	}
	return toSerialize, nil
}

func (o *InstallmentPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"installmentWeights",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallmentPreferences := _InstallmentPreferences{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallmentPreferences)

	if err != nil {
		return err
	}

	*o = InstallmentPreferences(varInstallmentPreferences)

	return err
}

type NullableInstallmentPreferences struct {
	value *InstallmentPreferences
	isSet bool
}

func (v NullableInstallmentPreferences) Get() *InstallmentPreferences {
	return v.value
}

func (v *NullableInstallmentPreferences) Set(val *InstallmentPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPreferences(val *InstallmentPreferences) *NullableInstallmentPreferences {
	return &NullableInstallmentPreferences{value: val, isSet: true}
}

func (v NullableInstallmentPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
