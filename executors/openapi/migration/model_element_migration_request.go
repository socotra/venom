/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ElementMigrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElementMigrationRequest{}

// ElementMigrationRequest struct for ElementMigrationRequest
type ElementMigrationRequest struct {
	Id            string                            `json:"id"`
	ElementType   string                            `json:"elementType"`
	Data          map[string]map[string]interface{} `json:"data"`
	CoverageTerms map[string]map[string]interface{} `json:"coverageTerms"`
	Elements      []ElementMigrationRequest         `json:"elements"`
	Charges       []ChargeMigrationRequest          `json:"charges"`
}

type _ElementMigrationRequest ElementMigrationRequest

// NewElementMigrationRequest instantiates a new ElementMigrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementMigrationRequest(id string, elementType string, data map[string]map[string]interface{}, coverageTerms map[string]map[string]interface{}, elements []ElementMigrationRequest, charges []ChargeMigrationRequest) *ElementMigrationRequest {
	this := ElementMigrationRequest{}
	this.Id = id
	this.ElementType = elementType
	this.Data = data
	this.CoverageTerms = coverageTerms
	this.Elements = elements
	this.Charges = charges
	return &this
}

// NewElementMigrationRequestWithDefaults instantiates a new ElementMigrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementMigrationRequestWithDefaults() *ElementMigrationRequest {
	this := ElementMigrationRequest{}
	return &this
}

// GetId returns the Id field value
func (o *ElementMigrationRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ElementMigrationRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ElementMigrationRequest) SetId(v string) {
	o.Id = v
}

// GetElementType returns the ElementType field value
func (o *ElementMigrationRequest) GetElementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value
// and a boolean to check if the value has been set.
func (o *ElementMigrationRequest) GetElementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementType, true
}

// SetElementType sets field value
func (o *ElementMigrationRequest) SetElementType(v string) {
	o.ElementType = v
}

// GetData returns the Data field value
func (o *ElementMigrationRequest) GetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ElementMigrationRequest) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ElementMigrationRequest) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetCoverageTerms returns the CoverageTerms field value
func (o *ElementMigrationRequest) GetCoverageTerms() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.CoverageTerms
}

// GetCoverageTermsOk returns a tuple with the CoverageTerms field value
// and a boolean to check if the value has been set.
func (o *ElementMigrationRequest) GetCoverageTermsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.CoverageTerms, true
}

// SetCoverageTerms sets field value
func (o *ElementMigrationRequest) SetCoverageTerms(v map[string]map[string]interface{}) {
	o.CoverageTerms = v
}

// GetElements returns the Elements field value
func (o *ElementMigrationRequest) GetElements() []ElementMigrationRequest {
	if o == nil {
		var ret []ElementMigrationRequest
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *ElementMigrationRequest) GetElementsOk() ([]ElementMigrationRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *ElementMigrationRequest) SetElements(v []ElementMigrationRequest) {
	o.Elements = v
}

// GetCharges returns the Charges field value
func (o *ElementMigrationRequest) GetCharges() []ChargeMigrationRequest {
	if o == nil {
		var ret []ChargeMigrationRequest
		return ret
	}

	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value
// and a boolean to check if the value has been set.
func (o *ElementMigrationRequest) GetChargesOk() ([]ChargeMigrationRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Charges, true
}

// SetCharges sets field value
func (o *ElementMigrationRequest) SetCharges(v []ChargeMigrationRequest) {
	o.Charges = v
}

func (o ElementMigrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElementMigrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["elementType"] = o.ElementType
	toSerialize["data"] = o.Data
	toSerialize["coverageTerms"] = o.CoverageTerms
	toSerialize["elements"] = o.Elements
	toSerialize["charges"] = o.Charges
	return toSerialize, nil
}

func (o *ElementMigrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"elementType",
		"data",
		"coverageTerms",
		"elements",
		"charges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varElementMigrationRequest := _ElementMigrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varElementMigrationRequest)

	if err != nil {
		return err
	}

	*o = ElementMigrationRequest(varElementMigrationRequest)

	return err
}

type NullableElementMigrationRequest struct {
	value *ElementMigrationRequest
	isSet bool
}

func (v NullableElementMigrationRequest) Get() *ElementMigrationRequest {
	return v.value
}

func (v *NullableElementMigrationRequest) Set(val *ElementMigrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableElementMigrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableElementMigrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementMigrationRequest(val *ElementMigrationRequest) *NullableElementMigrationRequest {
	return &NullableElementMigrationRequest{value: val, isSet: true}
}

func (v NullableElementMigrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementMigrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
