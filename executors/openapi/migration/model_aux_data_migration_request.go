/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package migration

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuxDataMigrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuxDataMigrationRequest{}

// AuxDataMigrationRequest struct for AuxDataMigrationRequest
type AuxDataMigrationRequest struct {
	Entries      []AuxDataEntryMigrationRequest `json:"entries"`
	SettingsName string                         `json:"settingsName"`
}

type _AuxDataMigrationRequest AuxDataMigrationRequest

// NewAuxDataMigrationRequest instantiates a new AuxDataMigrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuxDataMigrationRequest(entries []AuxDataEntryMigrationRequest, settingsName string) *AuxDataMigrationRequest {
	this := AuxDataMigrationRequest{}
	this.Entries = entries
	this.SettingsName = settingsName
	return &this
}

// NewAuxDataMigrationRequestWithDefaults instantiates a new AuxDataMigrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuxDataMigrationRequestWithDefaults() *AuxDataMigrationRequest {
	this := AuxDataMigrationRequest{}
	return &this
}

// GetEntries returns the Entries field value
func (o *AuxDataMigrationRequest) GetEntries() []AuxDataEntryMigrationRequest {
	if o == nil {
		var ret []AuxDataEntryMigrationRequest
		return ret
	}

	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value
// and a boolean to check if the value has been set.
func (o *AuxDataMigrationRequest) GetEntriesOk() ([]AuxDataEntryMigrationRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries, true
}

// SetEntries sets field value
func (o *AuxDataMigrationRequest) SetEntries(v []AuxDataEntryMigrationRequest) {
	o.Entries = v
}

// GetSettingsName returns the SettingsName field value
func (o *AuxDataMigrationRequest) GetSettingsName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettingsName
}

// GetSettingsNameOk returns a tuple with the SettingsName field value
// and a boolean to check if the value has been set.
func (o *AuxDataMigrationRequest) GetSettingsNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettingsName, true
}

// SetSettingsName sets field value
func (o *AuxDataMigrationRequest) SetSettingsName(v string) {
	o.SettingsName = v
}

func (o AuxDataMigrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuxDataMigrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entries"] = o.Entries
	toSerialize["settingsName"] = o.SettingsName
	return toSerialize, nil
}

func (o *AuxDataMigrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entries",
		"settingsName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuxDataMigrationRequest := _AuxDataMigrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuxDataMigrationRequest)

	if err != nil {
		return err
	}

	*o = AuxDataMigrationRequest(varAuxDataMigrationRequest)

	return err
}

type NullableAuxDataMigrationRequest struct {
	value *AuxDataMigrationRequest
	isSet bool
}

func (v NullableAuxDataMigrationRequest) Get() *AuxDataMigrationRequest {
	return v.value
}

func (v *NullableAuxDataMigrationRequest) Set(val *AuxDataMigrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuxDataMigrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuxDataMigrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuxDataMigrationRequest(val *AuxDataMigrationRequest) *NullableAuxDataMigrationRequest {
	return &NullableAuxDataMigrationRequest{value: val, isSet: true}
}

func (v NullableAuxDataMigrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuxDataMigrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
