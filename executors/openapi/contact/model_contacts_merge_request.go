/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contact

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContactsMergeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactsMergeRequest{}

// ContactsMergeRequest struct for ContactsMergeRequest
type ContactsMergeRequest struct {
	ContactLocators []string `json:"contactLocators"`
	MergeToContact  string   `json:"mergeToContact"`
}

type _ContactsMergeRequest ContactsMergeRequest

// NewContactsMergeRequest instantiates a new ContactsMergeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactsMergeRequest(contactLocators []string, mergeToContact string) *ContactsMergeRequest {
	this := ContactsMergeRequest{}
	this.ContactLocators = contactLocators
	this.MergeToContact = mergeToContact
	return &this
}

// NewContactsMergeRequestWithDefaults instantiates a new ContactsMergeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactsMergeRequestWithDefaults() *ContactsMergeRequest {
	this := ContactsMergeRequest{}
	return &this
}

// GetContactLocators returns the ContactLocators field value
func (o *ContactsMergeRequest) GetContactLocators() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ContactLocators
}

// GetContactLocatorsOk returns a tuple with the ContactLocators field value
// and a boolean to check if the value has been set.
func (o *ContactsMergeRequest) GetContactLocatorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactLocators, true
}

// SetContactLocators sets field value
func (o *ContactsMergeRequest) SetContactLocators(v []string) {
	o.ContactLocators = v
}

// GetMergeToContact returns the MergeToContact field value
func (o *ContactsMergeRequest) GetMergeToContact() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MergeToContact
}

// GetMergeToContactOk returns a tuple with the MergeToContact field value
// and a boolean to check if the value has been set.
func (o *ContactsMergeRequest) GetMergeToContactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeToContact, true
}

// SetMergeToContact sets field value
func (o *ContactsMergeRequest) SetMergeToContact(v string) {
	o.MergeToContact = v
}

func (o ContactsMergeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactsMergeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contactLocators"] = o.ContactLocators
	toSerialize["mergeToContact"] = o.MergeToContact
	return toSerialize, nil
}

func (o *ContactsMergeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contactLocators",
		"mergeToContact",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactsMergeRequest := _ContactsMergeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactsMergeRequest)

	if err != nil {
		return err
	}

	*o = ContactsMergeRequest(varContactsMergeRequest)

	return err
}

type NullableContactsMergeRequest struct {
	value *ContactsMergeRequest
	isSet bool
}

func (v NullableContactsMergeRequest) Get() *ContactsMergeRequest {
	return v.value
}

func (v *NullableContactsMergeRequest) Set(val *ContactsMergeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableContactsMergeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableContactsMergeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactsMergeRequest(val *ContactsMergeRequest) *NullableContactsMergeRequest {
	return &NullableContactsMergeRequest{value: val, isSet: true}
}

func (v NullableContactsMergeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactsMergeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
