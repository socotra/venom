/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contact

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Contact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contact{}

// Contact struct for Contact
type Contact struct {
	Locator          string                            `json:"locator"`
	StaticLocator    string                            `json:"staticLocator"`
	ContactState     string                            `json:"contactState"`
	Type             string                            `json:"type"`
	Data             map[string]map[string]interface{} `json:"data"`
	Region           *string                           `json:"region,omitempty"`
	CreatedAt        time.Time                         `json:"createdAt"`
	CreatedBy        string                            `json:"createdBy"`
	UpdatedAt        *time.Time                        `json:"updatedAt,omitempty"`
	UpdatedBy        *string                           `json:"updatedBy,omitempty"`
	ValidationResult *ValidationResult                 `json:"validationResult,omitempty"`
	AnonymizedAt     *time.Time                        `json:"anonymizedAt,omitempty"`
}

type _Contact Contact

// NewContact instantiates a new Contact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContact(locator string, staticLocator string, contactState string, type_ string, data map[string]map[string]interface{}, createdAt time.Time, createdBy string) *Contact {
	this := Contact{}
	this.Locator = locator
	this.StaticLocator = staticLocator
	this.ContactState = contactState
	this.Type = type_
	this.Data = data
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	return &this
}

// NewContactWithDefaults instantiates a new Contact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactWithDefaults() *Contact {
	this := Contact{}
	return &this
}

// GetLocator returns the Locator field value
func (o *Contact) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *Contact) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *Contact) SetLocator(v string) {
	o.Locator = v
}

// GetStaticLocator returns the StaticLocator field value
func (o *Contact) GetStaticLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticLocator
}

// GetStaticLocatorOk returns a tuple with the StaticLocator field value
// and a boolean to check if the value has been set.
func (o *Contact) GetStaticLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticLocator, true
}

// SetStaticLocator sets field value
func (o *Contact) SetStaticLocator(v string) {
	o.StaticLocator = v
}

// GetContactState returns the ContactState field value
func (o *Contact) GetContactState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContactState
}

// GetContactStateOk returns a tuple with the ContactState field value
// and a boolean to check if the value has been set.
func (o *Contact) GetContactStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactState, true
}

// SetContactState sets field value
func (o *Contact) SetContactState(v string) {
	o.ContactState = v
}

// GetType returns the Type field value
func (o *Contact) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Contact) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Contact) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value
func (o *Contact) GetData() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Contact) GetDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Contact) SetData(v map[string]map[string]interface{}) {
	o.Data = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Contact) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Contact) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Contact) SetRegion(v string) {
	o.Region = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Contact) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Contact) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Contact) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Contact) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Contact) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Contact) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Contact) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Contact) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Contact) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Contact) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Contact) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *Contact) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *Contact) GetValidationResult() ValidationResult {
	if o == nil || IsNil(o.ValidationResult) {
		var ret ValidationResult
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetValidationResultOk() (*ValidationResult, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *Contact) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given ValidationResult and assigns it to the ValidationResult field.
func (o *Contact) SetValidationResult(v ValidationResult) {
	o.ValidationResult = &v
}

// GetAnonymizedAt returns the AnonymizedAt field value if set, zero value otherwise.
func (o *Contact) GetAnonymizedAt() time.Time {
	if o == nil || IsNil(o.AnonymizedAt) {
		var ret time.Time
		return ret
	}
	return *o.AnonymizedAt
}

// GetAnonymizedAtOk returns a tuple with the AnonymizedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetAnonymizedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AnonymizedAt) {
		return nil, false
	}
	return o.AnonymizedAt, true
}

// HasAnonymizedAt returns a boolean if a field has been set.
func (o *Contact) HasAnonymizedAt() bool {
	if o != nil && !IsNil(o.AnonymizedAt) {
		return true
	}

	return false
}

// SetAnonymizedAt gets a reference to the given time.Time and assigns it to the AnonymizedAt field.
func (o *Contact) SetAnonymizedAt(v time.Time) {
	o.AnonymizedAt = &v
}

func (o Contact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["staticLocator"] = o.StaticLocator
	toSerialize["contactState"] = o.ContactState
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	if !IsNil(o.AnonymizedAt) {
		toSerialize["anonymizedAt"] = o.AnonymizedAt
	}
	return toSerialize, nil
}

func (o *Contact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"staticLocator",
		"contactState",
		"type",
		"data",
		"createdAt",
		"createdBy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContact := _Contact{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContact)

	if err != nil {
		return err
	}

	*o = Contact(varContact)

	return err
}

type NullableContact struct {
	value *Contact
	isSet bool
}

func (v NullableContact) Get() *Contact {
	return v.value
}

func (v *NullableContact) Set(val *Contact) {
	v.value = val
	v.isSet = true
}

func (v NullableContact) IsSet() bool {
	return v.isSet
}

func (v *NullableContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContact(val *Contact) *NullableContact {
	return &NullableContact{value: val, isSet: true}
}

func (v NullableContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
