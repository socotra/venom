/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businessstats

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MetricRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricRequest{}

// MetricRequest struct for MetricRequest
type MetricRequest struct {
	GroupByProduct         *bool     `json:"groupByProduct,omitempty"`
	GroupByTenant          *bool     `json:"groupByTenant,omitempty"`
	TenantLocators         []string  `json:"tenantLocators,omitempty"`
	Products               []string  `json:"products,omitempty"`
	TenantType             *string   `json:"tenantType,omitempty"`
	StartTime              time.Time `json:"startTime"`
	EndTime                time.Time `json:"endTime"`
	Periodic               *string   `json:"periodic,omitempty"`
	Currencies             []string  `json:"currencies,omitempty"`
	LocalStartDate         string    `json:"localStartDate"`
	LocalEndDate           string    `json:"localEndDate"`
	LocalStartDateAdjusted string    `json:"localStartDateAdjusted"`
	LocalEndDateAdjusted   string    `json:"localEndDateAdjusted"`
	CountOfDatePoints      int32     `json:"countOfDatePoints"`
}

type _MetricRequest MetricRequest

// NewMetricRequest instantiates a new MetricRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricRequest(startTime time.Time, endTime time.Time, localStartDate string, localEndDate string, localStartDateAdjusted string, localEndDateAdjusted string, countOfDatePoints int32) *MetricRequest {
	this := MetricRequest{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.LocalStartDate = localStartDate
	this.LocalEndDate = localEndDate
	this.LocalStartDateAdjusted = localStartDateAdjusted
	this.LocalEndDateAdjusted = localEndDateAdjusted
	this.CountOfDatePoints = countOfDatePoints
	return &this
}

// NewMetricRequestWithDefaults instantiates a new MetricRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricRequestWithDefaults() *MetricRequest {
	this := MetricRequest{}
	return &this
}

// GetGroupByProduct returns the GroupByProduct field value if set, zero value otherwise.
func (o *MetricRequest) GetGroupByProduct() bool {
	if o == nil || IsNil(o.GroupByProduct) {
		var ret bool
		return ret
	}
	return *o.GroupByProduct
}

// GetGroupByProductOk returns a tuple with the GroupByProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetGroupByProductOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupByProduct) {
		return nil, false
	}
	return o.GroupByProduct, true
}

// HasGroupByProduct returns a boolean if a field has been set.
func (o *MetricRequest) HasGroupByProduct() bool {
	if o != nil && !IsNil(o.GroupByProduct) {
		return true
	}

	return false
}

// SetGroupByProduct gets a reference to the given bool and assigns it to the GroupByProduct field.
func (o *MetricRequest) SetGroupByProduct(v bool) {
	o.GroupByProduct = &v
}

// GetGroupByTenant returns the GroupByTenant field value if set, zero value otherwise.
func (o *MetricRequest) GetGroupByTenant() bool {
	if o == nil || IsNil(o.GroupByTenant) {
		var ret bool
		return ret
	}
	return *o.GroupByTenant
}

// GetGroupByTenantOk returns a tuple with the GroupByTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetGroupByTenantOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupByTenant) {
		return nil, false
	}
	return o.GroupByTenant, true
}

// HasGroupByTenant returns a boolean if a field has been set.
func (o *MetricRequest) HasGroupByTenant() bool {
	if o != nil && !IsNil(o.GroupByTenant) {
		return true
	}

	return false
}

// SetGroupByTenant gets a reference to the given bool and assigns it to the GroupByTenant field.
func (o *MetricRequest) SetGroupByTenant(v bool) {
	o.GroupByTenant = &v
}

// GetTenantLocators returns the TenantLocators field value if set, zero value otherwise.
func (o *MetricRequest) GetTenantLocators() []string {
	if o == nil || IsNil(o.TenantLocators) {
		var ret []string
		return ret
	}
	return o.TenantLocators
}

// GetTenantLocatorsOk returns a tuple with the TenantLocators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetTenantLocatorsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantLocators) {
		return nil, false
	}
	return o.TenantLocators, true
}

// HasTenantLocators returns a boolean if a field has been set.
func (o *MetricRequest) HasTenantLocators() bool {
	if o != nil && !IsNil(o.TenantLocators) {
		return true
	}

	return false
}

// SetTenantLocators gets a reference to the given []string and assigns it to the TenantLocators field.
func (o *MetricRequest) SetTenantLocators(v []string) {
	o.TenantLocators = v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *MetricRequest) GetProducts() []string {
	if o == nil || IsNil(o.Products) {
		var ret []string
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetProductsOk() ([]string, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *MetricRequest) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []string and assigns it to the Products field.
func (o *MetricRequest) SetProducts(v []string) {
	o.Products = v
}

// GetTenantType returns the TenantType field value if set, zero value otherwise.
func (o *MetricRequest) GetTenantType() string {
	if o == nil || IsNil(o.TenantType) {
		var ret string
		return ret
	}
	return *o.TenantType
}

// GetTenantTypeOk returns a tuple with the TenantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetTenantTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TenantType) {
		return nil, false
	}
	return o.TenantType, true
}

// HasTenantType returns a boolean if a field has been set.
func (o *MetricRequest) HasTenantType() bool {
	if o != nil && !IsNil(o.TenantType) {
		return true
	}

	return false
}

// SetTenantType gets a reference to the given string and assigns it to the TenantType field.
func (o *MetricRequest) SetTenantType(v string) {
	o.TenantType = &v
}

// GetStartTime returns the StartTime field value
func (o *MetricRequest) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *MetricRequest) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *MetricRequest) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *MetricRequest) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetPeriodic returns the Periodic field value if set, zero value otherwise.
func (o *MetricRequest) GetPeriodic() string {
	if o == nil || IsNil(o.Periodic) {
		var ret string
		return ret
	}
	return *o.Periodic
}

// GetPeriodicOk returns a tuple with the Periodic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetPeriodicOk() (*string, bool) {
	if o == nil || IsNil(o.Periodic) {
		return nil, false
	}
	return o.Periodic, true
}

// HasPeriodic returns a boolean if a field has been set.
func (o *MetricRequest) HasPeriodic() bool {
	if o != nil && !IsNil(o.Periodic) {
		return true
	}

	return false
}

// SetPeriodic gets a reference to the given string and assigns it to the Periodic field.
func (o *MetricRequest) SetPeriodic(v string) {
	o.Periodic = &v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *MetricRequest) GetCurrencies() []string {
	if o == nil || IsNil(o.Currencies) {
		var ret []string
		return ret
	}
	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetCurrenciesOk() ([]string, bool) {
	if o == nil || IsNil(o.Currencies) {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *MetricRequest) HasCurrencies() bool {
	if o != nil && !IsNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given []string and assigns it to the Currencies field.
func (o *MetricRequest) SetCurrencies(v []string) {
	o.Currencies = v
}

// GetLocalStartDate returns the LocalStartDate field value
func (o *MetricRequest) GetLocalStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalStartDate
}

// GetLocalStartDateOk returns a tuple with the LocalStartDate field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetLocalStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalStartDate, true
}

// SetLocalStartDate sets field value
func (o *MetricRequest) SetLocalStartDate(v string) {
	o.LocalStartDate = v
}

// GetLocalEndDate returns the LocalEndDate field value
func (o *MetricRequest) GetLocalEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalEndDate
}

// GetLocalEndDateOk returns a tuple with the LocalEndDate field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetLocalEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalEndDate, true
}

// SetLocalEndDate sets field value
func (o *MetricRequest) SetLocalEndDate(v string) {
	o.LocalEndDate = v
}

// GetLocalStartDateAdjusted returns the LocalStartDateAdjusted field value
func (o *MetricRequest) GetLocalStartDateAdjusted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalStartDateAdjusted
}

// GetLocalStartDateAdjustedOk returns a tuple with the LocalStartDateAdjusted field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetLocalStartDateAdjustedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalStartDateAdjusted, true
}

// SetLocalStartDateAdjusted sets field value
func (o *MetricRequest) SetLocalStartDateAdjusted(v string) {
	o.LocalStartDateAdjusted = v
}

// GetLocalEndDateAdjusted returns the LocalEndDateAdjusted field value
func (o *MetricRequest) GetLocalEndDateAdjusted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalEndDateAdjusted
}

// GetLocalEndDateAdjustedOk returns a tuple with the LocalEndDateAdjusted field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetLocalEndDateAdjustedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalEndDateAdjusted, true
}

// SetLocalEndDateAdjusted sets field value
func (o *MetricRequest) SetLocalEndDateAdjusted(v string) {
	o.LocalEndDateAdjusted = v
}

// GetCountOfDatePoints returns the CountOfDatePoints field value
func (o *MetricRequest) GetCountOfDatePoints() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CountOfDatePoints
}

// GetCountOfDatePointsOk returns a tuple with the CountOfDatePoints field value
// and a boolean to check if the value has been set.
func (o *MetricRequest) GetCountOfDatePointsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountOfDatePoints, true
}

// SetCountOfDatePoints sets field value
func (o *MetricRequest) SetCountOfDatePoints(v int32) {
	o.CountOfDatePoints = v
}

func (o MetricRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupByProduct) {
		toSerialize["groupByProduct"] = o.GroupByProduct
	}
	if !IsNil(o.GroupByTenant) {
		toSerialize["groupByTenant"] = o.GroupByTenant
	}
	if !IsNil(o.TenantLocators) {
		toSerialize["tenantLocators"] = o.TenantLocators
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if !IsNil(o.TenantType) {
		toSerialize["tenantType"] = o.TenantType
	}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	if !IsNil(o.Periodic) {
		toSerialize["periodic"] = o.Periodic
	}
	if !IsNil(o.Currencies) {
		toSerialize["currencies"] = o.Currencies
	}
	toSerialize["localStartDate"] = o.LocalStartDate
	toSerialize["localEndDate"] = o.LocalEndDate
	toSerialize["localStartDateAdjusted"] = o.LocalStartDateAdjusted
	toSerialize["localEndDateAdjusted"] = o.LocalEndDateAdjusted
	toSerialize["countOfDatePoints"] = o.CountOfDatePoints
	return toSerialize, nil
}

func (o *MetricRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTime",
		"endTime",
		"localStartDate",
		"localEndDate",
		"localStartDateAdjusted",
		"localEndDateAdjusted",
		"countOfDatePoints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricRequest := _MetricRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricRequest)

	if err != nil {
		return err
	}

	*o = MetricRequest(varMetricRequest)

	return err
}

type NullableMetricRequest struct {
	value *MetricRequest
	isSet bool
}

func (v NullableMetricRequest) Get() *MetricRequest {
	return v.value
}

func (v *NullableMetricRequest) Set(val *MetricRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricRequest(val *MetricRequest) *NullableMetricRequest {
	return &NullableMetricRequest{value: val, isSet: true}
}

func (v NullableMetricRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
