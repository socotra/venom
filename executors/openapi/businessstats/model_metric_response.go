/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businessstats

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetricResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricResponse{}

// MetricResponse struct for MetricResponse
type MetricResponse struct {
	Offset    int32       `json:"offset"`
	Count     int32       `json:"count"`
	StartDate string      `json:"startDate"`
	EndDate   string      `json:"endDate"`
	Periodic  string      `json:"periodic"`
	Results   []DataPoint `json:"results"`
}

type _MetricResponse MetricResponse

// NewMetricResponse instantiates a new MetricResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricResponse(offset int32, count int32, startDate string, endDate string, periodic string, results []DataPoint) *MetricResponse {
	this := MetricResponse{}
	this.Offset = offset
	this.Count = count
	this.StartDate = startDate
	this.EndDate = endDate
	this.Periodic = periodic
	this.Results = results
	return &this
}

// NewMetricResponseWithDefaults instantiates a new MetricResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricResponseWithDefaults() *MetricResponse {
	this := MetricResponse{}
	return &this
}

// GetOffset returns the Offset field value
func (o *MetricResponse) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *MetricResponse) SetOffset(v int32) {
	o.Offset = v
}

// GetCount returns the Count field value
func (o *MetricResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *MetricResponse) SetCount(v int32) {
	o.Count = v
}

// GetStartDate returns the StartDate field value
func (o *MetricResponse) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *MetricResponse) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *MetricResponse) GetEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *MetricResponse) SetEndDate(v string) {
	o.EndDate = v
}

// GetPeriodic returns the Periodic field value
func (o *MetricResponse) GetPeriodic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Periodic
}

// GetPeriodicOk returns a tuple with the Periodic field value
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetPeriodicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Periodic, true
}

// SetPeriodic sets field value
func (o *MetricResponse) SetPeriodic(v string) {
	o.Periodic = v
}

// GetResults returns the Results field value
func (o *MetricResponse) GetResults() []DataPoint {
	if o == nil {
		var ret []DataPoint
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *MetricResponse) GetResultsOk() ([]DataPoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *MetricResponse) SetResults(v []DataPoint) {
	o.Results = v
}

func (o MetricResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offset"] = o.Offset
	toSerialize["count"] = o.Count
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate
	toSerialize["periodic"] = o.Periodic
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *MetricResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offset",
		"count",
		"startDate",
		"endDate",
		"periodic",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricResponse := _MetricResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricResponse)

	if err != nil {
		return err
	}

	*o = MetricResponse(varMetricResponse)

	return err
}

type NullableMetricResponse struct {
	value *MetricResponse
	isSet bool
}

func (v NullableMetricResponse) Get() *MetricResponse {
	return v.value
}

func (v *NullableMetricResponse) Set(val *MetricResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricResponse(val *MetricResponse) *NullableMetricResponse {
	return &NullableMetricResponse{value: val, isSet: true}
}

func (v NullableMetricResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
