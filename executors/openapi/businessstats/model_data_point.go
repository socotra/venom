/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businessstats

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataPoint{}

// DataPoint struct for DataPoint
type DataPoint struct {
	ProductName        string  `json:"productName"`
	TenantLocator      string  `json:"tenantLocator"`
	Currency           string  `json:"currency"`
	DataPointStartDate string  `json:"dataPointStartDate"`
	Value              float32 `json:"value"`
}

type _DataPoint DataPoint

// NewDataPoint instantiates a new DataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataPoint(productName string, tenantLocator string, currency string, dataPointStartDate string, value float32) *DataPoint {
	this := DataPoint{}
	this.ProductName = productName
	this.TenantLocator = tenantLocator
	this.Currency = currency
	this.DataPointStartDate = dataPointStartDate
	this.Value = value
	return &this
}

// NewDataPointWithDefaults instantiates a new DataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataPointWithDefaults() *DataPoint {
	this := DataPoint{}
	return &this
}

// GetProductName returns the ProductName field value
func (o *DataPoint) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *DataPoint) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *DataPoint) SetProductName(v string) {
	o.ProductName = v
}

// GetTenantLocator returns the TenantLocator field value
func (o *DataPoint) GetTenantLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantLocator
}

// GetTenantLocatorOk returns a tuple with the TenantLocator field value
// and a boolean to check if the value has been set.
func (o *DataPoint) GetTenantLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantLocator, true
}

// SetTenantLocator sets field value
func (o *DataPoint) SetTenantLocator(v string) {
	o.TenantLocator = v
}

// GetCurrency returns the Currency field value
func (o *DataPoint) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *DataPoint) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *DataPoint) SetCurrency(v string) {
	o.Currency = v
}

// GetDataPointStartDate returns the DataPointStartDate field value
func (o *DataPoint) GetDataPointStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataPointStartDate
}

// GetDataPointStartDateOk returns a tuple with the DataPointStartDate field value
// and a boolean to check if the value has been set.
func (o *DataPoint) GetDataPointStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataPointStartDate, true
}

// SetDataPointStartDate sets field value
func (o *DataPoint) SetDataPointStartDate(v string) {
	o.DataPointStartDate = v
}

// GetValue returns the Value field value
func (o *DataPoint) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DataPoint) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DataPoint) SetValue(v float32) {
	o.Value = v
}

func (o DataPoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productName"] = o.ProductName
	toSerialize["tenantLocator"] = o.TenantLocator
	toSerialize["currency"] = o.Currency
	toSerialize["dataPointStartDate"] = o.DataPointStartDate
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *DataPoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productName",
		"tenantLocator",
		"currency",
		"dataPointStartDate",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataPoint := _DataPoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataPoint)

	if err != nil {
		return err
	}

	*o = DataPoint(varDataPoint)

	return err
}

type NullableDataPoint struct {
	value *DataPoint
	isSet bool
}

func (v NullableDataPoint) Get() *DataPoint {
	return v.value
}

func (v *NullableDataPoint) Set(val *DataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataPoint(val *DataPoint) *NullableDataPoint {
	return &NullableDataPoint{value: val, isSet: true}
}

func (v NullableDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
