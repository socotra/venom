/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businessstats

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeltaFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeltaFile{}

// DeltaFile struct for DeltaFile
type DeltaFile struct {
	DeltaFileType  string `json:"deltaFileType"`
	FileName       string `json:"fileName"`
	JobStartTime   int64  `json:"jobStartTime"`
	JobEndTime     int64  `json:"jobEndTime"`
	GenerationTime int64  `json:"generationTime"`
}

type _DeltaFile DeltaFile

// NewDeltaFile instantiates a new DeltaFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeltaFile(deltaFileType string, fileName string, jobStartTime int64, jobEndTime int64, generationTime int64) *DeltaFile {
	this := DeltaFile{}
	this.DeltaFileType = deltaFileType
	this.FileName = fileName
	this.JobStartTime = jobStartTime
	this.JobEndTime = jobEndTime
	this.GenerationTime = generationTime
	return &this
}

// NewDeltaFileWithDefaults instantiates a new DeltaFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeltaFileWithDefaults() *DeltaFile {
	this := DeltaFile{}
	return &this
}

// GetDeltaFileType returns the DeltaFileType field value
func (o *DeltaFile) GetDeltaFileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeltaFileType
}

// GetDeltaFileTypeOk returns a tuple with the DeltaFileType field value
// and a boolean to check if the value has been set.
func (o *DeltaFile) GetDeltaFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeltaFileType, true
}

// SetDeltaFileType sets field value
func (o *DeltaFile) SetDeltaFileType(v string) {
	o.DeltaFileType = v
}

// GetFileName returns the FileName field value
func (o *DeltaFile) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *DeltaFile) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *DeltaFile) SetFileName(v string) {
	o.FileName = v
}

// GetJobStartTime returns the JobStartTime field value
func (o *DeltaFile) GetJobStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.JobStartTime
}

// GetJobStartTimeOk returns a tuple with the JobStartTime field value
// and a boolean to check if the value has been set.
func (o *DeltaFile) GetJobStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobStartTime, true
}

// SetJobStartTime sets field value
func (o *DeltaFile) SetJobStartTime(v int64) {
	o.JobStartTime = v
}

// GetJobEndTime returns the JobEndTime field value
func (o *DeltaFile) GetJobEndTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.JobEndTime
}

// GetJobEndTimeOk returns a tuple with the JobEndTime field value
// and a boolean to check if the value has been set.
func (o *DeltaFile) GetJobEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobEndTime, true
}

// SetJobEndTime sets field value
func (o *DeltaFile) SetJobEndTime(v int64) {
	o.JobEndTime = v
}

// GetGenerationTime returns the GenerationTime field value
func (o *DeltaFile) GetGenerationTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GenerationTime
}

// GetGenerationTimeOk returns a tuple with the GenerationTime field value
// and a boolean to check if the value has been set.
func (o *DeltaFile) GetGenerationTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerationTime, true
}

// SetGenerationTime sets field value
func (o *DeltaFile) SetGenerationTime(v int64) {
	o.GenerationTime = v
}

func (o DeltaFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeltaFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deltaFileType"] = o.DeltaFileType
	toSerialize["fileName"] = o.FileName
	toSerialize["jobStartTime"] = o.JobStartTime
	toSerialize["jobEndTime"] = o.JobEndTime
	toSerialize["generationTime"] = o.GenerationTime
	return toSerialize, nil
}

func (o *DeltaFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deltaFileType",
		"fileName",
		"jobStartTime",
		"jobEndTime",
		"generationTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeltaFile := _DeltaFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeltaFile)

	if err != nil {
		return err
	}

	*o = DeltaFile(varDeltaFile)

	return err
}

type NullableDeltaFile struct {
	value *DeltaFile
	isSet bool
}

func (v NullableDeltaFile) Get() *DeltaFile {
	return v.value
}

func (v *NullableDeltaFile) Set(val *DeltaFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDeltaFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDeltaFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeltaFile(val *DeltaFile) *NullableDeltaFile {
	return &NullableDeltaFile{value: val, isSet: true}
}

func (v NullableDeltaFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeltaFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
