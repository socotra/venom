/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ElementRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElementRef{}

// ElementRef struct for ElementRef
type ElementRef struct {
	Extend   string `json:"extend"`
	Abstract bool   `json:"abstract"`
	// Deprecated
	PluralType        string                 `json:"pluralType"`
	DisplayName       string                 `json:"displayName"`
	CoverageTerms     []string               `json:"coverageTerms"`
	Contents          []string               `json:"contents"`
	Charges           []string               `json:"charges"`
	DefaultSearchable bool                   `json:"defaultSearchable"`
	Data              map[string]PropertyRef `json:"data"`
	Availability      *AvailabilityRef       `json:"availability,omitempty"`
}

type _ElementRef ElementRef

// NewElementRef instantiates a new ElementRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementRef(extend string, abstract bool, pluralType string, displayName string, coverageTerms []string, contents []string, charges []string, defaultSearchable bool, data map[string]PropertyRef) *ElementRef {
	this := ElementRef{}
	this.Extend = extend
	this.Abstract = abstract
	this.PluralType = pluralType
	this.DisplayName = displayName
	this.CoverageTerms = coverageTerms
	this.Contents = contents
	this.Charges = charges
	this.DefaultSearchable = defaultSearchable
	this.Data = data
	return &this
}

// NewElementRefWithDefaults instantiates a new ElementRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementRefWithDefaults() *ElementRef {
	this := ElementRef{}
	return &this
}

// GetExtend returns the Extend field value
func (o *ElementRef) GetExtend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extend
}

// GetExtendOk returns a tuple with the Extend field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetExtendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extend, true
}

// SetExtend sets field value
func (o *ElementRef) SetExtend(v string) {
	o.Extend = v
}

// GetAbstract returns the Abstract field value
func (o *ElementRef) GetAbstract() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetAbstractOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abstract, true
}

// SetAbstract sets field value
func (o *ElementRef) SetAbstract(v bool) {
	o.Abstract = v
}

// GetPluralType returns the PluralType field value
// Deprecated
func (o *ElementRef) GetPluralType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluralType
}

// GetPluralTypeOk returns a tuple with the PluralType field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *ElementRef) GetPluralTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluralType, true
}

// SetPluralType sets field value
// Deprecated
func (o *ElementRef) SetPluralType(v string) {
	o.PluralType = v
}

// GetDisplayName returns the DisplayName field value
func (o *ElementRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ElementRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCoverageTerms returns the CoverageTerms field value
func (o *ElementRef) GetCoverageTerms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CoverageTerms
}

// GetCoverageTermsOk returns a tuple with the CoverageTerms field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetCoverageTermsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverageTerms, true
}

// SetCoverageTerms sets field value
func (o *ElementRef) SetCoverageTerms(v []string) {
	o.CoverageTerms = v
}

// GetContents returns the Contents field value
func (o *ElementRef) GetContents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetContentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *ElementRef) SetContents(v []string) {
	o.Contents = v
}

// GetCharges returns the Charges field value
func (o *ElementRef) GetCharges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetChargesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Charges, true
}

// SetCharges sets field value
func (o *ElementRef) SetCharges(v []string) {
	o.Charges = v
}

// GetDefaultSearchable returns the DefaultSearchable field value
func (o *ElementRef) GetDefaultSearchable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DefaultSearchable
}

// GetDefaultSearchableOk returns a tuple with the DefaultSearchable field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetDefaultSearchableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultSearchable, true
}

// SetDefaultSearchable sets field value
func (o *ElementRef) SetDefaultSearchable(v bool) {
	o.DefaultSearchable = v
}

// GetData returns the Data field value
func (o *ElementRef) GetData() map[string]PropertyRef {
	if o == nil {
		var ret map[string]PropertyRef
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ElementRef) GetDataOk() (*map[string]PropertyRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ElementRef) SetData(v map[string]PropertyRef) {
	o.Data = v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *ElementRef) GetAvailability() AvailabilityRef {
	if o == nil || IsNil(o.Availability) {
		var ret AvailabilityRef
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementRef) GetAvailabilityOk() (*AvailabilityRef, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *ElementRef) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given AvailabilityRef and assigns it to the Availability field.
func (o *ElementRef) SetAvailability(v AvailabilityRef) {
	o.Availability = &v
}

func (o ElementRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElementRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extend"] = o.Extend
	toSerialize["abstract"] = o.Abstract
	toSerialize["pluralType"] = o.PluralType
	toSerialize["displayName"] = o.DisplayName
	toSerialize["coverageTerms"] = o.CoverageTerms
	toSerialize["contents"] = o.Contents
	toSerialize["charges"] = o.Charges
	toSerialize["defaultSearchable"] = o.DefaultSearchable
	toSerialize["data"] = o.Data
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	return toSerialize, nil
}

func (o *ElementRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extend",
		"abstract",
		"pluralType",
		"displayName",
		"coverageTerms",
		"contents",
		"charges",
		"defaultSearchable",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varElementRef := _ElementRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varElementRef)

	if err != nil {
		return err
	}

	*o = ElementRef(varElementRef)

	return err
}

type NullableElementRef struct {
	value *ElementRef
	isSet bool
}

func (v NullableElementRef) Get() *ElementRef {
	return v.value
}

func (v *NullableElementRef) Set(val *ElementRef) {
	v.value = val
	v.isSet = true
}

func (v NullableElementRef) IsSet() bool {
	return v.isSet
}

func (v *NullableElementRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementRef(val *ElementRef) *NullableElementRef {
	return &NullableElementRef{value: val, isSet: true}
}

func (v NullableElementRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
