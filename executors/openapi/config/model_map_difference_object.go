/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MapDifferenceObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapDifferenceObject{}

// MapDifferenceObject struct for MapDifferenceObject
type MapDifferenceObject struct {
	Added    map[string]map[string]interface{} `json:"added"`
	Modified map[string]map[string]interface{} `json:"modified"`
	Removed  map[string]map[string]interface{} `json:"removed"`
}

type _MapDifferenceObject MapDifferenceObject

// NewMapDifferenceObject instantiates a new MapDifferenceObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapDifferenceObject(added map[string]map[string]interface{}, modified map[string]map[string]interface{}, removed map[string]map[string]interface{}) *MapDifferenceObject {
	this := MapDifferenceObject{}
	this.Added = added
	this.Modified = modified
	this.Removed = removed
	return &this
}

// NewMapDifferenceObjectWithDefaults instantiates a new MapDifferenceObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapDifferenceObjectWithDefaults() *MapDifferenceObject {
	this := MapDifferenceObject{}
	return &this
}

// GetAdded returns the Added field value
func (o *MapDifferenceObject) GetAdded() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Added
}

// GetAddedOk returns a tuple with the Added field value
// and a boolean to check if the value has been set.
func (o *MapDifferenceObject) GetAddedOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Added, true
}

// SetAdded sets field value
func (o *MapDifferenceObject) SetAdded(v map[string]map[string]interface{}) {
	o.Added = v
}

// GetModified returns the Modified field value
func (o *MapDifferenceObject) GetModified() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *MapDifferenceObject) GetModifiedOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Modified, true
}

// SetModified sets field value
func (o *MapDifferenceObject) SetModified(v map[string]map[string]interface{}) {
	o.Modified = v
}

// GetRemoved returns the Removed field value
func (o *MapDifferenceObject) GetRemoved() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *MapDifferenceObject) GetRemovedOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Removed, true
}

// SetRemoved sets field value
func (o *MapDifferenceObject) SetRemoved(v map[string]map[string]interface{}) {
	o.Removed = v
}

func (o MapDifferenceObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapDifferenceObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["added"] = o.Added
	toSerialize["modified"] = o.Modified
	toSerialize["removed"] = o.Removed
	return toSerialize, nil
}

func (o *MapDifferenceObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"added",
		"modified",
		"removed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapDifferenceObject := _MapDifferenceObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMapDifferenceObject)

	if err != nil {
		return err
	}

	*o = MapDifferenceObject(varMapDifferenceObject)

	return err
}

type NullableMapDifferenceObject struct {
	value *MapDifferenceObject
	isSet bool
}

func (v NullableMapDifferenceObject) Get() *MapDifferenceObject {
	return v.value
}

func (v *NullableMapDifferenceObject) Set(val *MapDifferenceObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMapDifferenceObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMapDifferenceObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapDifferenceObject(val *MapDifferenceObject) *NullableMapDifferenceObject {
	return &NullableMapDifferenceObject{value: val, isSet: true}
}

func (v NullableMapDifferenceObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapDifferenceObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
