/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionTypeRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionTypeRef{}

// TransactionTypeRef struct for TransactionTypeRef
type TransactionTypeRef struct {
	Category    string `json:"category"`
	CostBearing bool   `json:"costBearing"`
}

type _TransactionTypeRef TransactionTypeRef

// NewTransactionTypeRef instantiates a new TransactionTypeRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionTypeRef(category string, costBearing bool) *TransactionTypeRef {
	this := TransactionTypeRef{}
	this.Category = category
	this.CostBearing = costBearing
	return &this
}

// NewTransactionTypeRefWithDefaults instantiates a new TransactionTypeRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionTypeRefWithDefaults() *TransactionTypeRef {
	this := TransactionTypeRef{}
	return &this
}

// GetCategory returns the Category field value
func (o *TransactionTypeRef) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *TransactionTypeRef) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *TransactionTypeRef) SetCategory(v string) {
	o.Category = v
}

// GetCostBearing returns the CostBearing field value
func (o *TransactionTypeRef) GetCostBearing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CostBearing
}

// GetCostBearingOk returns a tuple with the CostBearing field value
// and a boolean to check if the value has been set.
func (o *TransactionTypeRef) GetCostBearingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostBearing, true
}

// SetCostBearing sets field value
func (o *TransactionTypeRef) SetCostBearing(v bool) {
	o.CostBearing = v
}

func (o TransactionTypeRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionTypeRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["costBearing"] = o.CostBearing
	return toSerialize, nil
}

func (o *TransactionTypeRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"costBearing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionTypeRef := _TransactionTypeRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionTypeRef)

	if err != nil {
		return err
	}

	*o = TransactionTypeRef(varTransactionTypeRef)

	return err
}

type NullableTransactionTypeRef struct {
	value *TransactionTypeRef
	isSet bool
}

func (v NullableTransactionTypeRef) Get() *TransactionTypeRef {
	return v.value
}

func (v *NullableTransactionTypeRef) Set(val *TransactionTypeRef) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionTypeRef) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionTypeRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionTypeRef(val *TransactionTypeRef) *NullableTransactionTypeRef {
	return &NullableTransactionTypeRef{value: val, isSet: true}
}

func (v NullableTransactionTypeRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionTypeRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
