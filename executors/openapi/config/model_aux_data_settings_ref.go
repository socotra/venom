/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuxDataSettingsRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuxDataSettingsRef{}

// AuxDataSettingsRef struct for AuxDataSettingsRef
type AuxDataSettingsRef struct {
	DisplayName      string `json:"displayName"`
	ExpirationPeriod int32  `json:"expirationPeriod"`
}

type _AuxDataSettingsRef AuxDataSettingsRef

// NewAuxDataSettingsRef instantiates a new AuxDataSettingsRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuxDataSettingsRef(displayName string, expirationPeriod int32) *AuxDataSettingsRef {
	this := AuxDataSettingsRef{}
	this.DisplayName = displayName
	this.ExpirationPeriod = expirationPeriod
	return &this
}

// NewAuxDataSettingsRefWithDefaults instantiates a new AuxDataSettingsRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuxDataSettingsRefWithDefaults() *AuxDataSettingsRef {
	this := AuxDataSettingsRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *AuxDataSettingsRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *AuxDataSettingsRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *AuxDataSettingsRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetExpirationPeriod returns the ExpirationPeriod field value
func (o *AuxDataSettingsRef) GetExpirationPeriod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpirationPeriod
}

// GetExpirationPeriodOk returns a tuple with the ExpirationPeriod field value
// and a boolean to check if the value has been set.
func (o *AuxDataSettingsRef) GetExpirationPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationPeriod, true
}

// SetExpirationPeriod sets field value
func (o *AuxDataSettingsRef) SetExpirationPeriod(v int32) {
	o.ExpirationPeriod = v
}

func (o AuxDataSettingsRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuxDataSettingsRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["expirationPeriod"] = o.ExpirationPeriod
	return toSerialize, nil
}

func (o *AuxDataSettingsRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"expirationPeriod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuxDataSettingsRef := _AuxDataSettingsRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuxDataSettingsRef)

	if err != nil {
		return err
	}

	*o = AuxDataSettingsRef(varAuxDataSettingsRef)

	return err
}

type NullableAuxDataSettingsRef struct {
	value *AuxDataSettingsRef
	isSet bool
}

func (v NullableAuxDataSettingsRef) Get() *AuxDataSettingsRef {
	return v.value
}

func (v *NullableAuxDataSettingsRef) Set(val *AuxDataSettingsRef) {
	v.value = val
	v.isSet = true
}

func (v NullableAuxDataSettingsRef) IsSet() bool {
	return v.isSet
}

func (v *NullableAuxDataSettingsRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuxDataSettingsRef(val *AuxDataSettingsRef) *NullableAuxDataSettingsRef {
	return &NullableAuxDataSettingsRef{value: val, isSet: true}
}

func (v NullableAuxDataSettingsRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuxDataSettingsRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
