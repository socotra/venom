/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChargeRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeRef{}

// ChargeRef struct for ChargeRef
type ChargeRef struct {
	// Deprecated
	DisplayName string `json:"displayName"`
	Category    string `json:"category"`
	Handling    string `json:"handling"`
	Invoicing   string `json:"invoicing"`
}

type _ChargeRef ChargeRef

// NewChargeRef instantiates a new ChargeRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeRef(displayName string, category string, handling string, invoicing string) *ChargeRef {
	this := ChargeRef{}
	this.DisplayName = displayName
	this.Category = category
	this.Handling = handling
	this.Invoicing = invoicing
	return &this
}

// NewChargeRefWithDefaults instantiates a new ChargeRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeRefWithDefaults() *ChargeRef {
	this := ChargeRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
// Deprecated
func (o *ChargeRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *ChargeRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
// Deprecated
func (o *ChargeRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCategory returns the Category field value
func (o *ChargeRef) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ChargeRef) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ChargeRef) SetCategory(v string) {
	o.Category = v
}

// GetHandling returns the Handling field value
func (o *ChargeRef) GetHandling() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handling
}

// GetHandlingOk returns a tuple with the Handling field value
// and a boolean to check if the value has been set.
func (o *ChargeRef) GetHandlingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handling, true
}

// SetHandling sets field value
func (o *ChargeRef) SetHandling(v string) {
	o.Handling = v
}

// GetInvoicing returns the Invoicing field value
func (o *ChargeRef) GetInvoicing() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Invoicing
}

// GetInvoicingOk returns a tuple with the Invoicing field value
// and a boolean to check if the value has been set.
func (o *ChargeRef) GetInvoicingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Invoicing, true
}

// SetInvoicing sets field value
func (o *ChargeRef) SetInvoicing(v string) {
	o.Invoicing = v
}

func (o ChargeRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["category"] = o.Category
	toSerialize["handling"] = o.Handling
	toSerialize["invoicing"] = o.Invoicing
	return toSerialize, nil
}

func (o *ChargeRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"category",
		"handling",
		"invoicing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeRef := _ChargeRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeRef)

	if err != nil {
		return err
	}

	*o = ChargeRef(varChargeRef)

	return err
}

type NullableChargeRef struct {
	value *ChargeRef
	isSet bool
}

func (v NullableChargeRef) Get() *ChargeRef {
	return v.value
}

func (v *NullableChargeRef) Set(val *ChargeRef) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeRef) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeRef(val *ChargeRef) *NullableChargeRef {
	return &NullableChargeRef{value: val, isSet: true}
}

func (v NullableChargeRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
