/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FnolRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FnolRef{}

// FnolRef struct for FnolRef
type FnolRef struct {
	Extend            string                 `json:"extend"`
	Abstract          bool                   `json:"abstract"`
	LossTypes         []string               `json:"lossTypes"`
	DefaultSearchable bool                   `json:"defaultSearchable"`
	Data              map[string]PropertyRef `json:"data"`
	NumberingPlan     string                 `json:"numberingPlan"`
	Contacts          map[string][]string    `json:"contacts"`
}

type _FnolRef FnolRef

// NewFnolRef instantiates a new FnolRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFnolRef(extend string, abstract bool, lossTypes []string, defaultSearchable bool, data map[string]PropertyRef, numberingPlan string, contacts map[string][]string) *FnolRef {
	this := FnolRef{}
	this.Extend = extend
	this.Abstract = abstract
	this.LossTypes = lossTypes
	this.DefaultSearchable = defaultSearchable
	this.Data = data
	this.NumberingPlan = numberingPlan
	this.Contacts = contacts
	return &this
}

// NewFnolRefWithDefaults instantiates a new FnolRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFnolRefWithDefaults() *FnolRef {
	this := FnolRef{}
	return &this
}

// GetExtend returns the Extend field value
func (o *FnolRef) GetExtend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extend
}

// GetExtendOk returns a tuple with the Extend field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetExtendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extend, true
}

// SetExtend sets field value
func (o *FnolRef) SetExtend(v string) {
	o.Extend = v
}

// GetAbstract returns the Abstract field value
func (o *FnolRef) GetAbstract() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetAbstractOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abstract, true
}

// SetAbstract sets field value
func (o *FnolRef) SetAbstract(v bool) {
	o.Abstract = v
}

// GetLossTypes returns the LossTypes field value
func (o *FnolRef) GetLossTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LossTypes
}

// GetLossTypesOk returns a tuple with the LossTypes field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetLossTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LossTypes, true
}

// SetLossTypes sets field value
func (o *FnolRef) SetLossTypes(v []string) {
	o.LossTypes = v
}

// GetDefaultSearchable returns the DefaultSearchable field value
func (o *FnolRef) GetDefaultSearchable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DefaultSearchable
}

// GetDefaultSearchableOk returns a tuple with the DefaultSearchable field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetDefaultSearchableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultSearchable, true
}

// SetDefaultSearchable sets field value
func (o *FnolRef) SetDefaultSearchable(v bool) {
	o.DefaultSearchable = v
}

// GetData returns the Data field value
func (o *FnolRef) GetData() map[string]PropertyRef {
	if o == nil {
		var ret map[string]PropertyRef
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetDataOk() (*map[string]PropertyRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *FnolRef) SetData(v map[string]PropertyRef) {
	o.Data = v
}

// GetNumberingPlan returns the NumberingPlan field value
func (o *FnolRef) GetNumberingPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NumberingPlan
}

// GetNumberingPlanOk returns a tuple with the NumberingPlan field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetNumberingPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberingPlan, true
}

// SetNumberingPlan sets field value
func (o *FnolRef) SetNumberingPlan(v string) {
	o.NumberingPlan = v
}

// GetContacts returns the Contacts field value
func (o *FnolRef) GetContacts() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value
// and a boolean to check if the value has been set.
func (o *FnolRef) GetContactsOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contacts, true
}

// SetContacts sets field value
func (o *FnolRef) SetContacts(v map[string][]string) {
	o.Contacts = v
}

func (o FnolRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FnolRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extend"] = o.Extend
	toSerialize["abstract"] = o.Abstract
	toSerialize["lossTypes"] = o.LossTypes
	toSerialize["defaultSearchable"] = o.DefaultSearchable
	toSerialize["data"] = o.Data
	toSerialize["numberingPlan"] = o.NumberingPlan
	toSerialize["contacts"] = o.Contacts
	return toSerialize, nil
}

func (o *FnolRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extend",
		"abstract",
		"lossTypes",
		"defaultSearchable",
		"data",
		"numberingPlan",
		"contacts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFnolRef := _FnolRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFnolRef)

	if err != nil {
		return err
	}

	*o = FnolRef(varFnolRef)

	return err
}

type NullableFnolRef struct {
	value *FnolRef
	isSet bool
}

func (v NullableFnolRef) Get() *FnolRef {
	return v.value
}

func (v *NullableFnolRef) Set(val *FnolRef) {
	v.value = val
	v.isSet = true
}

func (v NullableFnolRef) IsSet() bool {
	return v.isSet
}

func (v *NullableFnolRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFnolRef(val *FnolRef) *NullableFnolRef {
	return &NullableFnolRef{value: val, isSet: true}
}

func (v NullableFnolRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFnolRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
