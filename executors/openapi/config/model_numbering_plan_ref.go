/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NumberingPlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberingPlanRef{}

// NumberingPlanRef struct for NumberingPlanRef
type NumberingPlanRef struct {
	DisplayName            string `json:"displayName"`
	InitialCoreNumber      string `json:"initialCoreNumber"`
	Format                 string `json:"format"`
	CopyFromQuote          bool   `json:"copyFromQuote"`
	TermNumberFormat       string `json:"termNumberFormat"`
	QuoteNumberFormat      string `json:"quoteNumberFormat"`
	InitialQuoteCoreNumber string `json:"initialQuoteCoreNumber"`
}

type _NumberingPlanRef NumberingPlanRef

// NewNumberingPlanRef instantiates a new NumberingPlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberingPlanRef(displayName string, initialCoreNumber string, format string, copyFromQuote bool, termNumberFormat string, quoteNumberFormat string, initialQuoteCoreNumber string) *NumberingPlanRef {
	this := NumberingPlanRef{}
	this.DisplayName = displayName
	this.InitialCoreNumber = initialCoreNumber
	this.Format = format
	this.CopyFromQuote = copyFromQuote
	this.TermNumberFormat = termNumberFormat
	this.QuoteNumberFormat = quoteNumberFormat
	this.InitialQuoteCoreNumber = initialQuoteCoreNumber
	return &this
}

// NewNumberingPlanRefWithDefaults instantiates a new NumberingPlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberingPlanRefWithDefaults() *NumberingPlanRef {
	this := NumberingPlanRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *NumberingPlanRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *NumberingPlanRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetInitialCoreNumber returns the InitialCoreNumber field value
func (o *NumberingPlanRef) GetInitialCoreNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitialCoreNumber
}

// GetInitialCoreNumberOk returns a tuple with the InitialCoreNumber field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetInitialCoreNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialCoreNumber, true
}

// SetInitialCoreNumber sets field value
func (o *NumberingPlanRef) SetInitialCoreNumber(v string) {
	o.InitialCoreNumber = v
}

// GetFormat returns the Format field value
func (o *NumberingPlanRef) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *NumberingPlanRef) SetFormat(v string) {
	o.Format = v
}

// GetCopyFromQuote returns the CopyFromQuote field value
func (o *NumberingPlanRef) GetCopyFromQuote() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CopyFromQuote
}

// GetCopyFromQuoteOk returns a tuple with the CopyFromQuote field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetCopyFromQuoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CopyFromQuote, true
}

// SetCopyFromQuote sets field value
func (o *NumberingPlanRef) SetCopyFromQuote(v bool) {
	o.CopyFromQuote = v
}

// GetTermNumberFormat returns the TermNumberFormat field value
func (o *NumberingPlanRef) GetTermNumberFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TermNumberFormat
}

// GetTermNumberFormatOk returns a tuple with the TermNumberFormat field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetTermNumberFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermNumberFormat, true
}

// SetTermNumberFormat sets field value
func (o *NumberingPlanRef) SetTermNumberFormat(v string) {
	o.TermNumberFormat = v
}

// GetQuoteNumberFormat returns the QuoteNumberFormat field value
func (o *NumberingPlanRef) GetQuoteNumberFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteNumberFormat
}

// GetQuoteNumberFormatOk returns a tuple with the QuoteNumberFormat field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetQuoteNumberFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteNumberFormat, true
}

// SetQuoteNumberFormat sets field value
func (o *NumberingPlanRef) SetQuoteNumberFormat(v string) {
	o.QuoteNumberFormat = v
}

// GetInitialQuoteCoreNumber returns the InitialQuoteCoreNumber field value
func (o *NumberingPlanRef) GetInitialQuoteCoreNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitialQuoteCoreNumber
}

// GetInitialQuoteCoreNumberOk returns a tuple with the InitialQuoteCoreNumber field value
// and a boolean to check if the value has been set.
func (o *NumberingPlanRef) GetInitialQuoteCoreNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialQuoteCoreNumber, true
}

// SetInitialQuoteCoreNumber sets field value
func (o *NumberingPlanRef) SetInitialQuoteCoreNumber(v string) {
	o.InitialQuoteCoreNumber = v
}

func (o NumberingPlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberingPlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["initialCoreNumber"] = o.InitialCoreNumber
	toSerialize["format"] = o.Format
	toSerialize["copyFromQuote"] = o.CopyFromQuote
	toSerialize["termNumberFormat"] = o.TermNumberFormat
	toSerialize["quoteNumberFormat"] = o.QuoteNumberFormat
	toSerialize["initialQuoteCoreNumber"] = o.InitialQuoteCoreNumber
	return toSerialize, nil
}

func (o *NumberingPlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"initialCoreNumber",
		"format",
		"copyFromQuote",
		"termNumberFormat",
		"quoteNumberFormat",
		"initialQuoteCoreNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNumberingPlanRef := _NumberingPlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNumberingPlanRef)

	if err != nil {
		return err
	}

	*o = NumberingPlanRef(varNumberingPlanRef)

	return err
}

type NullableNumberingPlanRef struct {
	value *NumberingPlanRef
	isSet bool
}

func (v NullableNumberingPlanRef) Get() *NumberingPlanRef {
	return v.value
}

func (v *NullableNumberingPlanRef) Set(val *NumberingPlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberingPlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberingPlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberingPlanRef(val *NumberingPlanRef) *NullableNumberingPlanRef {
	return &NullableNumberingPlanRef{value: val, isSet: true}
}

func (v NullableNumberingPlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberingPlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
