/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ColumnRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColumnRef{}

// ColumnRef struct for ColumnRef
type ColumnRef struct {
	DataType string `json:"dataType"`
	IsKey    bool   `json:"isKey"`
}

type _ColumnRef ColumnRef

// NewColumnRef instantiates a new ColumnRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnRef(dataType string, isKey bool) *ColumnRef {
	this := ColumnRef{}
	this.DataType = dataType
	this.IsKey = isKey
	return &this
}

// NewColumnRefWithDefaults instantiates a new ColumnRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnRefWithDefaults() *ColumnRef {
	this := ColumnRef{}
	return &this
}

// GetDataType returns the DataType field value
func (o *ColumnRef) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *ColumnRef) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *ColumnRef) SetDataType(v string) {
	o.DataType = v
}

// GetIsKey returns the IsKey field value
func (o *ColumnRef) GetIsKey() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsKey
}

// GetIsKeyOk returns a tuple with the IsKey field value
// and a boolean to check if the value has been set.
func (o *ColumnRef) GetIsKeyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsKey, true
}

// SetIsKey sets field value
func (o *ColumnRef) SetIsKey(v bool) {
	o.IsKey = v
}

func (o ColumnRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColumnRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataType"] = o.DataType
	toSerialize["isKey"] = o.IsKey
	return toSerialize, nil
}

func (o *ColumnRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataType",
		"isKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColumnRef := _ColumnRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColumnRef)

	if err != nil {
		return err
	}

	*o = ColumnRef(varColumnRef)

	return err
}

type NullableColumnRef struct {
	value *ColumnRef
	isSet bool
}

func (v NullableColumnRef) Get() *ColumnRef {
	return v.value
}

func (v *NullableColumnRef) Set(val *ColumnRef) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnRef) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnRef(val *ColumnRef) *NullableColumnRef {
	return &NullableColumnRef{value: val, isSet: true}
}

func (v NullableColumnRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
