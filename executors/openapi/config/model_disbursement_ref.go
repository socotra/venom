/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DisbursementRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisbursementRef{}

// DisbursementRef struct for DisbursementRef
type DisbursementRef struct {
	DisplayName   string                 `json:"displayName"`
	Abstract      bool                   `json:"abstract"`
	Extend        string                 `json:"extend"`
	Data          map[string]PropertyRef `json:"data"`
	NumberingPlan string                 `json:"numberingPlan"`
}

type _DisbursementRef DisbursementRef

// NewDisbursementRef instantiates a new DisbursementRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisbursementRef(displayName string, abstract bool, extend string, data map[string]PropertyRef, numberingPlan string) *DisbursementRef {
	this := DisbursementRef{}
	this.DisplayName = displayName
	this.Abstract = abstract
	this.Extend = extend
	this.Data = data
	this.NumberingPlan = numberingPlan
	return &this
}

// NewDisbursementRefWithDefaults instantiates a new DisbursementRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisbursementRefWithDefaults() *DisbursementRef {
	this := DisbursementRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *DisbursementRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *DisbursementRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *DisbursementRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetAbstract returns the Abstract field value
func (o *DisbursementRef) GetAbstract() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value
// and a boolean to check if the value has been set.
func (o *DisbursementRef) GetAbstractOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abstract, true
}

// SetAbstract sets field value
func (o *DisbursementRef) SetAbstract(v bool) {
	o.Abstract = v
}

// GetExtend returns the Extend field value
func (o *DisbursementRef) GetExtend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extend
}

// GetExtendOk returns a tuple with the Extend field value
// and a boolean to check if the value has been set.
func (o *DisbursementRef) GetExtendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extend, true
}

// SetExtend sets field value
func (o *DisbursementRef) SetExtend(v string) {
	o.Extend = v
}

// GetData returns the Data field value
func (o *DisbursementRef) GetData() map[string]PropertyRef {
	if o == nil {
		var ret map[string]PropertyRef
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DisbursementRef) GetDataOk() (*map[string]PropertyRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DisbursementRef) SetData(v map[string]PropertyRef) {
	o.Data = v
}

// GetNumberingPlan returns the NumberingPlan field value
func (o *DisbursementRef) GetNumberingPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NumberingPlan
}

// GetNumberingPlanOk returns a tuple with the NumberingPlan field value
// and a boolean to check if the value has been set.
func (o *DisbursementRef) GetNumberingPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberingPlan, true
}

// SetNumberingPlan sets field value
func (o *DisbursementRef) SetNumberingPlan(v string) {
	o.NumberingPlan = v
}

func (o DisbursementRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisbursementRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["abstract"] = o.Abstract
	toSerialize["extend"] = o.Extend
	toSerialize["data"] = o.Data
	toSerialize["numberingPlan"] = o.NumberingPlan
	return toSerialize, nil
}

func (o *DisbursementRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"abstract",
		"extend",
		"data",
		"numberingPlan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisbursementRef := _DisbursementRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisbursementRef)

	if err != nil {
		return err
	}

	*o = DisbursementRef(varDisbursementRef)

	return err
}

type NullableDisbursementRef struct {
	value *DisbursementRef
	isSet bool
}

func (v NullableDisbursementRef) Get() *DisbursementRef {
	return v.value
}

func (v *NullableDisbursementRef) Set(val *DisbursementRef) {
	v.value = val
	v.isSet = true
}

func (v NullableDisbursementRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDisbursementRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisbursementRef(val *DisbursementRef) *NullableDisbursementRef {
	return &NullableDisbursementRef{value: val, isSet: true}
}

func (v NullableDisbursementRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisbursementRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
