/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CoverageTermRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverageTermRef{}

// CoverageTermRef struct for CoverageTermRef
type CoverageTermRef struct {
	Type         string                           `json:"type"`
	DisplayName  string                           `json:"displayName"`
	Options      map[string]CoverageTermOptionRef `json:"options"`
	Value        PropertyRef                      `json:"value"`
	Availability *AvailabilityRef                 `json:"availability,omitempty"`
}

type _CoverageTermRef CoverageTermRef

// NewCoverageTermRef instantiates a new CoverageTermRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverageTermRef(type_ string, displayName string, options map[string]CoverageTermOptionRef, value PropertyRef) *CoverageTermRef {
	this := CoverageTermRef{}
	this.Type = type_
	this.DisplayName = displayName
	this.Options = options
	this.Value = value
	return &this
}

// NewCoverageTermRefWithDefaults instantiates a new CoverageTermRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverageTermRefWithDefaults() *CoverageTermRef {
	this := CoverageTermRef{}
	return &this
}

// GetType returns the Type field value
func (o *CoverageTermRef) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CoverageTermRef) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CoverageTermRef) SetType(v string) {
	o.Type = v
}

// GetDisplayName returns the DisplayName field value
func (o *CoverageTermRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CoverageTermRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CoverageTermRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetOptions returns the Options field value
func (o *CoverageTermRef) GetOptions() map[string]CoverageTermOptionRef {
	if o == nil {
		var ret map[string]CoverageTermOptionRef
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *CoverageTermRef) GetOptionsOk() (*map[string]CoverageTermOptionRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *CoverageTermRef) SetOptions(v map[string]CoverageTermOptionRef) {
	o.Options = v
}

// GetValue returns the Value field value
func (o *CoverageTermRef) GetValue() PropertyRef {
	if o == nil {
		var ret PropertyRef
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CoverageTermRef) GetValueOk() (*PropertyRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CoverageTermRef) SetValue(v PropertyRef) {
	o.Value = v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *CoverageTermRef) GetAvailability() AvailabilityRef {
	if o == nil || IsNil(o.Availability) {
		var ret AvailabilityRef
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverageTermRef) GetAvailabilityOk() (*AvailabilityRef, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *CoverageTermRef) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given AvailabilityRef and assigns it to the Availability field.
func (o *CoverageTermRef) SetAvailability(v AvailabilityRef) {
	o.Availability = &v
}

func (o CoverageTermRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverageTermRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["displayName"] = o.DisplayName
	toSerialize["options"] = o.Options
	toSerialize["value"] = o.Value
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	return toSerialize, nil
}

func (o *CoverageTermRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"displayName",
		"options",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoverageTermRef := _CoverageTermRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoverageTermRef)

	if err != nil {
		return err
	}

	*o = CoverageTermRef(varCoverageTermRef)

	return err
}

type NullableCoverageTermRef struct {
	value *CoverageTermRef
	isSet bool
}

func (v NullableCoverageTermRef) Get() *CoverageTermRef {
	return v.value
}

func (v *NullableCoverageTermRef) Set(val *CoverageTermRef) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverageTermRef) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverageTermRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverageTermRef(val *CoverageTermRef) *NullableCoverageTermRef {
	return &NullableCoverageTermRef{value: val, isSet: true}
}

func (v NullableCoverageTermRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverageTermRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
