/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RestrictedDataRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestrictedDataRef{}

// RestrictedDataRef struct for RestrictedDataRef
type RestrictedDataRef struct {
	Anonymizable bool   `json:"anonymizable"`
	MaskingLevel string `json:"maskingLevel"`
	Value        Values `json:"value"`
}

type _RestrictedDataRef RestrictedDataRef

// NewRestrictedDataRef instantiates a new RestrictedDataRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictedDataRef(anonymizable bool, maskingLevel string, value Values) *RestrictedDataRef {
	this := RestrictedDataRef{}
	this.Anonymizable = anonymizable
	this.MaskingLevel = maskingLevel
	this.Value = value
	return &this
}

// NewRestrictedDataRefWithDefaults instantiates a new RestrictedDataRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictedDataRefWithDefaults() *RestrictedDataRef {
	this := RestrictedDataRef{}
	return &this
}

// GetAnonymizable returns the Anonymizable field value
func (o *RestrictedDataRef) GetAnonymizable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Anonymizable
}

// GetAnonymizableOk returns a tuple with the Anonymizable field value
// and a boolean to check if the value has been set.
func (o *RestrictedDataRef) GetAnonymizableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Anonymizable, true
}

// SetAnonymizable sets field value
func (o *RestrictedDataRef) SetAnonymizable(v bool) {
	o.Anonymizable = v
}

// GetMaskingLevel returns the MaskingLevel field value
func (o *RestrictedDataRef) GetMaskingLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaskingLevel
}

// GetMaskingLevelOk returns a tuple with the MaskingLevel field value
// and a boolean to check if the value has been set.
func (o *RestrictedDataRef) GetMaskingLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaskingLevel, true
}

// SetMaskingLevel sets field value
func (o *RestrictedDataRef) SetMaskingLevel(v string) {
	o.MaskingLevel = v
}

// GetValue returns the Value field value
func (o *RestrictedDataRef) GetValue() Values {
	if o == nil {
		var ret Values
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *RestrictedDataRef) GetValueOk() (*Values, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *RestrictedDataRef) SetValue(v Values) {
	o.Value = v
}

func (o RestrictedDataRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestrictedDataRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["anonymizable"] = o.Anonymizable
	toSerialize["maskingLevel"] = o.MaskingLevel
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *RestrictedDataRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"anonymizable",
		"maskingLevel",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestrictedDataRef := _RestrictedDataRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestrictedDataRef)

	if err != nil {
		return err
	}

	*o = RestrictedDataRef(varRestrictedDataRef)

	return err
}

type NullableRestrictedDataRef struct {
	value *RestrictedDataRef
	isSet bool
}

func (v NullableRestrictedDataRef) Get() *RestrictedDataRef {
	return v.value
}

func (v *NullableRestrictedDataRef) Set(val *RestrictedDataRef) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictedDataRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictedDataRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictedDataRef(val *RestrictedDataRef) *NullableRestrictedDataRef {
	return &NullableRestrictedDataRef{value: val, isSet: true}
}

func (v NullableRestrictedDataRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictedDataRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
