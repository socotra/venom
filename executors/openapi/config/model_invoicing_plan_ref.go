/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InvoicingPlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoicingPlanRef{}

// InvoicingPlanRef struct for InvoicingPlanRef
type InvoicingPlanRef struct {
	DisplayName        string             `json:"displayName"`
	InvoiceFeeHandling string             `json:"invoiceFeeHandling"`
	InvoiceFeeAmounts  map[string]float32 `json:"invoiceFeeAmounts"`
}

type _InvoicingPlanRef InvoicingPlanRef

// NewInvoicingPlanRef instantiates a new InvoicingPlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoicingPlanRef(displayName string, invoiceFeeHandling string, invoiceFeeAmounts map[string]float32) *InvoicingPlanRef {
	this := InvoicingPlanRef{}
	this.DisplayName = displayName
	this.InvoiceFeeHandling = invoiceFeeHandling
	this.InvoiceFeeAmounts = invoiceFeeAmounts
	return &this
}

// NewInvoicingPlanRefWithDefaults instantiates a new InvoicingPlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoicingPlanRefWithDefaults() *InvoicingPlanRef {
	this := InvoicingPlanRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *InvoicingPlanRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *InvoicingPlanRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *InvoicingPlanRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetInvoiceFeeHandling returns the InvoiceFeeHandling field value
func (o *InvoicingPlanRef) GetInvoiceFeeHandling() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceFeeHandling
}

// GetInvoiceFeeHandlingOk returns a tuple with the InvoiceFeeHandling field value
// and a boolean to check if the value has been set.
func (o *InvoicingPlanRef) GetInvoiceFeeHandlingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceFeeHandling, true
}

// SetInvoiceFeeHandling sets field value
func (o *InvoicingPlanRef) SetInvoiceFeeHandling(v string) {
	o.InvoiceFeeHandling = v
}

// GetInvoiceFeeAmounts returns the InvoiceFeeAmounts field value
func (o *InvoicingPlanRef) GetInvoiceFeeAmounts() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.InvoiceFeeAmounts
}

// GetInvoiceFeeAmountsOk returns a tuple with the InvoiceFeeAmounts field value
// and a boolean to check if the value has been set.
func (o *InvoicingPlanRef) GetInvoiceFeeAmountsOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceFeeAmounts, true
}

// SetInvoiceFeeAmounts sets field value
func (o *InvoicingPlanRef) SetInvoiceFeeAmounts(v map[string]float32) {
	o.InvoiceFeeAmounts = v
}

func (o InvoicingPlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoicingPlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["invoiceFeeHandling"] = o.InvoiceFeeHandling
	toSerialize["invoiceFeeAmounts"] = o.InvoiceFeeAmounts
	return toSerialize, nil
}

func (o *InvoicingPlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"invoiceFeeHandling",
		"invoiceFeeAmounts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoicingPlanRef := _InvoicingPlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvoicingPlanRef)

	if err != nil {
		return err
	}

	*o = InvoicingPlanRef(varInvoicingPlanRef)

	return err
}

type NullableInvoicingPlanRef struct {
	value *InvoicingPlanRef
	isSet bool
}

func (v NullableInvoicingPlanRef) Get() *InvoicingPlanRef {
	return v.value
}

func (v *NullableInvoicingPlanRef) Set(val *InvoicingPlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoicingPlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoicingPlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoicingPlanRef(val *InvoicingPlanRef) *NullableInvoicingPlanRef {
	return &NullableInvoicingPlanRef{value: val, isSet: true}
}

func (v NullableInvoicingPlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoicingPlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
