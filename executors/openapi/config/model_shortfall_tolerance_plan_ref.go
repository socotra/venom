/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ShortfallTolerancePlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortfallTolerancePlanRef{}

// ShortfallTolerancePlanRef struct for ShortfallTolerancePlanRef
type ShortfallTolerancePlanRef struct {
	CurrencyTolerances map[string]float32 `json:"currencyTolerances"`
}

type _ShortfallTolerancePlanRef ShortfallTolerancePlanRef

// NewShortfallTolerancePlanRef instantiates a new ShortfallTolerancePlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortfallTolerancePlanRef(currencyTolerances map[string]float32) *ShortfallTolerancePlanRef {
	this := ShortfallTolerancePlanRef{}
	this.CurrencyTolerances = currencyTolerances
	return &this
}

// NewShortfallTolerancePlanRefWithDefaults instantiates a new ShortfallTolerancePlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortfallTolerancePlanRefWithDefaults() *ShortfallTolerancePlanRef {
	this := ShortfallTolerancePlanRef{}
	return &this
}

// GetCurrencyTolerances returns the CurrencyTolerances field value
func (o *ShortfallTolerancePlanRef) GetCurrencyTolerances() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.CurrencyTolerances
}

// GetCurrencyTolerancesOk returns a tuple with the CurrencyTolerances field value
// and a boolean to check if the value has been set.
func (o *ShortfallTolerancePlanRef) GetCurrencyTolerancesOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyTolerances, true
}

// SetCurrencyTolerances sets field value
func (o *ShortfallTolerancePlanRef) SetCurrencyTolerances(v map[string]float32) {
	o.CurrencyTolerances = v
}

func (o ShortfallTolerancePlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortfallTolerancePlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currencyTolerances"] = o.CurrencyTolerances
	return toSerialize, nil
}

func (o *ShortfallTolerancePlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currencyTolerances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShortfallTolerancePlanRef := _ShortfallTolerancePlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShortfallTolerancePlanRef)

	if err != nil {
		return err
	}

	*o = ShortfallTolerancePlanRef(varShortfallTolerancePlanRef)

	return err
}

type NullableShortfallTolerancePlanRef struct {
	value *ShortfallTolerancePlanRef
	isSet bool
}

func (v NullableShortfallTolerancePlanRef) Get() *ShortfallTolerancePlanRef {
	return v.value
}

func (v *NullableShortfallTolerancePlanRef) Set(val *ShortfallTolerancePlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableShortfallTolerancePlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableShortfallTolerancePlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortfallTolerancePlanRef(val *ShortfallTolerancePlanRef) *NullableShortfallTolerancePlanRef {
	return &NullableShortfallTolerancePlanRef{value: val, isSet: true}
}

func (v NullableShortfallTolerancePlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortfallTolerancePlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
