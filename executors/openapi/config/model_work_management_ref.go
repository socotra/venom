/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WorkManagementRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkManagementRef{}

// WorkManagementRef struct for WorkManagementRef
type WorkManagementRef struct {
	Activities      map[string]map[string]ActivityTypeRef `json:"activities"`
	AssignmentRoles map[string]AssignmentRoleRef          `json:"assignmentRoles"`
	Qualifications  map[string][]string                   `json:"qualifications"`
}

type _WorkManagementRef WorkManagementRef

// NewWorkManagementRef instantiates a new WorkManagementRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkManagementRef(activities map[string]map[string]ActivityTypeRef, assignmentRoles map[string]AssignmentRoleRef, qualifications map[string][]string) *WorkManagementRef {
	this := WorkManagementRef{}
	this.Activities = activities
	this.AssignmentRoles = assignmentRoles
	this.Qualifications = qualifications
	return &this
}

// NewWorkManagementRefWithDefaults instantiates a new WorkManagementRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkManagementRefWithDefaults() *WorkManagementRef {
	this := WorkManagementRef{}
	return &this
}

// GetActivities returns the Activities field value
func (o *WorkManagementRef) GetActivities() map[string]map[string]ActivityTypeRef {
	if o == nil {
		var ret map[string]map[string]ActivityTypeRef
		return ret
	}

	return o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value
// and a boolean to check if the value has been set.
func (o *WorkManagementRef) GetActivitiesOk() (*map[string]map[string]ActivityTypeRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activities, true
}

// SetActivities sets field value
func (o *WorkManagementRef) SetActivities(v map[string]map[string]ActivityTypeRef) {
	o.Activities = v
}

// GetAssignmentRoles returns the AssignmentRoles field value
func (o *WorkManagementRef) GetAssignmentRoles() map[string]AssignmentRoleRef {
	if o == nil {
		var ret map[string]AssignmentRoleRef
		return ret
	}

	return o.AssignmentRoles
}

// GetAssignmentRolesOk returns a tuple with the AssignmentRoles field value
// and a boolean to check if the value has been set.
func (o *WorkManagementRef) GetAssignmentRolesOk() (*map[string]AssignmentRoleRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignmentRoles, true
}

// SetAssignmentRoles sets field value
func (o *WorkManagementRef) SetAssignmentRoles(v map[string]AssignmentRoleRef) {
	o.AssignmentRoles = v
}

// GetQualifications returns the Qualifications field value
func (o *WorkManagementRef) GetQualifications() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Qualifications
}

// GetQualificationsOk returns a tuple with the Qualifications field value
// and a boolean to check if the value has been set.
func (o *WorkManagementRef) GetQualificationsOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qualifications, true
}

// SetQualifications sets field value
func (o *WorkManagementRef) SetQualifications(v map[string][]string) {
	o.Qualifications = v
}

func (o WorkManagementRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkManagementRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activities"] = o.Activities
	toSerialize["assignmentRoles"] = o.AssignmentRoles
	toSerialize["qualifications"] = o.Qualifications
	return toSerialize, nil
}

func (o *WorkManagementRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activities",
		"assignmentRoles",
		"qualifications",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkManagementRef := _WorkManagementRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkManagementRef)

	if err != nil {
		return err
	}

	*o = WorkManagementRef(varWorkManagementRef)

	return err
}

type NullableWorkManagementRef struct {
	value *WorkManagementRef
	isSet bool
}

func (v NullableWorkManagementRef) Get() *WorkManagementRef {
	return v.value
}

func (v *NullableWorkManagementRef) Set(val *WorkManagementRef) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkManagementRef) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkManagementRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkManagementRef(val *WorkManagementRef) *NullableWorkManagementRef {
	return &NullableWorkManagementRef{value: val, isSet: true}
}

func (v NullableWorkManagementRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkManagementRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
