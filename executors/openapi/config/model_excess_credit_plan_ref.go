/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExcessCreditPlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExcessCreditPlanRef{}

// ExcessCreditPlanRef struct for ExcessCreditPlanRef
type ExcessCreditPlanRef struct {
	DisburseExcess         bool               `json:"disburseExcess"`
	DisbursementType       string             `json:"disbursementType"`
	ExcludeDebits          string             `json:"excludeDebits"`
	DisbursementThresholds map[string]float32 `json:"disbursementThresholds"`
}

type _ExcessCreditPlanRef ExcessCreditPlanRef

// NewExcessCreditPlanRef instantiates a new ExcessCreditPlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExcessCreditPlanRef(disburseExcess bool, disbursementType string, excludeDebits string, disbursementThresholds map[string]float32) *ExcessCreditPlanRef {
	this := ExcessCreditPlanRef{}
	this.DisburseExcess = disburseExcess
	this.DisbursementType = disbursementType
	this.ExcludeDebits = excludeDebits
	this.DisbursementThresholds = disbursementThresholds
	return &this
}

// NewExcessCreditPlanRefWithDefaults instantiates a new ExcessCreditPlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExcessCreditPlanRefWithDefaults() *ExcessCreditPlanRef {
	this := ExcessCreditPlanRef{}
	return &this
}

// GetDisburseExcess returns the DisburseExcess field value
func (o *ExcessCreditPlanRef) GetDisburseExcess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisburseExcess
}

// GetDisburseExcessOk returns a tuple with the DisburseExcess field value
// and a boolean to check if the value has been set.
func (o *ExcessCreditPlanRef) GetDisburseExcessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisburseExcess, true
}

// SetDisburseExcess sets field value
func (o *ExcessCreditPlanRef) SetDisburseExcess(v bool) {
	o.DisburseExcess = v
}

// GetDisbursementType returns the DisbursementType field value
func (o *ExcessCreditPlanRef) GetDisbursementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisbursementType
}

// GetDisbursementTypeOk returns a tuple with the DisbursementType field value
// and a boolean to check if the value has been set.
func (o *ExcessCreditPlanRef) GetDisbursementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisbursementType, true
}

// SetDisbursementType sets field value
func (o *ExcessCreditPlanRef) SetDisbursementType(v string) {
	o.DisbursementType = v
}

// GetExcludeDebits returns the ExcludeDebits field value
func (o *ExcessCreditPlanRef) GetExcludeDebits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExcludeDebits
}

// GetExcludeDebitsOk returns a tuple with the ExcludeDebits field value
// and a boolean to check if the value has been set.
func (o *ExcessCreditPlanRef) GetExcludeDebitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeDebits, true
}

// SetExcludeDebits sets field value
func (o *ExcessCreditPlanRef) SetExcludeDebits(v string) {
	o.ExcludeDebits = v
}

// GetDisbursementThresholds returns the DisbursementThresholds field value
func (o *ExcessCreditPlanRef) GetDisbursementThresholds() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.DisbursementThresholds
}

// GetDisbursementThresholdsOk returns a tuple with the DisbursementThresholds field value
// and a boolean to check if the value has been set.
func (o *ExcessCreditPlanRef) GetDisbursementThresholdsOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisbursementThresholds, true
}

// SetDisbursementThresholds sets field value
func (o *ExcessCreditPlanRef) SetDisbursementThresholds(v map[string]float32) {
	o.DisbursementThresholds = v
}

func (o ExcessCreditPlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExcessCreditPlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disburseExcess"] = o.DisburseExcess
	toSerialize["disbursementType"] = o.DisbursementType
	toSerialize["excludeDebits"] = o.ExcludeDebits
	toSerialize["disbursementThresholds"] = o.DisbursementThresholds
	return toSerialize, nil
}

func (o *ExcessCreditPlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disburseExcess",
		"disbursementType",
		"excludeDebits",
		"disbursementThresholds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExcessCreditPlanRef := _ExcessCreditPlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExcessCreditPlanRef)

	if err != nil {
		return err
	}

	*o = ExcessCreditPlanRef(varExcessCreditPlanRef)

	return err
}

type NullableExcessCreditPlanRef struct {
	value *ExcessCreditPlanRef
	isSet bool
}

func (v NullableExcessCreditPlanRef) Get() *ExcessCreditPlanRef {
	return v.value
}

func (v *NullableExcessCreditPlanRef) Set(val *ExcessCreditPlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableExcessCreditPlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableExcessCreditPlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcessCreditPlanRef(val *ExcessCreditPlanRef) *NullableExcessCreditPlanRef {
	return &NullableExcessCreditPlanRef{value: val, isSet: true}
}

func (v NullableExcessCreditPlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcessCreditPlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
