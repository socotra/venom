/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ResourceGroupRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceGroupRef{}

// ResourceGroupRef struct for ResourceGroupRef
type ResourceGroupRef struct {
	SelectionStartTime time.Time `json:"selectionStartTime"`
	ResourceNames      []string  `json:"resourceNames"`
}

type _ResourceGroupRef ResourceGroupRef

// NewResourceGroupRef instantiates a new ResourceGroupRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceGroupRef(selectionStartTime time.Time, resourceNames []string) *ResourceGroupRef {
	this := ResourceGroupRef{}
	this.SelectionStartTime = selectionStartTime
	this.ResourceNames = resourceNames
	return &this
}

// NewResourceGroupRefWithDefaults instantiates a new ResourceGroupRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceGroupRefWithDefaults() *ResourceGroupRef {
	this := ResourceGroupRef{}
	return &this
}

// GetSelectionStartTime returns the SelectionStartTime field value
func (o *ResourceGroupRef) GetSelectionStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.SelectionStartTime
}

// GetSelectionStartTimeOk returns a tuple with the SelectionStartTime field value
// and a boolean to check if the value has been set.
func (o *ResourceGroupRef) GetSelectionStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectionStartTime, true
}

// SetSelectionStartTime sets field value
func (o *ResourceGroupRef) SetSelectionStartTime(v time.Time) {
	o.SelectionStartTime = v
}

// GetResourceNames returns the ResourceNames field value
func (o *ResourceGroupRef) GetResourceNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ResourceNames
}

// GetResourceNamesOk returns a tuple with the ResourceNames field value
// and a boolean to check if the value has been set.
func (o *ResourceGroupRef) GetResourceNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceNames, true
}

// SetResourceNames sets field value
func (o *ResourceGroupRef) SetResourceNames(v []string) {
	o.ResourceNames = v
}

func (o ResourceGroupRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceGroupRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["selectionStartTime"] = o.SelectionStartTime
	toSerialize["resourceNames"] = o.ResourceNames
	return toSerialize, nil
}

func (o *ResourceGroupRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"selectionStartTime",
		"resourceNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceGroupRef := _ResourceGroupRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceGroupRef)

	if err != nil {
		return err
	}

	*o = ResourceGroupRef(varResourceGroupRef)

	return err
}

type NullableResourceGroupRef struct {
	value *ResourceGroupRef
	isSet bool
}

func (v NullableResourceGroupRef) Get() *ResourceGroupRef {
	return v.value
}

func (v *NullableResourceGroupRef) Set(val *ResourceGroupRef) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceGroupRef) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceGroupRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceGroupRef(val *ResourceGroupRef) *NullableResourceGroupRef {
	return &NullableResourceGroupRef{value: val, isSet: true}
}

func (v NullableResourceGroupRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceGroupRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
