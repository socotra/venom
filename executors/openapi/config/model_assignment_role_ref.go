/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AssignmentRoleRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignmentRoleRef{}

// AssignmentRoleRef struct for AssignmentRoleRef
type AssignmentRoleRef struct {
	AppliesTo     []string          `json:"appliesTo"`
	Exclusive     bool              `json:"exclusive"`
	Qualification map[string]string `json:"qualification"`
}

type _AssignmentRoleRef AssignmentRoleRef

// NewAssignmentRoleRef instantiates a new AssignmentRoleRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignmentRoleRef(appliesTo []string, exclusive bool, qualification map[string]string) *AssignmentRoleRef {
	this := AssignmentRoleRef{}
	this.AppliesTo = appliesTo
	this.Exclusive = exclusive
	this.Qualification = qualification
	return &this
}

// NewAssignmentRoleRefWithDefaults instantiates a new AssignmentRoleRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentRoleRefWithDefaults() *AssignmentRoleRef {
	this := AssignmentRoleRef{}
	return &this
}

// GetAppliesTo returns the AppliesTo field value
func (o *AssignmentRoleRef) GetAppliesTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AppliesTo
}

// GetAppliesToOk returns a tuple with the AppliesTo field value
// and a boolean to check if the value has been set.
func (o *AssignmentRoleRef) GetAppliesToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppliesTo, true
}

// SetAppliesTo sets field value
func (o *AssignmentRoleRef) SetAppliesTo(v []string) {
	o.AppliesTo = v
}

// GetExclusive returns the Exclusive field value
func (o *AssignmentRoleRef) GetExclusive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Exclusive
}

// GetExclusiveOk returns a tuple with the Exclusive field value
// and a boolean to check if the value has been set.
func (o *AssignmentRoleRef) GetExclusiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclusive, true
}

// SetExclusive sets field value
func (o *AssignmentRoleRef) SetExclusive(v bool) {
	o.Exclusive = v
}

// GetQualification returns the Qualification field value
func (o *AssignmentRoleRef) GetQualification() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Qualification
}

// GetQualificationOk returns a tuple with the Qualification field value
// and a boolean to check if the value has been set.
func (o *AssignmentRoleRef) GetQualificationOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qualification, true
}

// SetQualification sets field value
func (o *AssignmentRoleRef) SetQualification(v map[string]string) {
	o.Qualification = v
}

func (o AssignmentRoleRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignmentRoleRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appliesTo"] = o.AppliesTo
	toSerialize["exclusive"] = o.Exclusive
	toSerialize["qualification"] = o.Qualification
	return toSerialize, nil
}

func (o *AssignmentRoleRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appliesTo",
		"exclusive",
		"qualification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignmentRoleRef := _AssignmentRoleRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignmentRoleRef)

	if err != nil {
		return err
	}

	*o = AssignmentRoleRef(varAssignmentRoleRef)

	return err
}

type NullableAssignmentRoleRef struct {
	value *AssignmentRoleRef
	isSet bool
}

func (v NullableAssignmentRoleRef) Get() *AssignmentRoleRef {
	return v.value
}

func (v *NullableAssignmentRoleRef) Set(val *AssignmentRoleRef) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignmentRoleRef) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignmentRoleRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignmentRoleRef(val *AssignmentRoleRef) *NullableAssignmentRoleRef {
	return &NullableAssignmentRoleRef{value: val, isSet: true}
}

func (v NullableAssignmentRoleRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignmentRoleRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
