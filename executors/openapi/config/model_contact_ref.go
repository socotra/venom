/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContactRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactRef{}

// ContactRef struct for ContactRef
type ContactRef struct {
	DisplayName       string                 `json:"displayName"`
	Abstract          bool                   `json:"abstract"`
	Extend            string                 `json:"extend"`
	DefaultSearchable bool                   `json:"defaultSearchable"`
	Data              map[string]PropertyRef `json:"data"`
}

type _ContactRef ContactRef

// NewContactRef instantiates a new ContactRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactRef(displayName string, abstract bool, extend string, defaultSearchable bool, data map[string]PropertyRef) *ContactRef {
	this := ContactRef{}
	this.DisplayName = displayName
	this.Abstract = abstract
	this.Extend = extend
	this.DefaultSearchable = defaultSearchable
	this.Data = data
	return &this
}

// NewContactRefWithDefaults instantiates a new ContactRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactRefWithDefaults() *ContactRef {
	this := ContactRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *ContactRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ContactRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ContactRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetAbstract returns the Abstract field value
func (o *ContactRef) GetAbstract() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value
// and a boolean to check if the value has been set.
func (o *ContactRef) GetAbstractOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abstract, true
}

// SetAbstract sets field value
func (o *ContactRef) SetAbstract(v bool) {
	o.Abstract = v
}

// GetExtend returns the Extend field value
func (o *ContactRef) GetExtend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extend
}

// GetExtendOk returns a tuple with the Extend field value
// and a boolean to check if the value has been set.
func (o *ContactRef) GetExtendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extend, true
}

// SetExtend sets field value
func (o *ContactRef) SetExtend(v string) {
	o.Extend = v
}

// GetDefaultSearchable returns the DefaultSearchable field value
func (o *ContactRef) GetDefaultSearchable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DefaultSearchable
}

// GetDefaultSearchableOk returns a tuple with the DefaultSearchable field value
// and a boolean to check if the value has been set.
func (o *ContactRef) GetDefaultSearchableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultSearchable, true
}

// SetDefaultSearchable sets field value
func (o *ContactRef) SetDefaultSearchable(v bool) {
	o.DefaultSearchable = v
}

// GetData returns the Data field value
func (o *ContactRef) GetData() map[string]PropertyRef {
	if o == nil {
		var ret map[string]PropertyRef
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ContactRef) GetDataOk() (*map[string]PropertyRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ContactRef) SetData(v map[string]PropertyRef) {
	o.Data = v
}

func (o ContactRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["abstract"] = o.Abstract
	toSerialize["extend"] = o.Extend
	toSerialize["defaultSearchable"] = o.DefaultSearchable
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ContactRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"abstract",
		"extend",
		"defaultSearchable",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactRef := _ContactRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactRef)

	if err != nil {
		return err
	}

	*o = ContactRef(varContactRef)

	return err
}

type NullableContactRef struct {
	value *ContactRef
	isSet bool
}

func (v NullableContactRef) Get() *ContactRef {
	return v.value
}

func (v *NullableContactRef) Set(val *ContactRef) {
	v.value = val
	v.isSet = true
}

func (v NullableContactRef) IsSet() bool {
	return v.isSet
}

func (v *NullableContactRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactRef(val *ContactRef) *NullableContactRef {
	return &NullableContactRef{value: val, isSet: true}
}

func (v NullableContactRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
