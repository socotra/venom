/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RegionRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionRef{}

// RegionRef struct for RegionRef
type RegionRef struct {
	DisplayName     string `json:"displayName"`
	NumberingString string `json:"numberingString"`
}

type _RegionRef RegionRef

// NewRegionRef instantiates a new RegionRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionRef(displayName string, numberingString string) *RegionRef {
	this := RegionRef{}
	this.DisplayName = displayName
	this.NumberingString = numberingString
	return &this
}

// NewRegionRefWithDefaults instantiates a new RegionRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionRefWithDefaults() *RegionRef {
	this := RegionRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *RegionRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *RegionRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *RegionRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetNumberingString returns the NumberingString field value
func (o *RegionRef) GetNumberingString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NumberingString
}

// GetNumberingStringOk returns a tuple with the NumberingString field value
// and a boolean to check if the value has been set.
func (o *RegionRef) GetNumberingStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberingString, true
}

// SetNumberingString sets field value
func (o *RegionRef) SetNumberingString(v string) {
	o.NumberingString = v
}

func (o RegionRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["numberingString"] = o.NumberingString
	return toSerialize, nil
}

func (o *RegionRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"numberingString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegionRef := _RegionRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegionRef)

	if err != nil {
		return err
	}

	*o = RegionRef(varRegionRef)

	return err
}

type NullableRegionRef struct {
	value *RegionRef
	isSet bool
}

func (v NullableRegionRef) Get() *RegionRef {
	return v.value
}

func (v *NullableRegionRef) Set(val *RegionRef) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionRef(val *RegionRef) *NullableRegionRef {
	return &NullableRegionRef{value: val, isSet: true}
}

func (v NullableRegionRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
