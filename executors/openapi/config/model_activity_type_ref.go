/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ActivityTypeRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityTypeRef{}

// ActivityTypeRef struct for ActivityTypeRef
type ActivityTypeRef struct {
	DefaultDeadlineDays float32 `json:"defaultDeadlineDays"`
	BlocksUnderwriting  bool    `json:"blocksUnderwriting"`
}

type _ActivityTypeRef ActivityTypeRef

// NewActivityTypeRef instantiates a new ActivityTypeRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityTypeRef(defaultDeadlineDays float32, blocksUnderwriting bool) *ActivityTypeRef {
	this := ActivityTypeRef{}
	this.DefaultDeadlineDays = defaultDeadlineDays
	this.BlocksUnderwriting = blocksUnderwriting
	return &this
}

// NewActivityTypeRefWithDefaults instantiates a new ActivityTypeRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityTypeRefWithDefaults() *ActivityTypeRef {
	this := ActivityTypeRef{}
	return &this
}

// GetDefaultDeadlineDays returns the DefaultDeadlineDays field value
func (o *ActivityTypeRef) GetDefaultDeadlineDays() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DefaultDeadlineDays
}

// GetDefaultDeadlineDaysOk returns a tuple with the DefaultDeadlineDays field value
// and a boolean to check if the value has been set.
func (o *ActivityTypeRef) GetDefaultDeadlineDaysOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultDeadlineDays, true
}

// SetDefaultDeadlineDays sets field value
func (o *ActivityTypeRef) SetDefaultDeadlineDays(v float32) {
	o.DefaultDeadlineDays = v
}

// GetBlocksUnderwriting returns the BlocksUnderwriting field value
func (o *ActivityTypeRef) GetBlocksUnderwriting() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BlocksUnderwriting
}

// GetBlocksUnderwritingOk returns a tuple with the BlocksUnderwriting field value
// and a boolean to check if the value has been set.
func (o *ActivityTypeRef) GetBlocksUnderwritingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlocksUnderwriting, true
}

// SetBlocksUnderwriting sets field value
func (o *ActivityTypeRef) SetBlocksUnderwriting(v bool) {
	o.BlocksUnderwriting = v
}

func (o ActivityTypeRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityTypeRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["defaultDeadlineDays"] = o.DefaultDeadlineDays
	toSerialize["blocksUnderwriting"] = o.BlocksUnderwriting
	return toSerialize, nil
}

func (o *ActivityTypeRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultDeadlineDays",
		"blocksUnderwriting",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityTypeRef := _ActivityTypeRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityTypeRef)

	if err != nil {
		return err
	}

	*o = ActivityTypeRef(varActivityTypeRef)

	return err
}

type NullableActivityTypeRef struct {
	value *ActivityTypeRef
	isSet bool
}

func (v NullableActivityTypeRef) Get() *ActivityTypeRef {
	return v.value
}

func (v *NullableActivityTypeRef) Set(val *ActivityTypeRef) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityTypeRef) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityTypeRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityTypeRef(val *ActivityTypeRef) *NullableActivityTypeRef {
	return &NullableActivityTypeRef{value: val, isSet: true}
}

func (v NullableActivityTypeRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityTypeRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
