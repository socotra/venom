/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Values type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Values{}

// Values struct for Values
type Values struct {
	String   string    `json:"string"`
	Int      int32     `json:"int"`
	Long     int64     `json:"long"`
	Guid     string    `json:"guid"`
	Date     string    `json:"date"`
	Datetime time.Time `json:"datetime"`
	Decimal  float32   `json:"decimal"`
}

type _Values Values

// NewValues instantiates a new Values object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValues(string_ string, int_ int32, long int64, guid string, date string, datetime time.Time, decimal float32) *Values {
	this := Values{}
	this.String = string_
	this.Int = int_
	this.Long = long
	this.Guid = guid
	this.Date = date
	this.Datetime = datetime
	this.Decimal = decimal
	return &this
}

// NewValuesWithDefaults instantiates a new Values object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuesWithDefaults() *Values {
	this := Values{}
	return &this
}

// GetString returns the String field value
func (o *Values) GetString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.String
}

// GetStringOk returns a tuple with the String field value
// and a boolean to check if the value has been set.
func (o *Values) GetStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.String, true
}

// SetString sets field value
func (o *Values) SetString(v string) {
	o.String = v
}

// GetInt returns the Int field value
func (o *Values) GetInt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Int
}

// GetIntOk returns a tuple with the Int field value
// and a boolean to check if the value has been set.
func (o *Values) GetIntOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Int, true
}

// SetInt sets field value
func (o *Values) SetInt(v int32) {
	o.Int = v
}

// GetLong returns the Long field value
func (o *Values) GetLong() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Long
}

// GetLongOk returns a tuple with the Long field value
// and a boolean to check if the value has been set.
func (o *Values) GetLongOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Long, true
}

// SetLong sets field value
func (o *Values) SetLong(v int64) {
	o.Long = v
}

// GetGuid returns the Guid field value
func (o *Values) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *Values) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *Values) SetGuid(v string) {
	o.Guid = v
}

// GetDate returns the Date field value
func (o *Values) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Values) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Values) SetDate(v string) {
	o.Date = v
}

// GetDatetime returns the Datetime field value
func (o *Values) GetDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *Values) GetDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *Values) SetDatetime(v time.Time) {
	o.Datetime = v
}

// GetDecimal returns the Decimal field value
func (o *Values) GetDecimal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value
// and a boolean to check if the value has been set.
func (o *Values) GetDecimalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimal, true
}

// SetDecimal sets field value
func (o *Values) SetDecimal(v float32) {
	o.Decimal = v
}

func (o Values) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Values) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["string"] = o.String
	toSerialize["int"] = o.Int
	toSerialize["long"] = o.Long
	toSerialize["guid"] = o.Guid
	toSerialize["date"] = o.Date
	toSerialize["datetime"] = o.Datetime
	toSerialize["decimal"] = o.Decimal
	return toSerialize, nil
}

func (o *Values) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"string",
		"int",
		"long",
		"guid",
		"date",
		"datetime",
		"decimal",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValues := _Values{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValues)

	if err != nil {
		return err
	}

	*o = Values(varValues)

	return err
}

type NullableValues struct {
	value *Values
	isSet bool
}

func (v NullableValues) Get() *Values {
	return v.value
}

func (v *NullableValues) Set(val *Values) {
	v.value = val
	v.isSet = true
}

func (v NullableValues) IsSet() bool {
	return v.isSet
}

func (v *NullableValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValues(val *Values) *NullableValues {
	return &NullableValues{value: val, isSet: true}
}

func (v NullableValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
