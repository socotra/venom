/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConfigBuilderResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigBuilderResult{}

// ConfigBuilderResult struct for ConfigBuilderResult
type ConfigBuilderResult struct {
	IsSuccess bool               `json:"isSuccess"`
	Errors    []string           `json:"errors"`
	Metadata  DeploymentMetadata `json:"metadata"`
}

type _ConfigBuilderResult ConfigBuilderResult

// NewConfigBuilderResult instantiates a new ConfigBuilderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigBuilderResult(isSuccess bool, errors []string, metadata DeploymentMetadata) *ConfigBuilderResult {
	this := ConfigBuilderResult{}
	this.IsSuccess = isSuccess
	this.Errors = errors
	this.Metadata = metadata
	return &this
}

// NewConfigBuilderResultWithDefaults instantiates a new ConfigBuilderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigBuilderResultWithDefaults() *ConfigBuilderResult {
	this := ConfigBuilderResult{}
	return &this
}

// GetIsSuccess returns the IsSuccess field value
func (o *ConfigBuilderResult) GetIsSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value
// and a boolean to check if the value has been set.
func (o *ConfigBuilderResult) GetIsSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSuccess, true
}

// SetIsSuccess sets field value
func (o *ConfigBuilderResult) SetIsSuccess(v bool) {
	o.IsSuccess = v
}

// GetErrors returns the Errors field value
func (o *ConfigBuilderResult) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ConfigBuilderResult) GetErrorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ConfigBuilderResult) SetErrors(v []string) {
	o.Errors = v
}

// GetMetadata returns the Metadata field value
func (o *ConfigBuilderResult) GetMetadata() DeploymentMetadata {
	if o == nil {
		var ret DeploymentMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ConfigBuilderResult) GetMetadataOk() (*DeploymentMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ConfigBuilderResult) SetMetadata(v DeploymentMetadata) {
	o.Metadata = v
}

func (o ConfigBuilderResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigBuilderResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isSuccess"] = o.IsSuccess
	toSerialize["errors"] = o.Errors
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *ConfigBuilderResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isSuccess",
		"errors",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigBuilderResult := _ConfigBuilderResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigBuilderResult)

	if err != nil {
		return err
	}

	*o = ConfigBuilderResult(varConfigBuilderResult)

	return err
}

type NullableConfigBuilderResult struct {
	value *ConfigBuilderResult
	isSet bool
}

func (v NullableConfigBuilderResult) Get() *ConfigBuilderResult {
	return v.value
}

func (v *NullableConfigBuilderResult) Set(val *ConfigBuilderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigBuilderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigBuilderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigBuilderResult(val *ConfigBuilderResult) *NullableConfigBuilderResult {
	return &NullableConfigBuilderResult{value: val, isSet: true}
}

func (v NullableConfigBuilderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigBuilderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
