/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConditionValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionValue{}

// ConditionValue struct for ConditionValue
type ConditionValue struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type _ConditionValue ConditionValue

// NewConditionValue instantiates a new ConditionValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionValue(key string, values []string) *ConditionValue {
	this := ConditionValue{}
	this.Key = key
	this.Values = values
	return &this
}

// NewConditionValueWithDefaults instantiates a new ConditionValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionValueWithDefaults() *ConditionValue {
	this := ConditionValue{}
	return &this
}

// GetKey returns the Key field value
func (o *ConditionValue) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConditionValue) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConditionValue) SetKey(v string) {
	o.Key = v
}

// GetValues returns the Values field value
func (o *ConditionValue) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *ConditionValue) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *ConditionValue) SetValues(v []string) {
	o.Values = v
}

func (o ConditionValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *ConditionValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionValue := _ConditionValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionValue)

	if err != nil {
		return err
	}

	*o = ConditionValue(varConditionValue)

	return err
}

type NullableConditionValue struct {
	value *ConditionValue
	isSet bool
}

func (v NullableConditionValue) Get() *ConditionValue {
	return v.value
}

func (v *NullableConditionValue) Set(val *ConditionValue) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionValue) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionValue(val *ConditionValue) *NullableConditionValue {
	return &NullableConditionValue{value: val, isSet: true}
}

func (v NullableConditionValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
