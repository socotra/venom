/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BillingPlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingPlanRef{}

// BillingPlanRef struct for BillingPlanRef
type BillingPlanRef struct {
	DisplayName    string `json:"displayName"`
	BillingTrigger string `json:"billingTrigger"`
	BillingLevel   string `json:"billingLevel"`
}

type _BillingPlanRef BillingPlanRef

// NewBillingPlanRef instantiates a new BillingPlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingPlanRef(displayName string, billingTrigger string, billingLevel string) *BillingPlanRef {
	this := BillingPlanRef{}
	this.DisplayName = displayName
	this.BillingTrigger = billingTrigger
	this.BillingLevel = billingLevel
	return &this
}

// NewBillingPlanRefWithDefaults instantiates a new BillingPlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPlanRefWithDefaults() *BillingPlanRef {
	this := BillingPlanRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *BillingPlanRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *BillingPlanRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *BillingPlanRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetBillingTrigger returns the BillingTrigger field value
func (o *BillingPlanRef) GetBillingTrigger() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingTrigger
}

// GetBillingTriggerOk returns a tuple with the BillingTrigger field value
// and a boolean to check if the value has been set.
func (o *BillingPlanRef) GetBillingTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingTrigger, true
}

// SetBillingTrigger sets field value
func (o *BillingPlanRef) SetBillingTrigger(v string) {
	o.BillingTrigger = v
}

// GetBillingLevel returns the BillingLevel field value
func (o *BillingPlanRef) GetBillingLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingLevel
}

// GetBillingLevelOk returns a tuple with the BillingLevel field value
// and a boolean to check if the value has been set.
func (o *BillingPlanRef) GetBillingLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingLevel, true
}

// SetBillingLevel sets field value
func (o *BillingPlanRef) SetBillingLevel(v string) {
	o.BillingLevel = v
}

func (o BillingPlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingPlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["billingTrigger"] = o.BillingTrigger
	toSerialize["billingLevel"] = o.BillingLevel
	return toSerialize, nil
}

func (o *BillingPlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"billingTrigger",
		"billingLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillingPlanRef := _BillingPlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBillingPlanRef)

	if err != nil {
		return err
	}

	*o = BillingPlanRef(varBillingPlanRef)

	return err
}

type NullableBillingPlanRef struct {
	value *BillingPlanRef
	isSet bool
}

func (v NullableBillingPlanRef) Get() *BillingPlanRef {
	return v.value
}

func (v *NullableBillingPlanRef) Set(val *BillingPlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPlanRef(val *BillingPlanRef) *NullableBillingPlanRef {
	return &NullableBillingPlanRef{value: val, isSet: true}
}

func (v NullableBillingPlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
