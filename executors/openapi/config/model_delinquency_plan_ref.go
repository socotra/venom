/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DelinquencyPlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelinquencyPlanRef{}

// DelinquencyPlanRef struct for DelinquencyPlanRef
type DelinquencyPlanRef struct {
	DisplayName          string                                   `json:"displayName"`
	GracePeriodDays      int32                                    `json:"gracePeriodDays"`
	DelinquencyLevel     *string                                  `json:"delinquencyLevel,omitempty"`
	LapseTransactionType *string                                  `json:"lapseTransactionType,omitempty"`
	AdvanceLapseTo       *string                                  `json:"advanceLapseTo,omitempty"`
	Events               map[string]DelinquencyEventConfiguration `json:"events"`
}

type _DelinquencyPlanRef DelinquencyPlanRef

// NewDelinquencyPlanRef instantiates a new DelinquencyPlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelinquencyPlanRef(displayName string, gracePeriodDays int32, events map[string]DelinquencyEventConfiguration) *DelinquencyPlanRef {
	this := DelinquencyPlanRef{}
	this.DisplayName = displayName
	this.GracePeriodDays = gracePeriodDays
	this.Events = events
	return &this
}

// NewDelinquencyPlanRefWithDefaults instantiates a new DelinquencyPlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelinquencyPlanRefWithDefaults() *DelinquencyPlanRef {
	this := DelinquencyPlanRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *DelinquencyPlanRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *DelinquencyPlanRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *DelinquencyPlanRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetGracePeriodDays returns the GracePeriodDays field value
func (o *DelinquencyPlanRef) GetGracePeriodDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GracePeriodDays
}

// GetGracePeriodDaysOk returns a tuple with the GracePeriodDays field value
// and a boolean to check if the value has been set.
func (o *DelinquencyPlanRef) GetGracePeriodDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GracePeriodDays, true
}

// SetGracePeriodDays sets field value
func (o *DelinquencyPlanRef) SetGracePeriodDays(v int32) {
	o.GracePeriodDays = v
}

// GetDelinquencyLevel returns the DelinquencyLevel field value if set, zero value otherwise.
func (o *DelinquencyPlanRef) GetDelinquencyLevel() string {
	if o == nil || IsNil(o.DelinquencyLevel) {
		var ret string
		return ret
	}
	return *o.DelinquencyLevel
}

// GetDelinquencyLevelOk returns a tuple with the DelinquencyLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyPlanRef) GetDelinquencyLevelOk() (*string, bool) {
	if o == nil || IsNil(o.DelinquencyLevel) {
		return nil, false
	}
	return o.DelinquencyLevel, true
}

// HasDelinquencyLevel returns a boolean if a field has been set.
func (o *DelinquencyPlanRef) HasDelinquencyLevel() bool {
	if o != nil && !IsNil(o.DelinquencyLevel) {
		return true
	}

	return false
}

// SetDelinquencyLevel gets a reference to the given string and assigns it to the DelinquencyLevel field.
func (o *DelinquencyPlanRef) SetDelinquencyLevel(v string) {
	o.DelinquencyLevel = &v
}

// GetLapseTransactionType returns the LapseTransactionType field value if set, zero value otherwise.
func (o *DelinquencyPlanRef) GetLapseTransactionType() string {
	if o == nil || IsNil(o.LapseTransactionType) {
		var ret string
		return ret
	}
	return *o.LapseTransactionType
}

// GetLapseTransactionTypeOk returns a tuple with the LapseTransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyPlanRef) GetLapseTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LapseTransactionType) {
		return nil, false
	}
	return o.LapseTransactionType, true
}

// HasLapseTransactionType returns a boolean if a field has been set.
func (o *DelinquencyPlanRef) HasLapseTransactionType() bool {
	if o != nil && !IsNil(o.LapseTransactionType) {
		return true
	}

	return false
}

// SetLapseTransactionType gets a reference to the given string and assigns it to the LapseTransactionType field.
func (o *DelinquencyPlanRef) SetLapseTransactionType(v string) {
	o.LapseTransactionType = &v
}

// GetAdvanceLapseTo returns the AdvanceLapseTo field value if set, zero value otherwise.
func (o *DelinquencyPlanRef) GetAdvanceLapseTo() string {
	if o == nil || IsNil(o.AdvanceLapseTo) {
		var ret string
		return ret
	}
	return *o.AdvanceLapseTo
}

// GetAdvanceLapseToOk returns a tuple with the AdvanceLapseTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyPlanRef) GetAdvanceLapseToOk() (*string, bool) {
	if o == nil || IsNil(o.AdvanceLapseTo) {
		return nil, false
	}
	return o.AdvanceLapseTo, true
}

// HasAdvanceLapseTo returns a boolean if a field has been set.
func (o *DelinquencyPlanRef) HasAdvanceLapseTo() bool {
	if o != nil && !IsNil(o.AdvanceLapseTo) {
		return true
	}

	return false
}

// SetAdvanceLapseTo gets a reference to the given string and assigns it to the AdvanceLapseTo field.
func (o *DelinquencyPlanRef) SetAdvanceLapseTo(v string) {
	o.AdvanceLapseTo = &v
}

// GetEvents returns the Events field value
func (o *DelinquencyPlanRef) GetEvents() map[string]DelinquencyEventConfiguration {
	if o == nil {
		var ret map[string]DelinquencyEventConfiguration
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *DelinquencyPlanRef) GetEventsOk() (*map[string]DelinquencyEventConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Events, true
}

// SetEvents sets field value
func (o *DelinquencyPlanRef) SetEvents(v map[string]DelinquencyEventConfiguration) {
	o.Events = v
}

func (o DelinquencyPlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelinquencyPlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["gracePeriodDays"] = o.GracePeriodDays
	if !IsNil(o.DelinquencyLevel) {
		toSerialize["delinquencyLevel"] = o.DelinquencyLevel
	}
	if !IsNil(o.LapseTransactionType) {
		toSerialize["lapseTransactionType"] = o.LapseTransactionType
	}
	if !IsNil(o.AdvanceLapseTo) {
		toSerialize["advanceLapseTo"] = o.AdvanceLapseTo
	}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *DelinquencyPlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"gracePeriodDays",
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelinquencyPlanRef := _DelinquencyPlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelinquencyPlanRef)

	if err != nil {
		return err
	}

	*o = DelinquencyPlanRef(varDelinquencyPlanRef)

	return err
}

type NullableDelinquencyPlanRef struct {
	value *DelinquencyPlanRef
	isSet bool
}

func (v NullableDelinquencyPlanRef) Get() *DelinquencyPlanRef {
	return v.value
}

func (v *NullableDelinquencyPlanRef) Set(val *DelinquencyPlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableDelinquencyPlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDelinquencyPlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelinquencyPlanRef(val *DelinquencyPlanRef) *NullableDelinquencyPlanRef {
	return &NullableDelinquencyPlanRef{value: val, isSet: true}
}

func (v NullableDelinquencyPlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelinquencyPlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
