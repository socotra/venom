/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataAccessControlRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAccessControlRef{}

// DataAccessControlRef struct for DataAccessControlRef
type DataAccessControlRef struct {
	Enabled      bool                      `json:"enabled"`
	DataMasking  bool                      `json:"dataMasking"`
	Account      DataAccessControlFieldRef `json:"account"`
	Policy       DataAccessControlFieldRef `json:"policy"`
	ProductIndex map[string]int32          `json:"productIndex"`
	RegionIndex  map[string]int32          `json:"regionIndex"`
}

type _DataAccessControlRef DataAccessControlRef

// NewDataAccessControlRef instantiates a new DataAccessControlRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAccessControlRef(enabled bool, dataMasking bool, account DataAccessControlFieldRef, policy DataAccessControlFieldRef, productIndex map[string]int32, regionIndex map[string]int32) *DataAccessControlRef {
	this := DataAccessControlRef{}
	this.Enabled = enabled
	this.DataMasking = dataMasking
	this.Account = account
	this.Policy = policy
	this.ProductIndex = productIndex
	this.RegionIndex = regionIndex
	return &this
}

// NewDataAccessControlRefWithDefaults instantiates a new DataAccessControlRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAccessControlRefWithDefaults() *DataAccessControlRef {
	this := DataAccessControlRef{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DataAccessControlRef) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DataAccessControlRef) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DataAccessControlRef) SetEnabled(v bool) {
	o.Enabled = v
}

// GetDataMasking returns the DataMasking field value
func (o *DataAccessControlRef) GetDataMasking() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DataMasking
}

// GetDataMaskingOk returns a tuple with the DataMasking field value
// and a boolean to check if the value has been set.
func (o *DataAccessControlRef) GetDataMaskingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataMasking, true
}

// SetDataMasking sets field value
func (o *DataAccessControlRef) SetDataMasking(v bool) {
	o.DataMasking = v
}

// GetAccount returns the Account field value
func (o *DataAccessControlRef) GetAccount() DataAccessControlFieldRef {
	if o == nil {
		var ret DataAccessControlFieldRef
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *DataAccessControlRef) GetAccountOk() (*DataAccessControlFieldRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *DataAccessControlRef) SetAccount(v DataAccessControlFieldRef) {
	o.Account = v
}

// GetPolicy returns the Policy field value
func (o *DataAccessControlRef) GetPolicy() DataAccessControlFieldRef {
	if o == nil {
		var ret DataAccessControlFieldRef
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *DataAccessControlRef) GetPolicyOk() (*DataAccessControlFieldRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *DataAccessControlRef) SetPolicy(v DataAccessControlFieldRef) {
	o.Policy = v
}

// GetProductIndex returns the ProductIndex field value
func (o *DataAccessControlRef) GetProductIndex() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.ProductIndex
}

// GetProductIndexOk returns a tuple with the ProductIndex field value
// and a boolean to check if the value has been set.
func (o *DataAccessControlRef) GetProductIndexOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductIndex, true
}

// SetProductIndex sets field value
func (o *DataAccessControlRef) SetProductIndex(v map[string]int32) {
	o.ProductIndex = v
}

// GetRegionIndex returns the RegionIndex field value
func (o *DataAccessControlRef) GetRegionIndex() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.RegionIndex
}

// GetRegionIndexOk returns a tuple with the RegionIndex field value
// and a boolean to check if the value has been set.
func (o *DataAccessControlRef) GetRegionIndexOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionIndex, true
}

// SetRegionIndex sets field value
func (o *DataAccessControlRef) SetRegionIndex(v map[string]int32) {
	o.RegionIndex = v
}

func (o DataAccessControlRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAccessControlRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["dataMasking"] = o.DataMasking
	toSerialize["account"] = o.Account
	toSerialize["policy"] = o.Policy
	toSerialize["productIndex"] = o.ProductIndex
	toSerialize["regionIndex"] = o.RegionIndex
	return toSerialize, nil
}

func (o *DataAccessControlRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"dataMasking",
		"account",
		"policy",
		"productIndex",
		"regionIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataAccessControlRef := _DataAccessControlRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataAccessControlRef)

	if err != nil {
		return err
	}

	*o = DataAccessControlRef(varDataAccessControlRef)

	return err
}

type NullableDataAccessControlRef struct {
	value *DataAccessControlRef
	isSet bool
}

func (v NullableDataAccessControlRef) Get() *DataAccessControlRef {
	return v.value
}

func (v *NullableDataAccessControlRef) Set(val *DataAccessControlRef) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAccessControlRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAccessControlRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAccessControlRef(val *DataAccessControlRef) *NullableDataAccessControlRef {
	return &NullableDataAccessControlRef{value: val, isSet: true}
}

func (v NullableDataAccessControlRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAccessControlRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
