/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ClaimRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimRef{}

// ClaimRef struct for ClaimRef
type ClaimRef struct {
	Extend        string `json:"extend"`
	Abstract      bool   `json:"abstract"`
	ClaimCategory string `json:"claimCategory"`
}

type _ClaimRef ClaimRef

// NewClaimRef instantiates a new ClaimRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimRef(extend string, abstract bool, claimCategory string) *ClaimRef {
	this := ClaimRef{}
	this.Extend = extend
	this.Abstract = abstract
	this.ClaimCategory = claimCategory
	return &this
}

// NewClaimRefWithDefaults instantiates a new ClaimRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimRefWithDefaults() *ClaimRef {
	this := ClaimRef{}
	return &this
}

// GetExtend returns the Extend field value
func (o *ClaimRef) GetExtend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extend
}

// GetExtendOk returns a tuple with the Extend field value
// and a boolean to check if the value has been set.
func (o *ClaimRef) GetExtendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extend, true
}

// SetExtend sets field value
func (o *ClaimRef) SetExtend(v string) {
	o.Extend = v
}

// GetAbstract returns the Abstract field value
func (o *ClaimRef) GetAbstract() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value
// and a boolean to check if the value has been set.
func (o *ClaimRef) GetAbstractOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abstract, true
}

// SetAbstract sets field value
func (o *ClaimRef) SetAbstract(v bool) {
	o.Abstract = v
}

// GetClaimCategory returns the ClaimCategory field value
func (o *ClaimRef) GetClaimCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClaimCategory
}

// GetClaimCategoryOk returns a tuple with the ClaimCategory field value
// and a boolean to check if the value has been set.
func (o *ClaimRef) GetClaimCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimCategory, true
}

// SetClaimCategory sets field value
func (o *ClaimRef) SetClaimCategory(v string) {
	o.ClaimCategory = v
}

func (o ClaimRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extend"] = o.Extend
	toSerialize["abstract"] = o.Abstract
	toSerialize["claimCategory"] = o.ClaimCategory
	return toSerialize, nil
}

func (o *ClaimRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extend",
		"abstract",
		"claimCategory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimRef := _ClaimRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimRef)

	if err != nil {
		return err
	}

	*o = ClaimRef(varClaimRef)

	return err
}

type NullableClaimRef struct {
	value *ClaimRef
	isSet bool
}

func (v NullableClaimRef) Get() *ClaimRef {
	return v.value
}

func (v *NullableClaimRef) Set(val *ClaimRef) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimRef) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimRef(val *ClaimRef) *NullableClaimRef {
	return &NullableClaimRef{value: val, isSet: true}
}

func (v NullableClaimRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
