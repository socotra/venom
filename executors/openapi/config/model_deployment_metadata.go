/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeploymentMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentMetadata{}

// DeploymentMetadata struct for DeploymentMetadata
type DeploymentMetadata struct {
	Version1      string                       `json:"version1"`
	Version2      string                       `json:"version2"`
	Plugins       map[string]map[string]string `json:"plugins"`
	LatestVersion string                       `json:"latestVersion"`
}

type _DeploymentMetadata DeploymentMetadata

// NewDeploymentMetadata instantiates a new DeploymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentMetadata(version1 string, version2 string, plugins map[string]map[string]string, latestVersion string) *DeploymentMetadata {
	this := DeploymentMetadata{}
	this.Version1 = version1
	this.Version2 = version2
	this.Plugins = plugins
	this.LatestVersion = latestVersion
	return &this
}

// NewDeploymentMetadataWithDefaults instantiates a new DeploymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentMetadataWithDefaults() *DeploymentMetadata {
	this := DeploymentMetadata{}
	return &this
}

// GetVersion1 returns the Version1 field value
func (o *DeploymentMetadata) GetVersion1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version1
}

// GetVersion1Ok returns a tuple with the Version1 field value
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetVersion1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version1, true
}

// SetVersion1 sets field value
func (o *DeploymentMetadata) SetVersion1(v string) {
	o.Version1 = v
}

// GetVersion2 returns the Version2 field value
func (o *DeploymentMetadata) GetVersion2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version2
}

// GetVersion2Ok returns a tuple with the Version2 field value
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetVersion2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version2, true
}

// SetVersion2 sets field value
func (o *DeploymentMetadata) SetVersion2(v string) {
	o.Version2 = v
}

// GetPlugins returns the Plugins field value
func (o *DeploymentMetadata) GetPlugins() map[string]map[string]string {
	if o == nil {
		var ret map[string]map[string]string
		return ret
	}

	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetPluginsOk() (*map[string]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plugins, true
}

// SetPlugins sets field value
func (o *DeploymentMetadata) SetPlugins(v map[string]map[string]string) {
	o.Plugins = v
}

// GetLatestVersion returns the LatestVersion field value
func (o *DeploymentMetadata) GetLatestVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetLatestVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestVersion, true
}

// SetLatestVersion sets field value
func (o *DeploymentMetadata) SetLatestVersion(v string) {
	o.LatestVersion = v
}

func (o DeploymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version1"] = o.Version1
	toSerialize["version2"] = o.Version2
	toSerialize["plugins"] = o.Plugins
	toSerialize["latestVersion"] = o.LatestVersion
	return toSerialize, nil
}

func (o *DeploymentMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version1",
		"version2",
		"plugins",
		"latestVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentMetadata := _DeploymentMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentMetadata)

	if err != nil {
		return err
	}

	*o = DeploymentMetadata(varDeploymentMetadata)

	return err
}

type NullableDeploymentMetadata struct {
	value *DeploymentMetadata
	isSet bool
}

func (v NullableDeploymentMetadata) Get() *DeploymentMetadata {
	return v.value
}

func (v *NullableDeploymentMetadata) Set(val *DeploymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentMetadata(val *DeploymentMetadata) *NullableDeploymentMetadata {
	return &NullableDeploymentMetadata{value: val, isSet: true}
}

func (v NullableDeploymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
