/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeployedConfigMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployedConfigMetadata{}

// DeployedConfigMetadata struct for DeployedConfigMetadata
type DeployedConfigMetadata struct {
	Metadata            DeploymentMetadata           `json:"metadata"`
	PluginVersionStatus map[string]map[string]string `json:"pluginVersionStatus"`
}

type _DeployedConfigMetadata DeployedConfigMetadata

// NewDeployedConfigMetadata instantiates a new DeployedConfigMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployedConfigMetadata(metadata DeploymentMetadata, pluginVersionStatus map[string]map[string]string) *DeployedConfigMetadata {
	this := DeployedConfigMetadata{}
	this.Metadata = metadata
	this.PluginVersionStatus = pluginVersionStatus
	return &this
}

// NewDeployedConfigMetadataWithDefaults instantiates a new DeployedConfigMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployedConfigMetadataWithDefaults() *DeployedConfigMetadata {
	this := DeployedConfigMetadata{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *DeployedConfigMetadata) GetMetadata() DeploymentMetadata {
	if o == nil {
		var ret DeploymentMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DeployedConfigMetadata) GetMetadataOk() (*DeploymentMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *DeployedConfigMetadata) SetMetadata(v DeploymentMetadata) {
	o.Metadata = v
}

// GetPluginVersionStatus returns the PluginVersionStatus field value
func (o *DeployedConfigMetadata) GetPluginVersionStatus() map[string]map[string]string {
	if o == nil {
		var ret map[string]map[string]string
		return ret
	}

	return o.PluginVersionStatus
}

// GetPluginVersionStatusOk returns a tuple with the PluginVersionStatus field value
// and a boolean to check if the value has been set.
func (o *DeployedConfigMetadata) GetPluginVersionStatusOk() (*map[string]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluginVersionStatus, true
}

// SetPluginVersionStatus sets field value
func (o *DeployedConfigMetadata) SetPluginVersionStatus(v map[string]map[string]string) {
	o.PluginVersionStatus = v
}

func (o DeployedConfigMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployedConfigMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata"] = o.Metadata
	toSerialize["pluginVersionStatus"] = o.PluginVersionStatus
	return toSerialize, nil
}

func (o *DeployedConfigMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
		"pluginVersionStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeployedConfigMetadata := _DeployedConfigMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeployedConfigMetadata)

	if err != nil {
		return err
	}

	*o = DeployedConfigMetadata(varDeployedConfigMetadata)

	return err
}

type NullableDeployedConfigMetadata struct {
	value *DeployedConfigMetadata
	isSet bool
}

func (v NullableDeployedConfigMetadata) Get() *DeployedConfigMetadata {
	return v.value
}

func (v *NullableDeployedConfigMetadata) Set(val *DeployedConfigMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployedConfigMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployedConfigMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployedConfigMetadata(val *DeployedConfigMetadata) *NullableDeployedConfigMetadata {
	return &NullableDeployedConfigMetadata{value: val, isSet: true}
}

func (v NullableDeployedConfigMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployedConfigMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
