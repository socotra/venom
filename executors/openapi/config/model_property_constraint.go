/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PropertyConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyConstraint{}

// PropertyConstraint struct for PropertyConstraint
type PropertyConstraint struct {
	Table  string                    `json:"table"`
	Column string                    `json:"column"`
	Where  map[string]ConditionValue `json:"where"`
}

type _PropertyConstraint PropertyConstraint

// NewPropertyConstraint instantiates a new PropertyConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyConstraint(table string, column string, where map[string]ConditionValue) *PropertyConstraint {
	this := PropertyConstraint{}
	this.Table = table
	this.Column = column
	this.Where = where
	return &this
}

// NewPropertyConstraintWithDefaults instantiates a new PropertyConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyConstraintWithDefaults() *PropertyConstraint {
	this := PropertyConstraint{}
	return &this
}

// GetTable returns the Table field value
func (o *PropertyConstraint) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *PropertyConstraint) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *PropertyConstraint) SetTable(v string) {
	o.Table = v
}

// GetColumn returns the Column field value
func (o *PropertyConstraint) GetColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *PropertyConstraint) GetColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *PropertyConstraint) SetColumn(v string) {
	o.Column = v
}

// GetWhere returns the Where field value
func (o *PropertyConstraint) GetWhere() map[string]ConditionValue {
	if o == nil {
		var ret map[string]ConditionValue
		return ret
	}

	return o.Where
}

// GetWhereOk returns a tuple with the Where field value
// and a boolean to check if the value has been set.
func (o *PropertyConstraint) GetWhereOk() (*map[string]ConditionValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Where, true
}

// SetWhere sets field value
func (o *PropertyConstraint) SetWhere(v map[string]ConditionValue) {
	o.Where = v
}

func (o PropertyConstraint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["table"] = o.Table
	toSerialize["column"] = o.Column
	toSerialize["where"] = o.Where
	return toSerialize, nil
}

func (o *PropertyConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"table",
		"column",
		"where",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyConstraint := _PropertyConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyConstraint)

	if err != nil {
		return err
	}

	*o = PropertyConstraint(varPropertyConstraint)

	return err
}

type NullablePropertyConstraint struct {
	value *PropertyConstraint
	isSet bool
}

func (v NullablePropertyConstraint) Get() *PropertyConstraint {
	return v.value
}

func (v *NullablePropertyConstraint) Set(val *PropertyConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyConstraint(val *PropertyConstraint) *NullablePropertyConstraint {
	return &NullablePropertyConstraint{value: val, isSet: true}
}

func (v NullablePropertyConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
