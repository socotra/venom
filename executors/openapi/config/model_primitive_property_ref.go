/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrimitivePropertyRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrimitivePropertyRef{}

// PrimitivePropertyRef struct for PrimitivePropertyRef
type PrimitivePropertyRef struct {
	DataType string `json:"dataType"`
}

type _PrimitivePropertyRef PrimitivePropertyRef

// NewPrimitivePropertyRef instantiates a new PrimitivePropertyRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimitivePropertyRef(dataType string) *PrimitivePropertyRef {
	this := PrimitivePropertyRef{}
	this.DataType = dataType
	return &this
}

// NewPrimitivePropertyRefWithDefaults instantiates a new PrimitivePropertyRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimitivePropertyRefWithDefaults() *PrimitivePropertyRef {
	this := PrimitivePropertyRef{}
	return &this
}

// GetDataType returns the DataType field value
func (o *PrimitivePropertyRef) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *PrimitivePropertyRef) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *PrimitivePropertyRef) SetDataType(v string) {
	o.DataType = v
}

func (o PrimitivePropertyRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrimitivePropertyRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataType"] = o.DataType
	return toSerialize, nil
}

func (o *PrimitivePropertyRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrimitivePropertyRef := _PrimitivePropertyRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrimitivePropertyRef)

	if err != nil {
		return err
	}

	*o = PrimitivePropertyRef(varPrimitivePropertyRef)

	return err
}

type NullablePrimitivePropertyRef struct {
	value *PrimitivePropertyRef
	isSet bool
}

func (v NullablePrimitivePropertyRef) Get() *PrimitivePropertyRef {
	return v.value
}

func (v *NullablePrimitivePropertyRef) Set(val *PrimitivePropertyRef) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimitivePropertyRef) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimitivePropertyRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimitivePropertyRef(val *PrimitivePropertyRef) *NullablePrimitivePropertyRef {
	return &NullablePrimitivePropertyRef{value: val, isSet: true}
}

func (v NullablePrimitivePropertyRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimitivePropertyRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
