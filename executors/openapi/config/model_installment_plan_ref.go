/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InstallmentPlanRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallmentPlanRef{}

// InstallmentPlanRef struct for InstallmentPlanRef
type InstallmentPlanRef struct {
	DisplayName            string    `json:"displayName"`
	Cadence                string    `json:"cadence"`
	AnchorMode             string    `json:"anchorMode"`
	GenerateLeadDays       int32     `json:"generateLeadDays"`
	DueLeadDays            int32     `json:"dueLeadDays"`
	InstallmentWeights     []float32 `json:"installmentWeights"`
	MaxInstallmentsPerTerm int32     `json:"maxInstallmentsPerTerm"`
}

type _InstallmentPlanRef InstallmentPlanRef

// NewInstallmentPlanRef instantiates a new InstallmentPlanRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPlanRef(displayName string, cadence string, anchorMode string, generateLeadDays int32, dueLeadDays int32, installmentWeights []float32, maxInstallmentsPerTerm int32) *InstallmentPlanRef {
	this := InstallmentPlanRef{}
	this.DisplayName = displayName
	this.Cadence = cadence
	this.AnchorMode = anchorMode
	this.GenerateLeadDays = generateLeadDays
	this.DueLeadDays = dueLeadDays
	this.InstallmentWeights = installmentWeights
	this.MaxInstallmentsPerTerm = maxInstallmentsPerTerm
	return &this
}

// NewInstallmentPlanRefWithDefaults instantiates a new InstallmentPlanRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPlanRefWithDefaults() *InstallmentPlanRef {
	this := InstallmentPlanRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *InstallmentPlanRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *InstallmentPlanRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCadence returns the Cadence field value
func (o *InstallmentPlanRef) GetCadence() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cadence
}

// GetCadenceOk returns a tuple with the Cadence field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetCadenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cadence, true
}

// SetCadence sets field value
func (o *InstallmentPlanRef) SetCadence(v string) {
	o.Cadence = v
}

// GetAnchorMode returns the AnchorMode field value
func (o *InstallmentPlanRef) GetAnchorMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnchorMode
}

// GetAnchorModeOk returns a tuple with the AnchorMode field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetAnchorModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnchorMode, true
}

// SetAnchorMode sets field value
func (o *InstallmentPlanRef) SetAnchorMode(v string) {
	o.AnchorMode = v
}

// GetGenerateLeadDays returns the GenerateLeadDays field value
func (o *InstallmentPlanRef) GetGenerateLeadDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GenerateLeadDays
}

// GetGenerateLeadDaysOk returns a tuple with the GenerateLeadDays field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetGenerateLeadDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerateLeadDays, true
}

// SetGenerateLeadDays sets field value
func (o *InstallmentPlanRef) SetGenerateLeadDays(v int32) {
	o.GenerateLeadDays = v
}

// GetDueLeadDays returns the DueLeadDays field value
func (o *InstallmentPlanRef) GetDueLeadDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DueLeadDays
}

// GetDueLeadDaysOk returns a tuple with the DueLeadDays field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetDueLeadDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueLeadDays, true
}

// SetDueLeadDays sets field value
func (o *InstallmentPlanRef) SetDueLeadDays(v int32) {
	o.DueLeadDays = v
}

// GetInstallmentWeights returns the InstallmentWeights field value
func (o *InstallmentPlanRef) GetInstallmentWeights() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.InstallmentWeights
}

// GetInstallmentWeightsOk returns a tuple with the InstallmentWeights field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetInstallmentWeightsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallmentWeights, true
}

// SetInstallmentWeights sets field value
func (o *InstallmentPlanRef) SetInstallmentWeights(v []float32) {
	o.InstallmentWeights = v
}

// GetMaxInstallmentsPerTerm returns the MaxInstallmentsPerTerm field value
func (o *InstallmentPlanRef) GetMaxInstallmentsPerTerm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxInstallmentsPerTerm
}

// GetMaxInstallmentsPerTermOk returns a tuple with the MaxInstallmentsPerTerm field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanRef) GetMaxInstallmentsPerTermOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxInstallmentsPerTerm, true
}

// SetMaxInstallmentsPerTerm sets field value
func (o *InstallmentPlanRef) SetMaxInstallmentsPerTerm(v int32) {
	o.MaxInstallmentsPerTerm = v
}

func (o InstallmentPlanRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallmentPlanRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["cadence"] = o.Cadence
	toSerialize["anchorMode"] = o.AnchorMode
	toSerialize["generateLeadDays"] = o.GenerateLeadDays
	toSerialize["dueLeadDays"] = o.DueLeadDays
	toSerialize["installmentWeights"] = o.InstallmentWeights
	toSerialize["maxInstallmentsPerTerm"] = o.MaxInstallmentsPerTerm
	return toSerialize, nil
}

func (o *InstallmentPlanRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"cadence",
		"anchorMode",
		"generateLeadDays",
		"dueLeadDays",
		"installmentWeights",
		"maxInstallmentsPerTerm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallmentPlanRef := _InstallmentPlanRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallmentPlanRef)

	if err != nil {
		return err
	}

	*o = InstallmentPlanRef(varInstallmentPlanRef)

	return err
}

type NullableInstallmentPlanRef struct {
	value *InstallmentPlanRef
	isSet bool
}

func (v NullableInstallmentPlanRef) Get() *InstallmentPlanRef {
	return v.value
}

func (v *NullableInstallmentPlanRef) Set(val *InstallmentPlanRef) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPlanRef) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPlanRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPlanRef(val *InstallmentPlanRef) *NullableInstallmentPlanRef {
	return &NullableInstallmentPlanRef{value: val, isSet: true}
}

func (v NullableInstallmentPlanRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPlanRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
