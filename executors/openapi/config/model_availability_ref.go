/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AvailabilityRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailabilityRef{}

// AvailabilityRef struct for AvailabilityRef
type AvailabilityRef struct {
	AvailableAfter        time.Time `json:"availableAfter"`
	AvailabilityTimeBasis string    `json:"availabilityTimeBasis"`
	RetireAfter           time.Time `json:"retireAfter"`
	Retire                bool      `json:"retire"`
	RetirementTimeBasis   string    `json:"retirementTimeBasis"`
	RemoveOnRenewalAfter  time.Time `json:"removeOnRenewalAfter"`
	RemoveOnRenewal       bool      `json:"removeOnRenewal"`
}

type _AvailabilityRef AvailabilityRef

// NewAvailabilityRef instantiates a new AvailabilityRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityRef(availableAfter time.Time, availabilityTimeBasis string, retireAfter time.Time, retire bool, retirementTimeBasis string, removeOnRenewalAfter time.Time, removeOnRenewal bool) *AvailabilityRef {
	this := AvailabilityRef{}
	this.AvailableAfter = availableAfter
	this.AvailabilityTimeBasis = availabilityTimeBasis
	this.RetireAfter = retireAfter
	this.Retire = retire
	this.RetirementTimeBasis = retirementTimeBasis
	this.RemoveOnRenewalAfter = removeOnRenewalAfter
	this.RemoveOnRenewal = removeOnRenewal
	return &this
}

// NewAvailabilityRefWithDefaults instantiates a new AvailabilityRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityRefWithDefaults() *AvailabilityRef {
	this := AvailabilityRef{}
	return &this
}

// GetAvailableAfter returns the AvailableAfter field value
func (o *AvailabilityRef) GetAvailableAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AvailableAfter
}

// GetAvailableAfterOk returns a tuple with the AvailableAfter field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetAvailableAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableAfter, true
}

// SetAvailableAfter sets field value
func (o *AvailabilityRef) SetAvailableAfter(v time.Time) {
	o.AvailableAfter = v
}

// GetAvailabilityTimeBasis returns the AvailabilityTimeBasis field value
func (o *AvailabilityRef) GetAvailabilityTimeBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailabilityTimeBasis
}

// GetAvailabilityTimeBasisOk returns a tuple with the AvailabilityTimeBasis field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetAvailabilityTimeBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityTimeBasis, true
}

// SetAvailabilityTimeBasis sets field value
func (o *AvailabilityRef) SetAvailabilityTimeBasis(v string) {
	o.AvailabilityTimeBasis = v
}

// GetRetireAfter returns the RetireAfter field value
func (o *AvailabilityRef) GetRetireAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RetireAfter
}

// GetRetireAfterOk returns a tuple with the RetireAfter field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetRetireAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetireAfter, true
}

// SetRetireAfter sets field value
func (o *AvailabilityRef) SetRetireAfter(v time.Time) {
	o.RetireAfter = v
}

// GetRetire returns the Retire field value
func (o *AvailabilityRef) GetRetire() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Retire
}

// GetRetireOk returns a tuple with the Retire field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetRetireOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retire, true
}

// SetRetire sets field value
func (o *AvailabilityRef) SetRetire(v bool) {
	o.Retire = v
}

// GetRetirementTimeBasis returns the RetirementTimeBasis field value
func (o *AvailabilityRef) GetRetirementTimeBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RetirementTimeBasis
}

// GetRetirementTimeBasisOk returns a tuple with the RetirementTimeBasis field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetRetirementTimeBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetirementTimeBasis, true
}

// SetRetirementTimeBasis sets field value
func (o *AvailabilityRef) SetRetirementTimeBasis(v string) {
	o.RetirementTimeBasis = v
}

// GetRemoveOnRenewalAfter returns the RemoveOnRenewalAfter field value
func (o *AvailabilityRef) GetRemoveOnRenewalAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RemoveOnRenewalAfter
}

// GetRemoveOnRenewalAfterOk returns a tuple with the RemoveOnRenewalAfter field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetRemoveOnRenewalAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveOnRenewalAfter, true
}

// SetRemoveOnRenewalAfter sets field value
func (o *AvailabilityRef) SetRemoveOnRenewalAfter(v time.Time) {
	o.RemoveOnRenewalAfter = v
}

// GetRemoveOnRenewal returns the RemoveOnRenewal field value
func (o *AvailabilityRef) GetRemoveOnRenewal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoveOnRenewal
}

// GetRemoveOnRenewalOk returns a tuple with the RemoveOnRenewal field value
// and a boolean to check if the value has been set.
func (o *AvailabilityRef) GetRemoveOnRenewalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveOnRenewal, true
}

// SetRemoveOnRenewal sets field value
func (o *AvailabilityRef) SetRemoveOnRenewal(v bool) {
	o.RemoveOnRenewal = v
}

func (o AvailabilityRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailabilityRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availableAfter"] = o.AvailableAfter
	toSerialize["availabilityTimeBasis"] = o.AvailabilityTimeBasis
	toSerialize["retireAfter"] = o.RetireAfter
	toSerialize["retire"] = o.Retire
	toSerialize["retirementTimeBasis"] = o.RetirementTimeBasis
	toSerialize["removeOnRenewalAfter"] = o.RemoveOnRenewalAfter
	toSerialize["removeOnRenewal"] = o.RemoveOnRenewal
	return toSerialize, nil
}

func (o *AvailabilityRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"availableAfter",
		"availabilityTimeBasis",
		"retireAfter",
		"retire",
		"retirementTimeBasis",
		"removeOnRenewalAfter",
		"removeOnRenewal",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailabilityRef := _AvailabilityRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailabilityRef)

	if err != nil {
		return err
	}

	*o = AvailabilityRef(varAvailabilityRef)

	return err
}

type NullableAvailabilityRef struct {
	value *AvailabilityRef
	isSet bool
}

func (v NullableAvailabilityRef) Get() *AvailabilityRef {
	return v.value
}

func (v *NullableAvailabilityRef) Set(val *AvailabilityRef) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityRef) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityRef(val *AvailabilityRef) *NullableAvailabilityRef {
	return &NullableAvailabilityRef{value: val, isSet: true}
}

func (v NullableAvailabilityRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
