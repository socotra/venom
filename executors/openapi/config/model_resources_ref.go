/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourcesRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourcesRef{}

// ResourcesRef struct for ResourcesRef
type ResourcesRef struct {
	ResourceInstances map[string]ResourceInstanceRef `json:"resourceInstances"`
	ResourceGroups    map[string]ResourceGroupRef    `json:"resourceGroups"`
}

type _ResourcesRef ResourcesRef

// NewResourcesRef instantiates a new ResourcesRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcesRef(resourceInstances map[string]ResourceInstanceRef, resourceGroups map[string]ResourceGroupRef) *ResourcesRef {
	this := ResourcesRef{}
	this.ResourceInstances = resourceInstances
	this.ResourceGroups = resourceGroups
	return &this
}

// NewResourcesRefWithDefaults instantiates a new ResourcesRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesRefWithDefaults() *ResourcesRef {
	this := ResourcesRef{}
	return &this
}

// GetResourceInstances returns the ResourceInstances field value
func (o *ResourcesRef) GetResourceInstances() map[string]ResourceInstanceRef {
	if o == nil {
		var ret map[string]ResourceInstanceRef
		return ret
	}

	return o.ResourceInstances
}

// GetResourceInstancesOk returns a tuple with the ResourceInstances field value
// and a boolean to check if the value has been set.
func (o *ResourcesRef) GetResourceInstancesOk() (*map[string]ResourceInstanceRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceInstances, true
}

// SetResourceInstances sets field value
func (o *ResourcesRef) SetResourceInstances(v map[string]ResourceInstanceRef) {
	o.ResourceInstances = v
}

// GetResourceGroups returns the ResourceGroups field value
func (o *ResourcesRef) GetResourceGroups() map[string]ResourceGroupRef {
	if o == nil {
		var ret map[string]ResourceGroupRef
		return ret
	}

	return o.ResourceGroups
}

// GetResourceGroupsOk returns a tuple with the ResourceGroups field value
// and a boolean to check if the value has been set.
func (o *ResourcesRef) GetResourceGroupsOk() (*map[string]ResourceGroupRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroups, true
}

// SetResourceGroups sets field value
func (o *ResourcesRef) SetResourceGroups(v map[string]ResourceGroupRef) {
	o.ResourceGroups = v
}

func (o ResourcesRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourcesRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceInstances"] = o.ResourceInstances
	toSerialize["resourceGroups"] = o.ResourceGroups
	return toSerialize, nil
}

func (o *ResourcesRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceInstances",
		"resourceGroups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourcesRef := _ResourcesRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourcesRef)

	if err != nil {
		return err
	}

	*o = ResourcesRef(varResourcesRef)

	return err
}

type NullableResourcesRef struct {
	value *ResourcesRef
	isSet bool
}

func (v NullableResourcesRef) Get() *ResourcesRef {
	return v.value
}

func (v *NullableResourcesRef) Set(val *ResourcesRef) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesRef) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesRef(val *ResourcesRef) *NullableResourcesRef {
	return &NullableResourcesRef{value: val, isSet: true}
}

func (v NullableResourcesRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
