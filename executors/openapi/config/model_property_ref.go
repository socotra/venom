/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PropertyRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyRef{}

// PropertyRef struct for PropertyRef
type PropertyRef struct {
	DisplayName    string             `json:"displayName"`
	Type           string             `json:"type"`
	Scope          string             `json:"scope"`
	DefaultValue   string             `json:"defaultValue"`
	Min            string             `json:"min"`
	Max            string             `json:"max"`
	MinLength      int32              `json:"minLength"`
	MaxLength      int32              `json:"maxLength"`
	Precision      int32              `json:"precision"`
	Options        []string           `json:"options"`
	Regex          string             `json:"regex"`
	RoundingMode   string             `json:"roundingMode"`
	Tag            []string           `json:"tag"`
	Constraint     PropertyConstraint `json:"constraint"`
	Searchable     bool               `json:"searchable"`
	Availability   *AvailabilityRef   `json:"availability,omitempty"`
	RestrictedData RestrictedDataRef  `json:"restrictedData"`
}

type _PropertyRef PropertyRef

// NewPropertyRef instantiates a new PropertyRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyRef(displayName string, type_ string, scope string, defaultValue string, min string, max string, minLength int32, maxLength int32, precision int32, options []string, regex string, roundingMode string, tag []string, constraint PropertyConstraint, searchable bool, restrictedData RestrictedDataRef) *PropertyRef {
	this := PropertyRef{}
	this.DisplayName = displayName
	this.Type = type_
	this.Scope = scope
	this.DefaultValue = defaultValue
	this.Min = min
	this.Max = max
	this.MinLength = minLength
	this.MaxLength = maxLength
	this.Precision = precision
	this.Options = options
	this.Regex = regex
	this.RoundingMode = roundingMode
	this.Tag = tag
	this.Constraint = constraint
	this.Searchable = searchable
	this.RestrictedData = restrictedData
	return &this
}

// NewPropertyRefWithDefaults instantiates a new PropertyRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyRefWithDefaults() *PropertyRef {
	this := PropertyRef{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *PropertyRef) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *PropertyRef) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetType returns the Type field value
func (o *PropertyRef) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PropertyRef) SetType(v string) {
	o.Type = v
}

// GetScope returns the Scope field value
func (o *PropertyRef) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *PropertyRef) SetScope(v string) {
	o.Scope = v
}

// GetDefaultValue returns the DefaultValue field value
func (o *PropertyRef) GetDefaultValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultValue, true
}

// SetDefaultValue sets field value
func (o *PropertyRef) SetDefaultValue(v string) {
	o.DefaultValue = v
}

// GetMin returns the Min field value
func (o *PropertyRef) GetMin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetMinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *PropertyRef) SetMin(v string) {
	o.Min = v
}

// GetMax returns the Max field value
func (o *PropertyRef) GetMax() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetMaxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *PropertyRef) SetMax(v string) {
	o.Max = v
}

// GetMinLength returns the MinLength field value
func (o *PropertyRef) GetMinLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetMinLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinLength, true
}

// SetMinLength sets field value
func (o *PropertyRef) SetMinLength(v int32) {
	o.MinLength = v
}

// GetMaxLength returns the MaxLength field value
func (o *PropertyRef) GetMaxLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetMaxLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLength, true
}

// SetMaxLength sets field value
func (o *PropertyRef) SetMaxLength(v int32) {
	o.MaxLength = v
}

// GetPrecision returns the Precision field value
func (o *PropertyRef) GetPrecision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetPrecisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Precision, true
}

// SetPrecision sets field value
func (o *PropertyRef) SetPrecision(v int32) {
	o.Precision = v
}

// GetOptions returns the Options field value
func (o *PropertyRef) GetOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetOptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *PropertyRef) SetOptions(v []string) {
	o.Options = v
}

// GetRegex returns the Regex field value
func (o *PropertyRef) GetRegex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Regex
}

// GetRegexOk returns a tuple with the Regex field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetRegexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Regex, true
}

// SetRegex sets field value
func (o *PropertyRef) SetRegex(v string) {
	o.Regex = v
}

// GetRoundingMode returns the RoundingMode field value
func (o *PropertyRef) GetRoundingMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoundingMode
}

// GetRoundingModeOk returns a tuple with the RoundingMode field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetRoundingModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoundingMode, true
}

// SetRoundingMode sets field value
func (o *PropertyRef) SetRoundingMode(v string) {
	o.RoundingMode = v
}

// GetTag returns the Tag field value
func (o *PropertyRef) GetTag() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetTagOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag, true
}

// SetTag sets field value
func (o *PropertyRef) SetTag(v []string) {
	o.Tag = v
}

// GetConstraint returns the Constraint field value
func (o *PropertyRef) GetConstraint() PropertyConstraint {
	if o == nil {
		var ret PropertyConstraint
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetConstraintOk() (*PropertyConstraint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *PropertyRef) SetConstraint(v PropertyConstraint) {
	o.Constraint = v
}

// GetSearchable returns the Searchable field value
func (o *PropertyRef) GetSearchable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetSearchableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Searchable, true
}

// SetSearchable sets field value
func (o *PropertyRef) SetSearchable(v bool) {
	o.Searchable = v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *PropertyRef) GetAvailability() AvailabilityRef {
	if o == nil || IsNil(o.Availability) {
		var ret AvailabilityRef
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetAvailabilityOk() (*AvailabilityRef, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *PropertyRef) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given AvailabilityRef and assigns it to the Availability field.
func (o *PropertyRef) SetAvailability(v AvailabilityRef) {
	o.Availability = &v
}

// GetRestrictedData returns the RestrictedData field value
func (o *PropertyRef) GetRestrictedData() RestrictedDataRef {
	if o == nil {
		var ret RestrictedDataRef
		return ret
	}

	return o.RestrictedData
}

// GetRestrictedDataOk returns a tuple with the RestrictedData field value
// and a boolean to check if the value has been set.
func (o *PropertyRef) GetRestrictedDataOk() (*RestrictedDataRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestrictedData, true
}

// SetRestrictedData sets field value
func (o *PropertyRef) SetRestrictedData(v RestrictedDataRef) {
	o.RestrictedData = v
}

func (o PropertyRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["type"] = o.Type
	toSerialize["scope"] = o.Scope
	toSerialize["defaultValue"] = o.DefaultValue
	toSerialize["min"] = o.Min
	toSerialize["max"] = o.Max
	toSerialize["minLength"] = o.MinLength
	toSerialize["maxLength"] = o.MaxLength
	toSerialize["precision"] = o.Precision
	toSerialize["options"] = o.Options
	toSerialize["regex"] = o.Regex
	toSerialize["roundingMode"] = o.RoundingMode
	toSerialize["tag"] = o.Tag
	toSerialize["constraint"] = o.Constraint
	toSerialize["searchable"] = o.Searchable
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	toSerialize["restrictedData"] = o.RestrictedData
	return toSerialize, nil
}

func (o *PropertyRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"type",
		"scope",
		"defaultValue",
		"min",
		"max",
		"minLength",
		"maxLength",
		"precision",
		"options",
		"regex",
		"roundingMode",
		"tag",
		"constraint",
		"searchable",
		"restrictedData",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyRef := _PropertyRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyRef)

	if err != nil {
		return err
	}

	*o = PropertyRef(varPropertyRef)

	return err
}

type NullablePropertyRef struct {
	value *PropertyRef
	isSet bool
}

func (v NullablePropertyRef) Get() *PropertyRef {
	return v.value
}

func (v *NullablePropertyRef) Set(val *PropertyRef) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyRef) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyRef(val *PropertyRef) *NullablePropertyRef {
	return &NullablePropertyRef{value: val, isSet: true}
}

func (v NullablePropertyRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
