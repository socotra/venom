/*
OpenAPI definition

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceInstanceRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceInstanceRef{}

// ResourceInstanceRef struct for ResourceInstanceRef
type ResourceInstanceRef struct {
	StaticName string `json:"staticName"`
}

type _ResourceInstanceRef ResourceInstanceRef

// NewResourceInstanceRef instantiates a new ResourceInstanceRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInstanceRef(staticName string) *ResourceInstanceRef {
	this := ResourceInstanceRef{}
	this.StaticName = staticName
	return &this
}

// NewResourceInstanceRefWithDefaults instantiates a new ResourceInstanceRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInstanceRefWithDefaults() *ResourceInstanceRef {
	this := ResourceInstanceRef{}
	return &this
}

// GetStaticName returns the StaticName field value
func (o *ResourceInstanceRef) GetStaticName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaticName
}

// GetStaticNameOk returns a tuple with the StaticName field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRef) GetStaticNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticName, true
}

// SetStaticName sets field value
func (o *ResourceInstanceRef) SetStaticName(v string) {
	o.StaticName = v
}

func (o ResourceInstanceRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInstanceRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["staticName"] = o.StaticName
	return toSerialize, nil
}

func (o *ResourceInstanceRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"staticName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceInstanceRef := _ResourceInstanceRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceInstanceRef)

	if err != nil {
		return err
	}

	*o = ResourceInstanceRef(varResourceInstanceRef)

	return err
}

type NullableResourceInstanceRef struct {
	value *ResourceInstanceRef
	isSet bool
}

func (v NullableResourceInstanceRef) Get() *ResourceInstanceRef {
	return v.value
}

func (v *NullableResourceInstanceRef) Set(val *ResourceInstanceRef) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInstanceRef) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInstanceRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInstanceRef(val *ResourceInstanceRef) *NullableResourceInstanceRef {
	return &NullableResourceInstanceRef{value: val, isSet: true}
}

func (v NullableResourceInstanceRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInstanceRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
